# Task ID: 5
# Title: Create Column Mapping Interface
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Build the interface for mapping Google Sheets columns to system metrics and implement the data transformation pipeline.
# Details:
Create UI components for column mapping in src/components/google/mapping/. Implement drag-and-drop functionality for mapping columns. Build services for storing and retrieving column mappings in src/services/google/. Develop data transformation pipeline in src/services/calculations/ to convert raw spreadsheet data into standardized metrics. Implement validation for column mappings. Create API endpoints for saving and updating mappings in src/app/api/google/mapping/.

# Test Strategy:
Test column mapping UI with sample spreadsheet data. Verify mappings are correctly saved to the database. Test data transformation with various input formats. Validate transformed data against expected output. Test error handling for invalid mappings.

# Subtasks:
## 1. Build Column Mapping UI Components with Drag-and-Drop [pending]
### Dependencies: None
### Description: Create the React components for the column mapping interface with drag-and-drop functionality that allows users to visually map Google Sheets columns to system metrics.
### Details:
1. Create base components in src/components/google/mapping/:
   - ColumnMappingContainer.jsx: Main container component
   - SourceColumnList.jsx: Component to display available Google Sheets columns
   - DestinationFieldList.jsx: Component to display system metric fields
   - MappingItem.jsx: Individual mapping item component

2. Implement drag-and-drop functionality using react-dnd or react-beautiful-dnd:
   - Set up DnD context providers
   - Create drag sources for source columns
   - Create drop targets for destination fields
   - Implement visual feedback during dragging

3. Add auto-mapping functionality based on column name similarity:
   - Implement string similarity algorithm (Levenshtein distance)
   - Create a button to trigger auto-mapping
   - Display suggested mappings with visual indicators

4. Add validation feedback:
   - Highlight required fields that haven't been mapped
   - Show type mismatch warnings
   - Implement validation status indicators

Testing approach:
- Unit tests for individual components
- Integration tests for drag-and-drop functionality
- Test auto-mapping with various column name patterns
- Test validation with valid and invalid mappings

## 2. Implement Mapping Storage and API Endpoints [pending]
### Dependencies: 5.1
### Description: Create services and API endpoints for storing, retrieving, and managing column mappings between Google Sheets and system metrics.
### Details:
1. Create mapping data models in src/models/:
   - Define ColumnMapping schema with fields for mapping configuration, source type, and metadata
   - Implement versioning support for mapping configurations
   - Add support for mapping templates

2. Implement mapping services in src/services/google/:
   - MappingService.js: Core service for CRUD operations on mappings
   - TemplateService.js: Service for managing reusable mapping templates
   - ValidationService.js: Service for validating mapping configurations

3. Create API endpoints in src/app/api/google/mapping/:
   - route.js: Define API routes
   - GET /api/google/mapping/:id - Retrieve a specific mapping
   - POST /api/google/mapping - Create a new mapping
   - PUT /api/google/mapping/:id - Update an existing mapping
   - GET /api/google/mapping/templates - List available templates
   - POST /api/google/mapping/validate - Validate a mapping configuration

4. Implement error handling and logging:
   - Add comprehensive error handling for all API endpoints
   - Implement request validation using middleware
   - Set up logging for mapping operations

Testing approach:
- Unit tests for mapping services
- API endpoint tests with mock requests
- Integration tests for the complete mapping storage flow
- Performance tests for large mapping configurations

## 3. Develop Data Transformation Pipeline [pending]
### Dependencies: 5.1, 5.2
### Description: Build a robust data transformation pipeline that converts raw Google Sheets data into standardized system metrics based on user-defined column mappings.
### Details:
1. Create transformation services in src/services/calculations/:
   - TransformationPipeline.js: Main pipeline orchestrator
   - DataTypeConverters.js: Utilities for type conversion
   - ValidationRules.js: Rules for validating transformed data
   - TransformationFunctions.js: Library of data transformation functions

2. Implement core transformation logic:
   - Create a factory pattern for generating transformers based on mapping configurations
   - Support basic transformations (type conversion, formatting)
   - Implement advanced transformations (conditional logic, formulas)
   - Add support for custom transformation functions

3. Add performance optimizations:
   - Implement chunked processing for large datasets
   - Add caching for frequently used transformations
   - Support incremental updates for changed rows only
   - Implement background processing for large transformations

4. Create integration with Google Sheets API:
   - Implement functions to fetch sheet data based on mapping
   - Add support for pagination when fetching large sheets
   - Implement error handling for API rate limits and timeouts
   - Add retry logic for failed API requests

Testing approach:
- Unit tests for individual transformation functions
- Integration tests with sample Google Sheets data
- Performance tests with large datasets
- End-to-end tests for the complete transformation pipeline
- Error handling tests with invalid data and API failures

