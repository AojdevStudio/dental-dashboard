
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Clinic
 * 
 */
export type Clinic = $Result.DefaultSelection<Prisma.$ClinicPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Provider
 * 
 */
export type Provider = $Result.DefaultSelection<Prisma.$ProviderPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model ProviderLocation
 * 
 */
export type ProviderLocation = $Result.DefaultSelection<Prisma.$ProviderLocationPayload>
/**
 * Model LocationFinancial
 * 
 */
export type LocationFinancial = $Result.DefaultSelection<Prisma.$LocationFinancialPayload>
/**
 * Model MetricDefinition
 * 
 */
export type MetricDefinition = $Result.DefaultSelection<Prisma.$MetricDefinitionPayload>
/**
 * Model DataSource
 * 
 */
export type DataSource = $Result.DefaultSelection<Prisma.$DataSourcePayload>
/**
 * Model ColumnMapping
 * 
 */
export type ColumnMapping = $Result.DefaultSelection<Prisma.$ColumnMappingPayload>
/**
 * Model MetricValue
 * 
 */
export type MetricValue = $Result.DefaultSelection<Prisma.$MetricValuePayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model Dashboard
 * 
 */
export type Dashboard = $Result.DefaultSelection<Prisma.$DashboardPayload>
/**
 * Model Widget
 * 
 */
export type Widget = $Result.DefaultSelection<Prisma.$WidgetPayload>
/**
 * Model UserClinicRole
 * 
 */
export type UserClinicRole = $Result.DefaultSelection<Prisma.$UserClinicRolePayload>
/**
 * Model GoalTemplate
 * 
 */
export type GoalTemplate = $Result.DefaultSelection<Prisma.$GoalTemplatePayload>
/**
 * Model FinancialMetric
 * 
 */
export type FinancialMetric = $Result.DefaultSelection<Prisma.$FinancialMetricPayload>
/**
 * Model AppointmentMetric
 * 
 */
export type AppointmentMetric = $Result.DefaultSelection<Prisma.$AppointmentMetricPayload>
/**
 * Model CallMetric
 * 
 */
export type CallMetric = $Result.DefaultSelection<Prisma.$CallMetricPayload>
/**
 * Model PatientMetric
 * 
 */
export type PatientMetric = $Result.DefaultSelection<Prisma.$PatientMetricPayload>
/**
 * Model MetricAggregation
 * 
 */
export type MetricAggregation = $Result.DefaultSelection<Prisma.$MetricAggregationPayload>
/**
 * Model GoogleCredential
 * 
 */
export type GoogleCredential = $Result.DefaultSelection<Prisma.$GoogleCredentialPayload>
/**
 * Model SpreadsheetConnection
 * 
 */
export type SpreadsheetConnection = $Result.DefaultSelection<Prisma.$SpreadsheetConnectionPayload>
/**
 * Model ColumnMappingV2
 * 
 */
export type ColumnMappingV2 = $Result.DefaultSelection<Prisma.$ColumnMappingV2Payload>
/**
 * Model HygieneProduction
 * 
 */
export type HygieneProduction = $Result.DefaultSelection<Prisma.$HygieneProductionPayload>
/**
 * Model DentistProduction
 * 
 */
export type DentistProduction = $Result.DefaultSelection<Prisma.$DentistProductionPayload>
/**
 * Model IdMapping
 * 
 */
export type IdMapping = $Result.DefaultSelection<Prisma.$IdMappingPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clinics
 * const clinics = await prisma.clinic.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clinics
   * const clinics = await prisma.clinic.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.clinic`: Exposes CRUD operations for the **Clinic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clinics
    * const clinics = await prisma.clinic.findMany()
    * ```
    */
  get clinic(): Prisma.ClinicDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.provider`: Exposes CRUD operations for the **Provider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Providers
    * const providers = await prisma.provider.findMany()
    * ```
    */
  get provider(): Prisma.ProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.providerLocation`: Exposes CRUD operations for the **ProviderLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProviderLocations
    * const providerLocations = await prisma.providerLocation.findMany()
    * ```
    */
  get providerLocation(): Prisma.ProviderLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.locationFinancial`: Exposes CRUD operations for the **LocationFinancial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationFinancials
    * const locationFinancials = await prisma.locationFinancial.findMany()
    * ```
    */
  get locationFinancial(): Prisma.LocationFinancialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricDefinition`: Exposes CRUD operations for the **MetricDefinition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricDefinitions
    * const metricDefinitions = await prisma.metricDefinition.findMany()
    * ```
    */
  get metricDefinition(): Prisma.MetricDefinitionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dataSource`: Exposes CRUD operations for the **DataSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataSources
    * const dataSources = await prisma.dataSource.findMany()
    * ```
    */
  get dataSource(): Prisma.DataSourceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.columnMapping`: Exposes CRUD operations for the **ColumnMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ColumnMappings
    * const columnMappings = await prisma.columnMapping.findMany()
    * ```
    */
  get columnMapping(): Prisma.ColumnMappingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricValue`: Exposes CRUD operations for the **MetricValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricValues
    * const metricValues = await prisma.metricValue.findMany()
    * ```
    */
  get metricValue(): Prisma.MetricValueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dashboard`: Exposes CRUD operations for the **Dashboard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dashboards
    * const dashboards = await prisma.dashboard.findMany()
    * ```
    */
  get dashboard(): Prisma.DashboardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.widget`: Exposes CRUD operations for the **Widget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Widgets
    * const widgets = await prisma.widget.findMany()
    * ```
    */
  get widget(): Prisma.WidgetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userClinicRole`: Exposes CRUD operations for the **UserClinicRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserClinicRoles
    * const userClinicRoles = await prisma.userClinicRole.findMany()
    * ```
    */
  get userClinicRole(): Prisma.UserClinicRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.goalTemplate`: Exposes CRUD operations for the **GoalTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalTemplates
    * const goalTemplates = await prisma.goalTemplate.findMany()
    * ```
    */
  get goalTemplate(): Prisma.GoalTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialMetric`: Exposes CRUD operations for the **FinancialMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialMetrics
    * const financialMetrics = await prisma.financialMetric.findMany()
    * ```
    */
  get financialMetric(): Prisma.FinancialMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointmentMetric`: Exposes CRUD operations for the **AppointmentMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppointmentMetrics
    * const appointmentMetrics = await prisma.appointmentMetric.findMany()
    * ```
    */
  get appointmentMetric(): Prisma.AppointmentMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.callMetric`: Exposes CRUD operations for the **CallMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CallMetrics
    * const callMetrics = await prisma.callMetric.findMany()
    * ```
    */
  get callMetric(): Prisma.CallMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientMetric`: Exposes CRUD operations for the **PatientMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientMetrics
    * const patientMetrics = await prisma.patientMetric.findMany()
    * ```
    */
  get patientMetric(): Prisma.PatientMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricAggregation`: Exposes CRUD operations for the **MetricAggregation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricAggregations
    * const metricAggregations = await prisma.metricAggregation.findMany()
    * ```
    */
  get metricAggregation(): Prisma.MetricAggregationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.googleCredential`: Exposes CRUD operations for the **GoogleCredential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoogleCredentials
    * const googleCredentials = await prisma.googleCredential.findMany()
    * ```
    */
  get googleCredential(): Prisma.GoogleCredentialDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.spreadsheetConnection`: Exposes CRUD operations for the **SpreadsheetConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpreadsheetConnections
    * const spreadsheetConnections = await prisma.spreadsheetConnection.findMany()
    * ```
    */
  get spreadsheetConnection(): Prisma.SpreadsheetConnectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.columnMappingV2`: Exposes CRUD operations for the **ColumnMappingV2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ColumnMappingV2s
    * const columnMappingV2s = await prisma.columnMappingV2.findMany()
    * ```
    */
  get columnMappingV2(): Prisma.ColumnMappingV2Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hygieneProduction`: Exposes CRUD operations for the **HygieneProduction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HygieneProductions
    * const hygieneProductions = await prisma.hygieneProduction.findMany()
    * ```
    */
  get hygieneProduction(): Prisma.HygieneProductionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dentistProduction`: Exposes CRUD operations for the **DentistProduction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DentistProductions
    * const dentistProductions = await prisma.dentistProduction.findMany()
    * ```
    */
  get dentistProduction(): Prisma.DentistProductionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.idMapping`: Exposes CRUD operations for the **IdMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IdMappings
    * const idMappings = await prisma.idMapping.findMany()
    * ```
    */
  get idMapping(): Prisma.IdMappingDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Clinic: 'Clinic',
    User: 'User',
    Provider: 'Provider',
    Location: 'Location',
    ProviderLocation: 'ProviderLocation',
    LocationFinancial: 'LocationFinancial',
    MetricDefinition: 'MetricDefinition',
    DataSource: 'DataSource',
    ColumnMapping: 'ColumnMapping',
    MetricValue: 'MetricValue',
    Goal: 'Goal',
    Dashboard: 'Dashboard',
    Widget: 'Widget',
    UserClinicRole: 'UserClinicRole',
    GoalTemplate: 'GoalTemplate',
    FinancialMetric: 'FinancialMetric',
    AppointmentMetric: 'AppointmentMetric',
    CallMetric: 'CallMetric',
    PatientMetric: 'PatientMetric',
    MetricAggregation: 'MetricAggregation',
    GoogleCredential: 'GoogleCredential',
    SpreadsheetConnection: 'SpreadsheetConnection',
    ColumnMappingV2: 'ColumnMappingV2',
    HygieneProduction: 'HygieneProduction',
    DentistProduction: 'DentistProduction',
    IdMapping: 'IdMapping'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "clinic" | "user" | "provider" | "location" | "providerLocation" | "locationFinancial" | "metricDefinition" | "dataSource" | "columnMapping" | "metricValue" | "goal" | "dashboard" | "widget" | "userClinicRole" | "goalTemplate" | "financialMetric" | "appointmentMetric" | "callMetric" | "patientMetric" | "metricAggregation" | "googleCredential" | "spreadsheetConnection" | "columnMappingV2" | "hygieneProduction" | "dentistProduction" | "idMapping"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Clinic: {
        payload: Prisma.$ClinicPayload<ExtArgs>
        fields: Prisma.ClinicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          findFirst: {
            args: Prisma.ClinicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          findMany: {
            args: Prisma.ClinicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          create: {
            args: Prisma.ClinicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          createMany: {
            args: Prisma.ClinicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          delete: {
            args: Prisma.ClinicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          update: {
            args: Prisma.ClinicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          deleteMany: {
            args: Prisma.ClinicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClinicUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>[]
          }
          upsert: {
            args: Prisma.ClinicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicPayload>
          }
          aggregate: {
            args: Prisma.ClinicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinic>
          }
          groupBy: {
            args: Prisma.ClinicGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Provider: {
        payload: Prisma.$ProviderPayload<ExtArgs>
        fields: Prisma.ProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findFirst: {
            args: Prisma.ProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findMany: {
            args: Prisma.ProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          create: {
            args: Prisma.ProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          createMany: {
            args: Prisma.ProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          delete: {
            args: Prisma.ProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          update: {
            args: Prisma.ProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          deleteMany: {
            args: Prisma.ProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          upsert: {
            args: Prisma.ProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          aggregate: {
            args: Prisma.ProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvider>
          }
          groupBy: {
            args: Prisma.ProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderCountArgs<ExtArgs>
            result: $Utils.Optional<ProviderCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      ProviderLocation: {
        payload: Prisma.$ProviderLocationPayload<ExtArgs>
        fields: Prisma.ProviderLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          findFirst: {
            args: Prisma.ProviderLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          findMany: {
            args: Prisma.ProviderLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>[]
          }
          create: {
            args: Prisma.ProviderLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          createMany: {
            args: Prisma.ProviderLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProviderLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>[]
          }
          delete: {
            args: Prisma.ProviderLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          update: {
            args: Prisma.ProviderLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          deleteMany: {
            args: Prisma.ProviderLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProviderLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>[]
          }
          upsert: {
            args: Prisma.ProviderLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderLocationPayload>
          }
          aggregate: {
            args: Prisma.ProviderLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProviderLocation>
          }
          groupBy: {
            args: Prisma.ProviderLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProviderLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderLocationCountArgs<ExtArgs>
            result: $Utils.Optional<ProviderLocationCountAggregateOutputType> | number
          }
        }
      }
      LocationFinancial: {
        payload: Prisma.$LocationFinancialPayload<ExtArgs>
        fields: Prisma.LocationFinancialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFinancialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFinancialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          findFirst: {
            args: Prisma.LocationFinancialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFinancialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          findMany: {
            args: Prisma.LocationFinancialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>[]
          }
          create: {
            args: Prisma.LocationFinancialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          createMany: {
            args: Prisma.LocationFinancialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationFinancialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>[]
          }
          delete: {
            args: Prisma.LocationFinancialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          update: {
            args: Prisma.LocationFinancialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          deleteMany: {
            args: Prisma.LocationFinancialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationFinancialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationFinancialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>[]
          }
          upsert: {
            args: Prisma.LocationFinancialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationFinancialPayload>
          }
          aggregate: {
            args: Prisma.LocationFinancialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationFinancial>
          }
          groupBy: {
            args: Prisma.LocationFinancialGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationFinancialGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationFinancialCountArgs<ExtArgs>
            result: $Utils.Optional<LocationFinancialCountAggregateOutputType> | number
          }
        }
      }
      MetricDefinition: {
        payload: Prisma.$MetricDefinitionPayload<ExtArgs>
        fields: Prisma.MetricDefinitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricDefinitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricDefinitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          findFirst: {
            args: Prisma.MetricDefinitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricDefinitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          findMany: {
            args: Prisma.MetricDefinitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>[]
          }
          create: {
            args: Prisma.MetricDefinitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          createMany: {
            args: Prisma.MetricDefinitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricDefinitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>[]
          }
          delete: {
            args: Prisma.MetricDefinitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          update: {
            args: Prisma.MetricDefinitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          deleteMany: {
            args: Prisma.MetricDefinitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricDefinitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricDefinitionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>[]
          }
          upsert: {
            args: Prisma.MetricDefinitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricDefinitionPayload>
          }
          aggregate: {
            args: Prisma.MetricDefinitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricDefinition>
          }
          groupBy: {
            args: Prisma.MetricDefinitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricDefinitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricDefinitionCountArgs<ExtArgs>
            result: $Utils.Optional<MetricDefinitionCountAggregateOutputType> | number
          }
        }
      }
      DataSource: {
        payload: Prisma.$DataSourcePayload<ExtArgs>
        fields: Prisma.DataSourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataSourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataSourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          findFirst: {
            args: Prisma.DataSourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataSourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          findMany: {
            args: Prisma.DataSourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>[]
          }
          create: {
            args: Prisma.DataSourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          createMany: {
            args: Prisma.DataSourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataSourceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>[]
          }
          delete: {
            args: Prisma.DataSourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          update: {
            args: Prisma.DataSourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          deleteMany: {
            args: Prisma.DataSourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataSourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DataSourceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>[]
          }
          upsert: {
            args: Prisma.DataSourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataSourcePayload>
          }
          aggregate: {
            args: Prisma.DataSourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataSource>
          }
          groupBy: {
            args: Prisma.DataSourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataSourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataSourceCountArgs<ExtArgs>
            result: $Utils.Optional<DataSourceCountAggregateOutputType> | number
          }
        }
      }
      ColumnMapping: {
        payload: Prisma.$ColumnMappingPayload<ExtArgs>
        fields: Prisma.ColumnMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColumnMappingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColumnMappingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          findFirst: {
            args: Prisma.ColumnMappingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColumnMappingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          findMany: {
            args: Prisma.ColumnMappingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>[]
          }
          create: {
            args: Prisma.ColumnMappingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          createMany: {
            args: Prisma.ColumnMappingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ColumnMappingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>[]
          }
          delete: {
            args: Prisma.ColumnMappingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          update: {
            args: Prisma.ColumnMappingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          deleteMany: {
            args: Prisma.ColumnMappingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColumnMappingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ColumnMappingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>[]
          }
          upsert: {
            args: Prisma.ColumnMappingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingPayload>
          }
          aggregate: {
            args: Prisma.ColumnMappingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColumnMapping>
          }
          groupBy: {
            args: Prisma.ColumnMappingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColumnMappingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColumnMappingCountArgs<ExtArgs>
            result: $Utils.Optional<ColumnMappingCountAggregateOutputType> | number
          }
        }
      }
      MetricValue: {
        payload: Prisma.$MetricValuePayload<ExtArgs>
        fields: Prisma.MetricValueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricValueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricValueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          findFirst: {
            args: Prisma.MetricValueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricValueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          findMany: {
            args: Prisma.MetricValueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>[]
          }
          create: {
            args: Prisma.MetricValueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          createMany: {
            args: Prisma.MetricValueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricValueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>[]
          }
          delete: {
            args: Prisma.MetricValueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          update: {
            args: Prisma.MetricValueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          deleteMany: {
            args: Prisma.MetricValueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricValueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricValueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>[]
          }
          upsert: {
            args: Prisma.MetricValueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricValuePayload>
          }
          aggregate: {
            args: Prisma.MetricValueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricValue>
          }
          groupBy: {
            args: Prisma.MetricValueGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricValueGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricValueCountArgs<ExtArgs>
            result: $Utils.Optional<MetricValueCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Dashboard: {
        payload: Prisma.$DashboardPayload<ExtArgs>
        fields: Prisma.DashboardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DashboardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DashboardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          findFirst: {
            args: Prisma.DashboardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DashboardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          findMany: {
            args: Prisma.DashboardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          create: {
            args: Prisma.DashboardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          createMany: {
            args: Prisma.DashboardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DashboardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          delete: {
            args: Prisma.DashboardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          update: {
            args: Prisma.DashboardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          deleteMany: {
            args: Prisma.DashboardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DashboardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DashboardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>[]
          }
          upsert: {
            args: Prisma.DashboardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DashboardPayload>
          }
          aggregate: {
            args: Prisma.DashboardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDashboard>
          }
          groupBy: {
            args: Prisma.DashboardGroupByArgs<ExtArgs>
            result: $Utils.Optional<DashboardGroupByOutputType>[]
          }
          count: {
            args: Prisma.DashboardCountArgs<ExtArgs>
            result: $Utils.Optional<DashboardCountAggregateOutputType> | number
          }
        }
      }
      Widget: {
        payload: Prisma.$WidgetPayload<ExtArgs>
        fields: Prisma.WidgetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WidgetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WidgetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          findFirst: {
            args: Prisma.WidgetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WidgetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          findMany: {
            args: Prisma.WidgetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>[]
          }
          create: {
            args: Prisma.WidgetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          createMany: {
            args: Prisma.WidgetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WidgetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>[]
          }
          delete: {
            args: Prisma.WidgetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          update: {
            args: Prisma.WidgetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          deleteMany: {
            args: Prisma.WidgetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WidgetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WidgetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>[]
          }
          upsert: {
            args: Prisma.WidgetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WidgetPayload>
          }
          aggregate: {
            args: Prisma.WidgetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWidget>
          }
          groupBy: {
            args: Prisma.WidgetGroupByArgs<ExtArgs>
            result: $Utils.Optional<WidgetGroupByOutputType>[]
          }
          count: {
            args: Prisma.WidgetCountArgs<ExtArgs>
            result: $Utils.Optional<WidgetCountAggregateOutputType> | number
          }
        }
      }
      UserClinicRole: {
        payload: Prisma.$UserClinicRolePayload<ExtArgs>
        fields: Prisma.UserClinicRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserClinicRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserClinicRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          findFirst: {
            args: Prisma.UserClinicRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserClinicRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          findMany: {
            args: Prisma.UserClinicRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>[]
          }
          create: {
            args: Prisma.UserClinicRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          createMany: {
            args: Prisma.UserClinicRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserClinicRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>[]
          }
          delete: {
            args: Prisma.UserClinicRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          update: {
            args: Prisma.UserClinicRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          deleteMany: {
            args: Prisma.UserClinicRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserClinicRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserClinicRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>[]
          }
          upsert: {
            args: Prisma.UserClinicRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClinicRolePayload>
          }
          aggregate: {
            args: Prisma.UserClinicRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserClinicRole>
          }
          groupBy: {
            args: Prisma.UserClinicRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserClinicRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserClinicRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserClinicRoleCountAggregateOutputType> | number
          }
        }
      }
      GoalTemplate: {
        payload: Prisma.$GoalTemplatePayload<ExtArgs>
        fields: Prisma.GoalTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          findFirst: {
            args: Prisma.GoalTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          findMany: {
            args: Prisma.GoalTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>[]
          }
          create: {
            args: Prisma.GoalTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          createMany: {
            args: Prisma.GoalTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>[]
          }
          delete: {
            args: Prisma.GoalTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          update: {
            args: Prisma.GoalTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          deleteMany: {
            args: Prisma.GoalTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoalTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>[]
          }
          upsert: {
            args: Prisma.GoalTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalTemplatePayload>
          }
          aggregate: {
            args: Prisma.GoalTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoalTemplate>
          }
          groupBy: {
            args: Prisma.GoalTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<GoalTemplateCountAggregateOutputType> | number
          }
        }
      }
      FinancialMetric: {
        payload: Prisma.$FinancialMetricPayload<ExtArgs>
        fields: Prisma.FinancialMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          findFirst: {
            args: Prisma.FinancialMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          findMany: {
            args: Prisma.FinancialMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>[]
          }
          create: {
            args: Prisma.FinancialMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          createMany: {
            args: Prisma.FinancialMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>[]
          }
          delete: {
            args: Prisma.FinancialMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          update: {
            args: Prisma.FinancialMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          deleteMany: {
            args: Prisma.FinancialMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>[]
          }
          upsert: {
            args: Prisma.FinancialMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialMetricPayload>
          }
          aggregate: {
            args: Prisma.FinancialMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialMetric>
          }
          groupBy: {
            args: Prisma.FinancialMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialMetricCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialMetricCountAggregateOutputType> | number
          }
        }
      }
      AppointmentMetric: {
        payload: Prisma.$AppointmentMetricPayload<ExtArgs>
        fields: Prisma.AppointmentMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          findFirst: {
            args: Prisma.AppointmentMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          findMany: {
            args: Prisma.AppointmentMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>[]
          }
          create: {
            args: Prisma.AppointmentMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          createMany: {
            args: Prisma.AppointmentMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>[]
          }
          delete: {
            args: Prisma.AppointmentMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          update: {
            args: Prisma.AppointmentMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentMetricPayload>
          }
          aggregate: {
            args: Prisma.AppointmentMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointmentMetric>
          }
          groupBy: {
            args: Prisma.AppointmentMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentMetricCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentMetricCountAggregateOutputType> | number
          }
        }
      }
      CallMetric: {
        payload: Prisma.$CallMetricPayload<ExtArgs>
        fields: Prisma.CallMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CallMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CallMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          findFirst: {
            args: Prisma.CallMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CallMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          findMany: {
            args: Prisma.CallMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>[]
          }
          create: {
            args: Prisma.CallMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          createMany: {
            args: Prisma.CallMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CallMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>[]
          }
          delete: {
            args: Prisma.CallMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          update: {
            args: Prisma.CallMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          deleteMany: {
            args: Prisma.CallMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CallMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CallMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>[]
          }
          upsert: {
            args: Prisma.CallMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallMetricPayload>
          }
          aggregate: {
            args: Prisma.CallMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCallMetric>
          }
          groupBy: {
            args: Prisma.CallMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<CallMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.CallMetricCountArgs<ExtArgs>
            result: $Utils.Optional<CallMetricCountAggregateOutputType> | number
          }
        }
      }
      PatientMetric: {
        payload: Prisma.$PatientMetricPayload<ExtArgs>
        fields: Prisma.PatientMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientMetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientMetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          findFirst: {
            args: Prisma.PatientMetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientMetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          findMany: {
            args: Prisma.PatientMetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>[]
          }
          create: {
            args: Prisma.PatientMetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          createMany: {
            args: Prisma.PatientMetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientMetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>[]
          }
          delete: {
            args: Prisma.PatientMetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          update: {
            args: Prisma.PatientMetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          deleteMany: {
            args: Prisma.PatientMetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientMetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientMetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>[]
          }
          upsert: {
            args: Prisma.PatientMetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMetricPayload>
          }
          aggregate: {
            args: Prisma.PatientMetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientMetric>
          }
          groupBy: {
            args: Prisma.PatientMetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientMetricCountArgs<ExtArgs>
            result: $Utils.Optional<PatientMetricCountAggregateOutputType> | number
          }
        }
      }
      MetricAggregation: {
        payload: Prisma.$MetricAggregationPayload<ExtArgs>
        fields: Prisma.MetricAggregationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricAggregationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricAggregationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          findFirst: {
            args: Prisma.MetricAggregationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricAggregationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          findMany: {
            args: Prisma.MetricAggregationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>[]
          }
          create: {
            args: Prisma.MetricAggregationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          createMany: {
            args: Prisma.MetricAggregationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricAggregationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>[]
          }
          delete: {
            args: Prisma.MetricAggregationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          update: {
            args: Prisma.MetricAggregationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          deleteMany: {
            args: Prisma.MetricAggregationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricAggregationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricAggregationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>[]
          }
          upsert: {
            args: Prisma.MetricAggregationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricAggregationPayload>
          }
          aggregate: {
            args: Prisma.MetricAggregationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricAggregation>
          }
          groupBy: {
            args: Prisma.MetricAggregationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricAggregationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricAggregationCountArgs<ExtArgs>
            result: $Utils.Optional<MetricAggregationCountAggregateOutputType> | number
          }
        }
      }
      GoogleCredential: {
        payload: Prisma.$GoogleCredentialPayload<ExtArgs>
        fields: Prisma.GoogleCredentialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoogleCredentialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoogleCredentialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          findFirst: {
            args: Prisma.GoogleCredentialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoogleCredentialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          findMany: {
            args: Prisma.GoogleCredentialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>[]
          }
          create: {
            args: Prisma.GoogleCredentialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          createMany: {
            args: Prisma.GoogleCredentialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoogleCredentialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>[]
          }
          delete: {
            args: Prisma.GoogleCredentialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          update: {
            args: Prisma.GoogleCredentialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          deleteMany: {
            args: Prisma.GoogleCredentialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoogleCredentialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoogleCredentialUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>[]
          }
          upsert: {
            args: Prisma.GoogleCredentialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoogleCredentialPayload>
          }
          aggregate: {
            args: Prisma.GoogleCredentialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoogleCredential>
          }
          groupBy: {
            args: Prisma.GoogleCredentialGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoogleCredentialGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoogleCredentialCountArgs<ExtArgs>
            result: $Utils.Optional<GoogleCredentialCountAggregateOutputType> | number
          }
        }
      }
      SpreadsheetConnection: {
        payload: Prisma.$SpreadsheetConnectionPayload<ExtArgs>
        fields: Prisma.SpreadsheetConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpreadsheetConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpreadsheetConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          findFirst: {
            args: Prisma.SpreadsheetConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpreadsheetConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          findMany: {
            args: Prisma.SpreadsheetConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>[]
          }
          create: {
            args: Prisma.SpreadsheetConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          createMany: {
            args: Prisma.SpreadsheetConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpreadsheetConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>[]
          }
          delete: {
            args: Prisma.SpreadsheetConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          update: {
            args: Prisma.SpreadsheetConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          deleteMany: {
            args: Prisma.SpreadsheetConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpreadsheetConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpreadsheetConnectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>[]
          }
          upsert: {
            args: Prisma.SpreadsheetConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpreadsheetConnectionPayload>
          }
          aggregate: {
            args: Prisma.SpreadsheetConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpreadsheetConnection>
          }
          groupBy: {
            args: Prisma.SpreadsheetConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpreadsheetConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpreadsheetConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<SpreadsheetConnectionCountAggregateOutputType> | number
          }
        }
      }
      ColumnMappingV2: {
        payload: Prisma.$ColumnMappingV2Payload<ExtArgs>
        fields: Prisma.ColumnMappingV2FieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColumnMappingV2FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColumnMappingV2FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          findFirst: {
            args: Prisma.ColumnMappingV2FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColumnMappingV2FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          findMany: {
            args: Prisma.ColumnMappingV2FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>[]
          }
          create: {
            args: Prisma.ColumnMappingV2CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          createMany: {
            args: Prisma.ColumnMappingV2CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ColumnMappingV2CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>[]
          }
          delete: {
            args: Prisma.ColumnMappingV2DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          update: {
            args: Prisma.ColumnMappingV2UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          deleteMany: {
            args: Prisma.ColumnMappingV2DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColumnMappingV2UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ColumnMappingV2UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>[]
          }
          upsert: {
            args: Prisma.ColumnMappingV2UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColumnMappingV2Payload>
          }
          aggregate: {
            args: Prisma.ColumnMappingV2AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColumnMappingV2>
          }
          groupBy: {
            args: Prisma.ColumnMappingV2GroupByArgs<ExtArgs>
            result: $Utils.Optional<ColumnMappingV2GroupByOutputType>[]
          }
          count: {
            args: Prisma.ColumnMappingV2CountArgs<ExtArgs>
            result: $Utils.Optional<ColumnMappingV2CountAggregateOutputType> | number
          }
        }
      }
      HygieneProduction: {
        payload: Prisma.$HygieneProductionPayload<ExtArgs>
        fields: Prisma.HygieneProductionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HygieneProductionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HygieneProductionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          findFirst: {
            args: Prisma.HygieneProductionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HygieneProductionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          findMany: {
            args: Prisma.HygieneProductionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>[]
          }
          create: {
            args: Prisma.HygieneProductionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          createMany: {
            args: Prisma.HygieneProductionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HygieneProductionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>[]
          }
          delete: {
            args: Prisma.HygieneProductionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          update: {
            args: Prisma.HygieneProductionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          deleteMany: {
            args: Prisma.HygieneProductionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HygieneProductionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HygieneProductionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>[]
          }
          upsert: {
            args: Prisma.HygieneProductionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HygieneProductionPayload>
          }
          aggregate: {
            args: Prisma.HygieneProductionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHygieneProduction>
          }
          groupBy: {
            args: Prisma.HygieneProductionGroupByArgs<ExtArgs>
            result: $Utils.Optional<HygieneProductionGroupByOutputType>[]
          }
          count: {
            args: Prisma.HygieneProductionCountArgs<ExtArgs>
            result: $Utils.Optional<HygieneProductionCountAggregateOutputType> | number
          }
        }
      }
      DentistProduction: {
        payload: Prisma.$DentistProductionPayload<ExtArgs>
        fields: Prisma.DentistProductionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DentistProductionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DentistProductionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          findFirst: {
            args: Prisma.DentistProductionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DentistProductionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          findMany: {
            args: Prisma.DentistProductionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>[]
          }
          create: {
            args: Prisma.DentistProductionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          createMany: {
            args: Prisma.DentistProductionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DentistProductionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>[]
          }
          delete: {
            args: Prisma.DentistProductionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          update: {
            args: Prisma.DentistProductionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          deleteMany: {
            args: Prisma.DentistProductionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DentistProductionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DentistProductionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>[]
          }
          upsert: {
            args: Prisma.DentistProductionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DentistProductionPayload>
          }
          aggregate: {
            args: Prisma.DentistProductionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDentistProduction>
          }
          groupBy: {
            args: Prisma.DentistProductionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DentistProductionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DentistProductionCountArgs<ExtArgs>
            result: $Utils.Optional<DentistProductionCountAggregateOutputType> | number
          }
        }
      }
      IdMapping: {
        payload: Prisma.$IdMappingPayload<ExtArgs>
        fields: Prisma.IdMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IdMappingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IdMappingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          findFirst: {
            args: Prisma.IdMappingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IdMappingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          findMany: {
            args: Prisma.IdMappingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>[]
          }
          create: {
            args: Prisma.IdMappingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          createMany: {
            args: Prisma.IdMappingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IdMappingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>[]
          }
          delete: {
            args: Prisma.IdMappingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          update: {
            args: Prisma.IdMappingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          deleteMany: {
            args: Prisma.IdMappingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IdMappingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IdMappingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>[]
          }
          upsert: {
            args: Prisma.IdMappingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdMappingPayload>
          }
          aggregate: {
            args: Prisma.IdMappingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIdMapping>
          }
          groupBy: {
            args: Prisma.IdMappingGroupByArgs<ExtArgs>
            result: $Utils.Optional<IdMappingGroupByOutputType>[]
          }
          count: {
            args: Prisma.IdMappingCountArgs<ExtArgs>
            result: $Utils.Optional<IdMappingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    clinic?: ClinicOmit
    user?: UserOmit
    provider?: ProviderOmit
    location?: LocationOmit
    providerLocation?: ProviderLocationOmit
    locationFinancial?: LocationFinancialOmit
    metricDefinition?: MetricDefinitionOmit
    dataSource?: DataSourceOmit
    columnMapping?: ColumnMappingOmit
    metricValue?: MetricValueOmit
    goal?: GoalOmit
    dashboard?: DashboardOmit
    widget?: WidgetOmit
    userClinicRole?: UserClinicRoleOmit
    goalTemplate?: GoalTemplateOmit
    financialMetric?: FinancialMetricOmit
    appointmentMetric?: AppointmentMetricOmit
    callMetric?: CallMetricOmit
    patientMetric?: PatientMetricOmit
    metricAggregation?: MetricAggregationOmit
    googleCredential?: GoogleCredentialOmit
    spreadsheetConnection?: SpreadsheetConnectionOmit
    columnMappingV2?: ColumnMappingV2Omit
    hygieneProduction?: HygieneProductionOmit
    dentistProduction?: DentistProductionOmit
    idMapping?: IdMappingOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClinicCountOutputType
   */

  export type ClinicCountOutputType = {
    users: number
    providers: number
    metrics: number
    goals: number
    dataSources: number
    hygieneProduction: number
    dentistProduction: number
    locations: number
    locationFinancials: number
  }

  export type ClinicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ClinicCountOutputTypeCountUsersArgs
    providers?: boolean | ClinicCountOutputTypeCountProvidersArgs
    metrics?: boolean | ClinicCountOutputTypeCountMetricsArgs
    goals?: boolean | ClinicCountOutputTypeCountGoalsArgs
    dataSources?: boolean | ClinicCountOutputTypeCountDataSourcesArgs
    hygieneProduction?: boolean | ClinicCountOutputTypeCountHygieneProductionArgs
    dentistProduction?: boolean | ClinicCountOutputTypeCountDentistProductionArgs
    locations?: boolean | ClinicCountOutputTypeCountLocationsArgs
    locationFinancials?: boolean | ClinicCountOutputTypeCountLocationFinancialsArgs
  }

  // Custom InputTypes
  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicCountOutputType
     */
    select?: ClinicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricValueWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountDataSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSourceWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountHygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HygieneProductionWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountDentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DentistProductionWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }

  /**
   * ClinicCountOutputType without action
   */
  export type ClinicCountOutputTypeCountLocationFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationFinancialWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    dashboards: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dashboards?: boolean | UserCountOutputTypeCountDashboardsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDashboardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DashboardWhereInput
  }


  /**
   * Count Type ProviderCountOutputType
   */

  export type ProviderCountOutputType = {
    metrics: number
    goals: number
    dataSources: number
    hygieneProduction: number
    dentistProduction: number
    providerLocations: number
  }

  export type ProviderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metrics?: boolean | ProviderCountOutputTypeCountMetricsArgs
    goals?: boolean | ProviderCountOutputTypeCountGoalsArgs
    dataSources?: boolean | ProviderCountOutputTypeCountDataSourcesArgs
    hygieneProduction?: boolean | ProviderCountOutputTypeCountHygieneProductionArgs
    dentistProduction?: boolean | ProviderCountOutputTypeCountDentistProductionArgs
    providerLocations?: boolean | ProviderCountOutputTypeCountProviderLocationsArgs
  }

  // Custom InputTypes
  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderCountOutputType
     */
    select?: ProviderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricValueWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountDataSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSourceWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountHygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HygieneProductionWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountDentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DentistProductionWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountProviderLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderLocationWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    financials: number
    providers: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    financials?: boolean | LocationCountOutputTypeCountFinancialsArgs
    providers?: boolean | LocationCountOutputTypeCountProvidersArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationFinancialWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountProvidersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderLocationWhereInput
  }


  /**
   * Count Type MetricDefinitionCountOutputType
   */

  export type MetricDefinitionCountOutputType = {
    metrics: number
    columnMappings: number
    goals: number
    widgets: number
  }

  export type MetricDefinitionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metrics?: boolean | MetricDefinitionCountOutputTypeCountMetricsArgs
    columnMappings?: boolean | MetricDefinitionCountOutputTypeCountColumnMappingsArgs
    goals?: boolean | MetricDefinitionCountOutputTypeCountGoalsArgs
    widgets?: boolean | MetricDefinitionCountOutputTypeCountWidgetsArgs
  }

  // Custom InputTypes
  /**
   * MetricDefinitionCountOutputType without action
   */
  export type MetricDefinitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinitionCountOutputType
     */
    select?: MetricDefinitionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MetricDefinitionCountOutputType without action
   */
  export type MetricDefinitionCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricValueWhereInput
  }

  /**
   * MetricDefinitionCountOutputType without action
   */
  export type MetricDefinitionCountOutputTypeCountColumnMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnMappingWhereInput
  }

  /**
   * MetricDefinitionCountOutputType without action
   */
  export type MetricDefinitionCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * MetricDefinitionCountOutputType without action
   */
  export type MetricDefinitionCountOutputTypeCountWidgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WidgetWhereInput
  }


  /**
   * Count Type DataSourceCountOutputType
   */

  export type DataSourceCountOutputType = {
    columnMappings: number
    metrics: number
    hygieneProduction: number
    dentistProduction: number
    locationFinancials: number
  }

  export type DataSourceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columnMappings?: boolean | DataSourceCountOutputTypeCountColumnMappingsArgs
    metrics?: boolean | DataSourceCountOutputTypeCountMetricsArgs
    hygieneProduction?: boolean | DataSourceCountOutputTypeCountHygieneProductionArgs
    dentistProduction?: boolean | DataSourceCountOutputTypeCountDentistProductionArgs
    locationFinancials?: boolean | DataSourceCountOutputTypeCountLocationFinancialsArgs
  }

  // Custom InputTypes
  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSourceCountOutputType
     */
    select?: DataSourceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeCountColumnMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnMappingWhereInput
  }

  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricValueWhereInput
  }

  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeCountHygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HygieneProductionWhereInput
  }

  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeCountDentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DentistProductionWhereInput
  }

  /**
   * DataSourceCountOutputType without action
   */
  export type DataSourceCountOutputTypeCountLocationFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationFinancialWhereInput
  }


  /**
   * Count Type DashboardCountOutputType
   */

  export type DashboardCountOutputType = {
    widgets: number
  }

  export type DashboardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    widgets?: boolean | DashboardCountOutputTypeCountWidgetsArgs
  }

  // Custom InputTypes
  /**
   * DashboardCountOutputType without action
   */
  export type DashboardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DashboardCountOutputType
     */
    select?: DashboardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DashboardCountOutputType without action
   */
  export type DashboardCountOutputTypeCountWidgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WidgetWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Clinic
   */

  export type AggregateClinic = {
    _count: ClinicCountAggregateOutputType | null
    _min: ClinicMinAggregateOutputType | null
    _max: ClinicMaxAggregateOutputType | null
  }

  export type ClinicMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    status: string | null
    registrationCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    uuidId: string | null
  }

  export type ClinicMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    status: string | null
    registrationCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    uuidId: string | null
  }

  export type ClinicCountAggregateOutputType = {
    id: number
    name: number
    location: number
    status: number
    registrationCode: number
    createdAt: number
    updatedAt: number
    uuidId: number
    _all: number
  }


  export type ClinicMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    status?: true
    registrationCode?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
  }

  export type ClinicMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    status?: true
    registrationCode?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
  }

  export type ClinicCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    status?: true
    registrationCode?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
    _all?: true
  }

  export type ClinicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinic to aggregate.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clinics
    **/
    _count?: true | ClinicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicMaxAggregateInputType
  }

  export type GetClinicAggregateType<T extends ClinicAggregateArgs> = {
        [P in keyof T & keyof AggregateClinic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinic[P]>
      : GetScalarType<T[P], AggregateClinic[P]>
  }




  export type ClinicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicWhereInput
    orderBy?: ClinicOrderByWithAggregationInput | ClinicOrderByWithAggregationInput[]
    by: ClinicScalarFieldEnum[] | ClinicScalarFieldEnum
    having?: ClinicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicCountAggregateInputType | true
    _min?: ClinicMinAggregateInputType
    _max?: ClinicMaxAggregateInputType
  }

  export type ClinicGroupByOutputType = {
    id: string
    name: string
    location: string
    status: string
    registrationCode: string | null
    createdAt: Date
    updatedAt: Date
    uuidId: string | null
    _count: ClinicCountAggregateOutputType | null
    _min: ClinicMinAggregateOutputType | null
    _max: ClinicMaxAggregateOutputType | null
  }

  type GetClinicGroupByPayload<T extends ClinicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicGroupByOutputType[P]>
        }
      >
    >


  export type ClinicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    registrationCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
    users?: boolean | Clinic$usersArgs<ExtArgs>
    providers?: boolean | Clinic$providersArgs<ExtArgs>
    metrics?: boolean | Clinic$metricsArgs<ExtArgs>
    goals?: boolean | Clinic$goalsArgs<ExtArgs>
    dataSources?: boolean | Clinic$dataSourcesArgs<ExtArgs>
    hygieneProduction?: boolean | Clinic$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | Clinic$dentistProductionArgs<ExtArgs>
    locations?: boolean | Clinic$locationsArgs<ExtArgs>
    locationFinancials?: boolean | Clinic$locationFinancialsArgs<ExtArgs>
    _count?: boolean | ClinicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    registrationCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    registrationCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
  }, ExtArgs["result"]["clinic"]>

  export type ClinicSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    status?: boolean
    registrationCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
  }

  export type ClinicOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "location" | "status" | "registrationCode" | "createdAt" | "updatedAt" | "uuidId", ExtArgs["result"]["clinic"]>
  export type ClinicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Clinic$usersArgs<ExtArgs>
    providers?: boolean | Clinic$providersArgs<ExtArgs>
    metrics?: boolean | Clinic$metricsArgs<ExtArgs>
    goals?: boolean | Clinic$goalsArgs<ExtArgs>
    dataSources?: boolean | Clinic$dataSourcesArgs<ExtArgs>
    hygieneProduction?: boolean | Clinic$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | Clinic$dentistProductionArgs<ExtArgs>
    locations?: boolean | Clinic$locationsArgs<ExtArgs>
    locationFinancials?: boolean | Clinic$locationFinancialsArgs<ExtArgs>
    _count?: boolean | ClinicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClinicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClinicIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClinicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clinic"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      providers: Prisma.$ProviderPayload<ExtArgs>[]
      metrics: Prisma.$MetricValuePayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      dataSources: Prisma.$DataSourcePayload<ExtArgs>[]
      hygieneProduction: Prisma.$HygieneProductionPayload<ExtArgs>[]
      dentistProduction: Prisma.$DentistProductionPayload<ExtArgs>[]
      locations: Prisma.$LocationPayload<ExtArgs>[]
      locationFinancials: Prisma.$LocationFinancialPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string
      status: string
      registrationCode: string | null
      createdAt: Date
      updatedAt: Date
      uuidId: string | null
    }, ExtArgs["result"]["clinic"]>
    composites: {}
  }

  type ClinicGetPayload<S extends boolean | null | undefined | ClinicDefaultArgs> = $Result.GetResult<Prisma.$ClinicPayload, S>

  type ClinicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClinicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClinicCountAggregateInputType | true
    }

  export interface ClinicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clinic'], meta: { name: 'Clinic' } }
    /**
     * Find zero or one Clinic that matches the filter.
     * @param {ClinicFindUniqueArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicFindUniqueArgs>(args: SelectSubset<T, ClinicFindUniqueArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clinic that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClinicFindUniqueOrThrowArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindFirstArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicFindFirstArgs>(args?: SelectSubset<T, ClinicFindFirstArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindFirstOrThrowArgs} args - Arguments to find a Clinic
     * @example
     * // Get one Clinic
     * const clinic = await prisma.clinic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clinics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clinics
     * const clinics = await prisma.clinic.findMany()
     * 
     * // Get first 10 Clinics
     * const clinics = await prisma.clinic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicWithIdOnly = await prisma.clinic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicFindManyArgs>(args?: SelectSubset<T, ClinicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clinic.
     * @param {ClinicCreateArgs} args - Arguments to create a Clinic.
     * @example
     * // Create one Clinic
     * const Clinic = await prisma.clinic.create({
     *   data: {
     *     // ... data to create a Clinic
     *   }
     * })
     * 
     */
    create<T extends ClinicCreateArgs>(args: SelectSubset<T, ClinicCreateArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clinics.
     * @param {ClinicCreateManyArgs} args - Arguments to create many Clinics.
     * @example
     * // Create many Clinics
     * const clinic = await prisma.clinic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicCreateManyArgs>(args?: SelectSubset<T, ClinicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clinics and returns the data saved in the database.
     * @param {ClinicCreateManyAndReturnArgs} args - Arguments to create many Clinics.
     * @example
     * // Create many Clinics
     * const clinic = await prisma.clinic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clinics and only return the `id`
     * const clinicWithIdOnly = await prisma.clinic.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Clinic.
     * @param {ClinicDeleteArgs} args - Arguments to delete one Clinic.
     * @example
     * // Delete one Clinic
     * const Clinic = await prisma.clinic.delete({
     *   where: {
     *     // ... filter to delete one Clinic
     *   }
     * })
     * 
     */
    delete<T extends ClinicDeleteArgs>(args: SelectSubset<T, ClinicDeleteArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clinic.
     * @param {ClinicUpdateArgs} args - Arguments to update one Clinic.
     * @example
     * // Update one Clinic
     * const clinic = await prisma.clinic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicUpdateArgs>(args: SelectSubset<T, ClinicUpdateArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clinics.
     * @param {ClinicDeleteManyArgs} args - Arguments to filter Clinics to delete.
     * @example
     * // Delete a few Clinics
     * const { count } = await prisma.clinic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicDeleteManyArgs>(args?: SelectSubset<T, ClinicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clinics
     * const clinic = await prisma.clinic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicUpdateManyArgs>(args: SelectSubset<T, ClinicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinics and returns the data updated in the database.
     * @param {ClinicUpdateManyAndReturnArgs} args - Arguments to update many Clinics.
     * @example
     * // Update many Clinics
     * const clinic = await prisma.clinic.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clinics and only return the `id`
     * const clinicWithIdOnly = await prisma.clinic.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClinicUpdateManyAndReturnArgs>(args: SelectSubset<T, ClinicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Clinic.
     * @param {ClinicUpsertArgs} args - Arguments to update or create a Clinic.
     * @example
     * // Update or create a Clinic
     * const clinic = await prisma.clinic.upsert({
     *   create: {
     *     // ... data to create a Clinic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clinic we want to update
     *   }
     * })
     */
    upsert<T extends ClinicUpsertArgs>(args: SelectSubset<T, ClinicUpsertArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clinics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicCountArgs} args - Arguments to filter Clinics to count.
     * @example
     * // Count the number of Clinics
     * const count = await prisma.clinic.count({
     *   where: {
     *     // ... the filter for the Clinics we want to count
     *   }
     * })
    **/
    count<T extends ClinicCountArgs>(
      args?: Subset<T, ClinicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clinic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicAggregateArgs>(args: Subset<T, ClinicAggregateArgs>): Prisma.PrismaPromise<GetClinicAggregateType<T>>

    /**
     * Group by Clinic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicGroupByArgs['orderBy'] }
        : { orderBy?: ClinicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clinic model
   */
  readonly fields: ClinicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clinic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Clinic$usersArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    providers<T extends Clinic$providersArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$providersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metrics<T extends Clinic$metricsArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goals<T extends Clinic$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dataSources<T extends Clinic$dataSourcesArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$dataSourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hygieneProduction<T extends Clinic$hygieneProductionArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$hygieneProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dentistProduction<T extends Clinic$dentistProductionArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$dentistProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locations<T extends Clinic$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locationFinancials<T extends Clinic$locationFinancialsArgs<ExtArgs> = {}>(args?: Subset<T, Clinic$locationFinancialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clinic model
   */
  interface ClinicFieldRefs {
    readonly id: FieldRef<"Clinic", 'String'>
    readonly name: FieldRef<"Clinic", 'String'>
    readonly location: FieldRef<"Clinic", 'String'>
    readonly status: FieldRef<"Clinic", 'String'>
    readonly registrationCode: FieldRef<"Clinic", 'String'>
    readonly createdAt: FieldRef<"Clinic", 'DateTime'>
    readonly updatedAt: FieldRef<"Clinic", 'DateTime'>
    readonly uuidId: FieldRef<"Clinic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Clinic findUnique
   */
  export type ClinicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic findUniqueOrThrow
   */
  export type ClinicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic findFirst
   */
  export type ClinicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinics.
     */
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic findFirstOrThrow
   */
  export type ClinicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinic to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinics.
     */
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic findMany
   */
  export type ClinicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter, which Clinics to fetch.
     */
    where?: ClinicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinics to fetch.
     */
    orderBy?: ClinicOrderByWithRelationInput | ClinicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clinics.
     */
    cursor?: ClinicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinics.
     */
    skip?: number
    distinct?: ClinicScalarFieldEnum | ClinicScalarFieldEnum[]
  }

  /**
   * Clinic create
   */
  export type ClinicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The data needed to create a Clinic.
     */
    data: XOR<ClinicCreateInput, ClinicUncheckedCreateInput>
  }

  /**
   * Clinic createMany
   */
  export type ClinicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clinics.
     */
    data: ClinicCreateManyInput | ClinicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinic createManyAndReturn
   */
  export type ClinicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * The data used to create many Clinics.
     */
    data: ClinicCreateManyInput | ClinicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinic update
   */
  export type ClinicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The data needed to update a Clinic.
     */
    data: XOR<ClinicUpdateInput, ClinicUncheckedUpdateInput>
    /**
     * Choose, which Clinic to update.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic updateMany
   */
  export type ClinicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clinics.
     */
    data: XOR<ClinicUpdateManyMutationInput, ClinicUncheckedUpdateManyInput>
    /**
     * Filter which Clinics to update
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to update.
     */
    limit?: number
  }

  /**
   * Clinic updateManyAndReturn
   */
  export type ClinicUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * The data used to update Clinics.
     */
    data: XOR<ClinicUpdateManyMutationInput, ClinicUncheckedUpdateManyInput>
    /**
     * Filter which Clinics to update
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to update.
     */
    limit?: number
  }

  /**
   * Clinic upsert
   */
  export type ClinicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * The filter to search for the Clinic to update in case it exists.
     */
    where: ClinicWhereUniqueInput
    /**
     * In case the Clinic found by the `where` argument doesn't exist, create a new Clinic with this data.
     */
    create: XOR<ClinicCreateInput, ClinicUncheckedCreateInput>
    /**
     * In case the Clinic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicUpdateInput, ClinicUncheckedUpdateInput>
  }

  /**
   * Clinic delete
   */
  export type ClinicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    /**
     * Filter which Clinic to delete.
     */
    where: ClinicWhereUniqueInput
  }

  /**
   * Clinic deleteMany
   */
  export type ClinicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinics to delete
     */
    where?: ClinicWhereInput
    /**
     * Limit how many Clinics to delete.
     */
    limit?: number
  }

  /**
   * Clinic.users
   */
  export type Clinic$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Clinic.providers
   */
  export type Clinic$providersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    cursor?: ProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Clinic.metrics
   */
  export type Clinic$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    where?: MetricValueWhereInput
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    cursor?: MetricValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * Clinic.goals
   */
  export type Clinic$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Clinic.dataSources
   */
  export type Clinic$dataSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    cursor?: DataSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataSourceScalarFieldEnum | DataSourceScalarFieldEnum[]
  }

  /**
   * Clinic.hygieneProduction
   */
  export type Clinic$hygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    where?: HygieneProductionWhereInput
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    cursor?: HygieneProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * Clinic.dentistProduction
   */
  export type Clinic$dentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    where?: DentistProductionWhereInput
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    cursor?: DentistProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * Clinic.locations
   */
  export type Clinic$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Clinic.locationFinancials
   */
  export type Clinic$locationFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    where?: LocationFinancialWhereInput
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    cursor?: LocationFinancialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * Clinic without action
   */
  export type ClinicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    authId: string | null
    uuidId: string | null
    clinicId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: string | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    authId: string | null
    uuidId: string | null
    clinicId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    authId: number
    uuidId: number
    clinicId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    authId?: true
    uuidId?: true
    clinicId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    authId?: true
    uuidId?: true
    clinicId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    authId?: true
    uuidId?: true
    clinicId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    role: string
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    authId: string | null
    uuidId: string | null
    clinicId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authId?: boolean
    uuidId?: boolean
    clinicId?: boolean
    clinic?: boolean | User$clinicArgs<ExtArgs>
    dashboards?: boolean | User$dashboardsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authId?: boolean
    uuidId?: boolean
    clinicId?: boolean
    clinic?: boolean | User$clinicArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authId?: boolean
    uuidId?: boolean
    clinicId?: boolean
    clinic?: boolean | User$clinicArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authId?: boolean
    uuidId?: boolean
    clinicId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "role" | "lastLogin" | "createdAt" | "updatedAt" | "authId" | "uuidId" | "clinicId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | User$clinicArgs<ExtArgs>
    dashboards?: boolean | User$dashboardsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | User$clinicArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | User$clinicArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs> | null
      dashboards: Prisma.$DashboardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      role: string
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
      authId: string | null
      uuidId: string | null
      clinicId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends User$clinicArgs<ExtArgs> = {}>(args?: Subset<T, User$clinicArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dashboards<T extends User$dashboardsArgs<ExtArgs> = {}>(args?: Subset<T, User$dashboardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly authId: FieldRef<"User", 'String'>
    readonly uuidId: FieldRef<"User", 'String'>
    readonly clinicId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.clinic
   */
  export type User$clinicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    where?: ClinicWhereInput
  }

  /**
   * User.dashboards
   */
  export type User$dashboardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    where?: DashboardWhereInput
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    cursor?: DashboardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Provider
   */

  export type AggregateProvider = {
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  export type ProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    providerType: string | null
    position: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
  }

  export type ProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    providerType: string | null
    position: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
  }

  export type ProviderCountAggregateOutputType = {
    id: number
    name: number
    firstName: number
    lastName: number
    email: number
    providerType: number
    position: number
    status: number
    createdAt: number
    updatedAt: number
    clinicId: number
    _all: number
  }


  export type ProviderMinAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    providerType?: true
    position?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
  }

  export type ProviderMaxAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    providerType?: true
    position?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
  }

  export type ProviderCountAggregateInputType = {
    id?: true
    name?: true
    firstName?: true
    lastName?: true
    email?: true
    providerType?: true
    position?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    _all?: true
  }

  export type ProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provider to aggregate.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Providers
    **/
    _count?: true | ProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderMaxAggregateInputType
  }

  export type GetProviderAggregateType<T extends ProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvider[P]>
      : GetScalarType<T[P], AggregateProvider[P]>
  }




  export type ProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderWhereInput
    orderBy?: ProviderOrderByWithAggregationInput | ProviderOrderByWithAggregationInput[]
    by: ProviderScalarFieldEnum[] | ProviderScalarFieldEnum
    having?: ProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderCountAggregateInputType | true
    _min?: ProviderMinAggregateInputType
    _max?: ProviderMaxAggregateInputType
  }

  export type ProviderGroupByOutputType = {
    id: string
    name: string
    firstName: string | null
    lastName: string | null
    email: string | null
    providerType: string
    position: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    clinicId: string
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  type GetProviderGroupByPayload<T extends ProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderGroupByOutputType[P]>
        }
      >
    >


  export type ProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    providerType?: boolean
    position?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    metrics?: boolean | Provider$metricsArgs<ExtArgs>
    goals?: boolean | Provider$goalsArgs<ExtArgs>
    dataSources?: boolean | Provider$dataSourcesArgs<ExtArgs>
    hygieneProduction?: boolean | Provider$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | Provider$dentistProductionArgs<ExtArgs>
    providerLocations?: boolean | Provider$providerLocationsArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    providerType?: boolean
    position?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    providerType?: boolean
    position?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectScalar = {
    id?: boolean
    name?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    providerType?: boolean
    position?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
  }

  export type ProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "firstName" | "lastName" | "email" | "providerType" | "position" | "status" | "createdAt" | "updatedAt" | "clinicId", ExtArgs["result"]["provider"]>
  export type ProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    metrics?: boolean | Provider$metricsArgs<ExtArgs>
    goals?: boolean | Provider$goalsArgs<ExtArgs>
    dataSources?: boolean | Provider$dataSourcesArgs<ExtArgs>
    hygieneProduction?: boolean | Provider$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | Provider$dentistProductionArgs<ExtArgs>
    providerLocations?: boolean | Provider$providerLocationsArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }
  export type ProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }

  export type $ProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Provider"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
      metrics: Prisma.$MetricValuePayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      dataSources: Prisma.$DataSourcePayload<ExtArgs>[]
      hygieneProduction: Prisma.$HygieneProductionPayload<ExtArgs>[]
      dentistProduction: Prisma.$DentistProductionPayload<ExtArgs>[]
      providerLocations: Prisma.$ProviderLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      firstName: string | null
      lastName: string | null
      email: string | null
      providerType: string
      position: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      clinicId: string
    }, ExtArgs["result"]["provider"]>
    composites: {}
  }

  type ProviderGetPayload<S extends boolean | null | undefined | ProviderDefaultArgs> = $Result.GetResult<Prisma.$ProviderPayload, S>

  type ProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProviderCountAggregateInputType | true
    }

  export interface ProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provider'], meta: { name: 'Provider' } }
    /**
     * Find zero or one Provider that matches the filter.
     * @param {ProviderFindUniqueArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProviderFindUniqueArgs>(args: SelectSubset<T, ProviderFindUniqueArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Provider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProviderFindUniqueOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, ProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProviderFindFirstArgs>(args?: SelectSubset<T, ProviderFindFirstArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, ProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Providers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Providers
     * const providers = await prisma.provider.findMany()
     * 
     * // Get first 10 Providers
     * const providers = await prisma.provider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerWithIdOnly = await prisma.provider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProviderFindManyArgs>(args?: SelectSubset<T, ProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Provider.
     * @param {ProviderCreateArgs} args - Arguments to create a Provider.
     * @example
     * // Create one Provider
     * const Provider = await prisma.provider.create({
     *   data: {
     *     // ... data to create a Provider
     *   }
     * })
     * 
     */
    create<T extends ProviderCreateArgs>(args: SelectSubset<T, ProviderCreateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Providers.
     * @param {ProviderCreateManyArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProviderCreateManyArgs>(args?: SelectSubset<T, ProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Providers and returns the data saved in the database.
     * @param {ProviderCreateManyAndReturnArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, ProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Provider.
     * @param {ProviderDeleteArgs} args - Arguments to delete one Provider.
     * @example
     * // Delete one Provider
     * const Provider = await prisma.provider.delete({
     *   where: {
     *     // ... filter to delete one Provider
     *   }
     * })
     * 
     */
    delete<T extends ProviderDeleteArgs>(args: SelectSubset<T, ProviderDeleteArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Provider.
     * @param {ProviderUpdateArgs} args - Arguments to update one Provider.
     * @example
     * // Update one Provider
     * const provider = await prisma.provider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProviderUpdateArgs>(args: SelectSubset<T, ProviderUpdateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Providers.
     * @param {ProviderDeleteManyArgs} args - Arguments to filter Providers to delete.
     * @example
     * // Delete a few Providers
     * const { count } = await prisma.provider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProviderDeleteManyArgs>(args?: SelectSubset<T, ProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProviderUpdateManyArgs>(args: SelectSubset<T, ProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers and returns the data updated in the database.
     * @param {ProviderUpdateManyAndReturnArgs} args - Arguments to update many Providers.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, ProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Provider.
     * @param {ProviderUpsertArgs} args - Arguments to update or create a Provider.
     * @example
     * // Update or create a Provider
     * const provider = await prisma.provider.upsert({
     *   create: {
     *     // ... data to create a Provider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provider we want to update
     *   }
     * })
     */
    upsert<T extends ProviderUpsertArgs>(args: SelectSubset<T, ProviderUpsertArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderCountArgs} args - Arguments to filter Providers to count.
     * @example
     * // Count the number of Providers
     * const count = await prisma.provider.count({
     *   where: {
     *     // ... the filter for the Providers we want to count
     *   }
     * })
    **/
    count<T extends ProviderCountArgs>(
      args?: Subset<T, ProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderAggregateArgs>(args: Subset<T, ProviderAggregateArgs>): Prisma.PrismaPromise<GetProviderAggregateType<T>>

    /**
     * Group by Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderGroupByArgs['orderBy'] }
        : { orderBy?: ProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Provider model
   */
  readonly fields: ProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Provider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metrics<T extends Provider$metricsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goals<T extends Provider$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dataSources<T extends Provider$dataSourcesArgs<ExtArgs> = {}>(args?: Subset<T, Provider$dataSourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hygieneProduction<T extends Provider$hygieneProductionArgs<ExtArgs> = {}>(args?: Subset<T, Provider$hygieneProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dentistProduction<T extends Provider$dentistProductionArgs<ExtArgs> = {}>(args?: Subset<T, Provider$dentistProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    providerLocations<T extends Provider$providerLocationsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$providerLocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Provider model
   */
  interface ProviderFieldRefs {
    readonly id: FieldRef<"Provider", 'String'>
    readonly name: FieldRef<"Provider", 'String'>
    readonly firstName: FieldRef<"Provider", 'String'>
    readonly lastName: FieldRef<"Provider", 'String'>
    readonly email: FieldRef<"Provider", 'String'>
    readonly providerType: FieldRef<"Provider", 'String'>
    readonly position: FieldRef<"Provider", 'String'>
    readonly status: FieldRef<"Provider", 'String'>
    readonly createdAt: FieldRef<"Provider", 'DateTime'>
    readonly updatedAt: FieldRef<"Provider", 'DateTime'>
    readonly clinicId: FieldRef<"Provider", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Provider findUnique
   */
  export type ProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findUniqueOrThrow
   */
  export type ProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findFirst
   */
  export type ProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findFirstOrThrow
   */
  export type ProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findMany
   */
  export type ProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Providers to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider create
   */
  export type ProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a Provider.
     */
    data: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
  }

  /**
   * Provider createMany
   */
  export type ProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provider createManyAndReturn
   */
  export type ProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Provider update
   */
  export type ProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a Provider.
     */
    data: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
    /**
     * Choose, which Provider to update.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider updateMany
   */
  export type ProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
  }

  /**
   * Provider updateManyAndReturn
   */
  export type ProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Provider upsert
   */
  export type ProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the Provider to update in case it exists.
     */
    where: ProviderWhereUniqueInput
    /**
     * In case the Provider found by the `where` argument doesn't exist, create a new Provider with this data.
     */
    create: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
    /**
     * In case the Provider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
  }

  /**
   * Provider delete
   */
  export type ProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter which Provider to delete.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider deleteMany
   */
  export type ProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Providers to delete
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to delete.
     */
    limit?: number
  }

  /**
   * Provider.metrics
   */
  export type Provider$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    where?: MetricValueWhereInput
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    cursor?: MetricValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * Provider.goals
   */
  export type Provider$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Provider.dataSources
   */
  export type Provider$dataSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    cursor?: DataSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataSourceScalarFieldEnum | DataSourceScalarFieldEnum[]
  }

  /**
   * Provider.hygieneProduction
   */
  export type Provider$hygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    where?: HygieneProductionWhereInput
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    cursor?: HygieneProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * Provider.dentistProduction
   */
  export type Provider$dentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    where?: DentistProductionWhereInput
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    cursor?: DentistProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * Provider.providerLocations
   */
  export type Provider$providerLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    where?: ProviderLocationWhereInput
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    cursor?: ProviderLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProviderLocationScalarFieldEnum | ProviderLocationScalarFieldEnum[]
  }

  /**
   * Provider without action
   */
  export type ProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    name: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    name: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    clinicId: number
    name: number
    address: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    clinicId?: true
    name?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    clinicId?: true
    name?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    clinicId?: true
    name?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    clinicId: string
    name: string
    address: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    name?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    financials?: boolean | Location$financialsArgs<ExtArgs>
    providers?: boolean | Location$providersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    name?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    name?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    clinicId?: boolean
    name?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "name" | "address" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    financials?: boolean | Location$financialsArgs<ExtArgs>
    providers?: boolean | Location$providersArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
      financials: Prisma.$LocationFinancialPayload<ExtArgs>[]
      providers: Prisma.$ProviderLocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      name: string
      address: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    financials<T extends Location$financialsArgs<ExtArgs> = {}>(args?: Subset<T, Location$financialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    providers<T extends Location$providersArgs<ExtArgs> = {}>(args?: Subset<T, Location$providersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly clinicId: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly isActive: FieldRef<"Location", 'Boolean'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.financials
   */
  export type Location$financialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    where?: LocationFinancialWhereInput
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    cursor?: LocationFinancialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * Location.providers
   */
  export type Location$providersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    where?: ProviderLocationWhereInput
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    cursor?: ProviderLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProviderLocationScalarFieldEnum | ProviderLocationScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model ProviderLocation
   */

  export type AggregateProviderLocation = {
    _count: ProviderLocationCountAggregateOutputType | null
    _min: ProviderLocationMinAggregateOutputType | null
    _max: ProviderLocationMaxAggregateOutputType | null
  }

  export type ProviderLocationMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    locationId: string | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    isPrimary: boolean | null
  }

  export type ProviderLocationMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    locationId: string | null
    isActive: boolean | null
    startDate: Date | null
    endDate: Date | null
    isPrimary: boolean | null
  }

  export type ProviderLocationCountAggregateOutputType = {
    id: number
    providerId: number
    locationId: number
    isActive: number
    startDate: number
    endDate: number
    isPrimary: number
    _all: number
  }


  export type ProviderLocationMinAggregateInputType = {
    id?: true
    providerId?: true
    locationId?: true
    isActive?: true
    startDate?: true
    endDate?: true
    isPrimary?: true
  }

  export type ProviderLocationMaxAggregateInputType = {
    id?: true
    providerId?: true
    locationId?: true
    isActive?: true
    startDate?: true
    endDate?: true
    isPrimary?: true
  }

  export type ProviderLocationCountAggregateInputType = {
    id?: true
    providerId?: true
    locationId?: true
    isActive?: true
    startDate?: true
    endDate?: true
    isPrimary?: true
    _all?: true
  }

  export type ProviderLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderLocation to aggregate.
     */
    where?: ProviderLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderLocations to fetch.
     */
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProviderLocations
    **/
    _count?: true | ProviderLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderLocationMaxAggregateInputType
  }

  export type GetProviderLocationAggregateType<T extends ProviderLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateProviderLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProviderLocation[P]>
      : GetScalarType<T[P], AggregateProviderLocation[P]>
  }




  export type ProviderLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderLocationWhereInput
    orderBy?: ProviderLocationOrderByWithAggregationInput | ProviderLocationOrderByWithAggregationInput[]
    by: ProviderLocationScalarFieldEnum[] | ProviderLocationScalarFieldEnum
    having?: ProviderLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderLocationCountAggregateInputType | true
    _min?: ProviderLocationMinAggregateInputType
    _max?: ProviderLocationMaxAggregateInputType
  }

  export type ProviderLocationGroupByOutputType = {
    id: string
    providerId: string
    locationId: string
    isActive: boolean
    startDate: Date
    endDate: Date | null
    isPrimary: boolean
    _count: ProviderLocationCountAggregateOutputType | null
    _min: ProviderLocationMinAggregateOutputType | null
    _max: ProviderLocationMaxAggregateOutputType | null
  }

  type GetProviderLocationGroupByPayload<T extends ProviderLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderLocationGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderLocationGroupByOutputType[P]>
        }
      >
    >


  export type ProviderLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    locationId?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    isPrimary?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerLocation"]>

  export type ProviderLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    locationId?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    isPrimary?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerLocation"]>

  export type ProviderLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    locationId?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    isPrimary?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerLocation"]>

  export type ProviderLocationSelectScalar = {
    id?: boolean
    providerId?: boolean
    locationId?: boolean
    isActive?: boolean
    startDate?: boolean
    endDate?: boolean
    isPrimary?: boolean
  }

  export type ProviderLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "locationId" | "isActive" | "startDate" | "endDate" | "isPrimary", ExtArgs["result"]["providerLocation"]>
  export type ProviderLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type ProviderLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type ProviderLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $ProviderLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProviderLocation"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      locationId: string
      isActive: boolean
      startDate: Date
      endDate: Date | null
      isPrimary: boolean
    }, ExtArgs["result"]["providerLocation"]>
    composites: {}
  }

  type ProviderLocationGetPayload<S extends boolean | null | undefined | ProviderLocationDefaultArgs> = $Result.GetResult<Prisma.$ProviderLocationPayload, S>

  type ProviderLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProviderLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProviderLocationCountAggregateInputType | true
    }

  export interface ProviderLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProviderLocation'], meta: { name: 'ProviderLocation' } }
    /**
     * Find zero or one ProviderLocation that matches the filter.
     * @param {ProviderLocationFindUniqueArgs} args - Arguments to find a ProviderLocation
     * @example
     * // Get one ProviderLocation
     * const providerLocation = await prisma.providerLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProviderLocationFindUniqueArgs>(args: SelectSubset<T, ProviderLocationFindUniqueArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProviderLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProviderLocationFindUniqueOrThrowArgs} args - Arguments to find a ProviderLocation
     * @example
     * // Get one ProviderLocation
     * const providerLocation = await prisma.providerLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProviderLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProviderLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProviderLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationFindFirstArgs} args - Arguments to find a ProviderLocation
     * @example
     * // Get one ProviderLocation
     * const providerLocation = await prisma.providerLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProviderLocationFindFirstArgs>(args?: SelectSubset<T, ProviderLocationFindFirstArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProviderLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationFindFirstOrThrowArgs} args - Arguments to find a ProviderLocation
     * @example
     * // Get one ProviderLocation
     * const providerLocation = await prisma.providerLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProviderLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProviderLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProviderLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProviderLocations
     * const providerLocations = await prisma.providerLocation.findMany()
     * 
     * // Get first 10 ProviderLocations
     * const providerLocations = await prisma.providerLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerLocationWithIdOnly = await prisma.providerLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProviderLocationFindManyArgs>(args?: SelectSubset<T, ProviderLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProviderLocation.
     * @param {ProviderLocationCreateArgs} args - Arguments to create a ProviderLocation.
     * @example
     * // Create one ProviderLocation
     * const ProviderLocation = await prisma.providerLocation.create({
     *   data: {
     *     // ... data to create a ProviderLocation
     *   }
     * })
     * 
     */
    create<T extends ProviderLocationCreateArgs>(args: SelectSubset<T, ProviderLocationCreateArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProviderLocations.
     * @param {ProviderLocationCreateManyArgs} args - Arguments to create many ProviderLocations.
     * @example
     * // Create many ProviderLocations
     * const providerLocation = await prisma.providerLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProviderLocationCreateManyArgs>(args?: SelectSubset<T, ProviderLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProviderLocations and returns the data saved in the database.
     * @param {ProviderLocationCreateManyAndReturnArgs} args - Arguments to create many ProviderLocations.
     * @example
     * // Create many ProviderLocations
     * const providerLocation = await prisma.providerLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProviderLocations and only return the `id`
     * const providerLocationWithIdOnly = await prisma.providerLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProviderLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProviderLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProviderLocation.
     * @param {ProviderLocationDeleteArgs} args - Arguments to delete one ProviderLocation.
     * @example
     * // Delete one ProviderLocation
     * const ProviderLocation = await prisma.providerLocation.delete({
     *   where: {
     *     // ... filter to delete one ProviderLocation
     *   }
     * })
     * 
     */
    delete<T extends ProviderLocationDeleteArgs>(args: SelectSubset<T, ProviderLocationDeleteArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProviderLocation.
     * @param {ProviderLocationUpdateArgs} args - Arguments to update one ProviderLocation.
     * @example
     * // Update one ProviderLocation
     * const providerLocation = await prisma.providerLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProviderLocationUpdateArgs>(args: SelectSubset<T, ProviderLocationUpdateArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProviderLocations.
     * @param {ProviderLocationDeleteManyArgs} args - Arguments to filter ProviderLocations to delete.
     * @example
     * // Delete a few ProviderLocations
     * const { count } = await prisma.providerLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProviderLocationDeleteManyArgs>(args?: SelectSubset<T, ProviderLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProviderLocations
     * const providerLocation = await prisma.providerLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProviderLocationUpdateManyArgs>(args: SelectSubset<T, ProviderLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderLocations and returns the data updated in the database.
     * @param {ProviderLocationUpdateManyAndReturnArgs} args - Arguments to update many ProviderLocations.
     * @example
     * // Update many ProviderLocations
     * const providerLocation = await prisma.providerLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProviderLocations and only return the `id`
     * const providerLocationWithIdOnly = await prisma.providerLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProviderLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, ProviderLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProviderLocation.
     * @param {ProviderLocationUpsertArgs} args - Arguments to update or create a ProviderLocation.
     * @example
     * // Update or create a ProviderLocation
     * const providerLocation = await prisma.providerLocation.upsert({
     *   create: {
     *     // ... data to create a ProviderLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProviderLocation we want to update
     *   }
     * })
     */
    upsert<T extends ProviderLocationUpsertArgs>(args: SelectSubset<T, ProviderLocationUpsertArgs<ExtArgs>>): Prisma__ProviderLocationClient<$Result.GetResult<Prisma.$ProviderLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProviderLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationCountArgs} args - Arguments to filter ProviderLocations to count.
     * @example
     * // Count the number of ProviderLocations
     * const count = await prisma.providerLocation.count({
     *   where: {
     *     // ... the filter for the ProviderLocations we want to count
     *   }
     * })
    **/
    count<T extends ProviderLocationCountArgs>(
      args?: Subset<T, ProviderLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProviderLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderLocationAggregateArgs>(args: Subset<T, ProviderLocationAggregateArgs>): Prisma.PrismaPromise<GetProviderLocationAggregateType<T>>

    /**
     * Group by ProviderLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderLocationGroupByArgs['orderBy'] }
        : { orderBy?: ProviderLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProviderLocation model
   */
  readonly fields: ProviderLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProviderLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProviderLocation model
   */
  interface ProviderLocationFieldRefs {
    readonly id: FieldRef<"ProviderLocation", 'String'>
    readonly providerId: FieldRef<"ProviderLocation", 'String'>
    readonly locationId: FieldRef<"ProviderLocation", 'String'>
    readonly isActive: FieldRef<"ProviderLocation", 'Boolean'>
    readonly startDate: FieldRef<"ProviderLocation", 'DateTime'>
    readonly endDate: FieldRef<"ProviderLocation", 'DateTime'>
    readonly isPrimary: FieldRef<"ProviderLocation", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ProviderLocation findUnique
   */
  export type ProviderLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter, which ProviderLocation to fetch.
     */
    where: ProviderLocationWhereUniqueInput
  }

  /**
   * ProviderLocation findUniqueOrThrow
   */
  export type ProviderLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter, which ProviderLocation to fetch.
     */
    where: ProviderLocationWhereUniqueInput
  }

  /**
   * ProviderLocation findFirst
   */
  export type ProviderLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter, which ProviderLocation to fetch.
     */
    where?: ProviderLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderLocations to fetch.
     */
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderLocations.
     */
    cursor?: ProviderLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderLocations.
     */
    distinct?: ProviderLocationScalarFieldEnum | ProviderLocationScalarFieldEnum[]
  }

  /**
   * ProviderLocation findFirstOrThrow
   */
  export type ProviderLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter, which ProviderLocation to fetch.
     */
    where?: ProviderLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderLocations to fetch.
     */
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderLocations.
     */
    cursor?: ProviderLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderLocations.
     */
    distinct?: ProviderLocationScalarFieldEnum | ProviderLocationScalarFieldEnum[]
  }

  /**
   * ProviderLocation findMany
   */
  export type ProviderLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter, which ProviderLocations to fetch.
     */
    where?: ProviderLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderLocations to fetch.
     */
    orderBy?: ProviderLocationOrderByWithRelationInput | ProviderLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProviderLocations.
     */
    cursor?: ProviderLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderLocations.
     */
    skip?: number
    distinct?: ProviderLocationScalarFieldEnum | ProviderLocationScalarFieldEnum[]
  }

  /**
   * ProviderLocation create
   */
  export type ProviderLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProviderLocation.
     */
    data: XOR<ProviderLocationCreateInput, ProviderLocationUncheckedCreateInput>
  }

  /**
   * ProviderLocation createMany
   */
  export type ProviderLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProviderLocations.
     */
    data: ProviderLocationCreateManyInput | ProviderLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProviderLocation createManyAndReturn
   */
  export type ProviderLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * The data used to create many ProviderLocations.
     */
    data: ProviderLocationCreateManyInput | ProviderLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProviderLocation update
   */
  export type ProviderLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProviderLocation.
     */
    data: XOR<ProviderLocationUpdateInput, ProviderLocationUncheckedUpdateInput>
    /**
     * Choose, which ProviderLocation to update.
     */
    where: ProviderLocationWhereUniqueInput
  }

  /**
   * ProviderLocation updateMany
   */
  export type ProviderLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProviderLocations.
     */
    data: XOR<ProviderLocationUpdateManyMutationInput, ProviderLocationUncheckedUpdateManyInput>
    /**
     * Filter which ProviderLocations to update
     */
    where?: ProviderLocationWhereInput
    /**
     * Limit how many ProviderLocations to update.
     */
    limit?: number
  }

  /**
   * ProviderLocation updateManyAndReturn
   */
  export type ProviderLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * The data used to update ProviderLocations.
     */
    data: XOR<ProviderLocationUpdateManyMutationInput, ProviderLocationUncheckedUpdateManyInput>
    /**
     * Filter which ProviderLocations to update
     */
    where?: ProviderLocationWhereInput
    /**
     * Limit how many ProviderLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProviderLocation upsert
   */
  export type ProviderLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProviderLocation to update in case it exists.
     */
    where: ProviderLocationWhereUniqueInput
    /**
     * In case the ProviderLocation found by the `where` argument doesn't exist, create a new ProviderLocation with this data.
     */
    create: XOR<ProviderLocationCreateInput, ProviderLocationUncheckedCreateInput>
    /**
     * In case the ProviderLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderLocationUpdateInput, ProviderLocationUncheckedUpdateInput>
  }

  /**
   * ProviderLocation delete
   */
  export type ProviderLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
    /**
     * Filter which ProviderLocation to delete.
     */
    where: ProviderLocationWhereUniqueInput
  }

  /**
   * ProviderLocation deleteMany
   */
  export type ProviderLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderLocations to delete
     */
    where?: ProviderLocationWhereInput
    /**
     * Limit how many ProviderLocations to delete.
     */
    limit?: number
  }

  /**
   * ProviderLocation without action
   */
  export type ProviderLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderLocation
     */
    select?: ProviderLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderLocation
     */
    omit?: ProviderLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderLocationInclude<ExtArgs> | null
  }


  /**
   * Model LocationFinancial
   */

  export type AggregateLocationFinancial = {
    _count: LocationFinancialCountAggregateOutputType | null
    _avg: LocationFinancialAvgAggregateOutputType | null
    _sum: LocationFinancialSumAggregateOutputType | null
    _min: LocationFinancialMinAggregateOutputType | null
    _max: LocationFinancialMaxAggregateOutputType | null
  }

  export type LocationFinancialAvgAggregateOutputType = {
    production: Decimal | null
    adjustments: Decimal | null
    writeOffs: Decimal | null
    netProduction: Decimal | null
    patientIncome: Decimal | null
    insuranceIncome: Decimal | null
    totalCollections: Decimal | null
    unearned: Decimal | null
  }

  export type LocationFinancialSumAggregateOutputType = {
    production: Decimal | null
    adjustments: Decimal | null
    writeOffs: Decimal | null
    netProduction: Decimal | null
    patientIncome: Decimal | null
    insuranceIncome: Decimal | null
    totalCollections: Decimal | null
    unearned: Decimal | null
  }

  export type LocationFinancialMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    locationId: string | null
    date: Date | null
    production: Decimal | null
    adjustments: Decimal | null
    writeOffs: Decimal | null
    netProduction: Decimal | null
    patientIncome: Decimal | null
    insuranceIncome: Decimal | null
    totalCollections: Decimal | null
    unearned: Decimal | null
    dataSourceId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationFinancialMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    locationId: string | null
    date: Date | null
    production: Decimal | null
    adjustments: Decimal | null
    writeOffs: Decimal | null
    netProduction: Decimal | null
    patientIncome: Decimal | null
    insuranceIncome: Decimal | null
    totalCollections: Decimal | null
    unearned: Decimal | null
    dataSourceId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationFinancialCountAggregateOutputType = {
    id: number
    clinicId: number
    locationId: number
    date: number
    production: number
    adjustments: number
    writeOffs: number
    netProduction: number
    patientIncome: number
    insuranceIncome: number
    totalCollections: number
    unearned: number
    dataSourceId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationFinancialAvgAggregateInputType = {
    production?: true
    adjustments?: true
    writeOffs?: true
    netProduction?: true
    patientIncome?: true
    insuranceIncome?: true
    totalCollections?: true
    unearned?: true
  }

  export type LocationFinancialSumAggregateInputType = {
    production?: true
    adjustments?: true
    writeOffs?: true
    netProduction?: true
    patientIncome?: true
    insuranceIncome?: true
    totalCollections?: true
    unearned?: true
  }

  export type LocationFinancialMinAggregateInputType = {
    id?: true
    clinicId?: true
    locationId?: true
    date?: true
    production?: true
    adjustments?: true
    writeOffs?: true
    netProduction?: true
    patientIncome?: true
    insuranceIncome?: true
    totalCollections?: true
    unearned?: true
    dataSourceId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationFinancialMaxAggregateInputType = {
    id?: true
    clinicId?: true
    locationId?: true
    date?: true
    production?: true
    adjustments?: true
    writeOffs?: true
    netProduction?: true
    patientIncome?: true
    insuranceIncome?: true
    totalCollections?: true
    unearned?: true
    dataSourceId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationFinancialCountAggregateInputType = {
    id?: true
    clinicId?: true
    locationId?: true
    date?: true
    production?: true
    adjustments?: true
    writeOffs?: true
    netProduction?: true
    patientIncome?: true
    insuranceIncome?: true
    totalCollections?: true
    unearned?: true
    dataSourceId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationFinancialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationFinancial to aggregate.
     */
    where?: LocationFinancialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationFinancials to fetch.
     */
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationFinancialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationFinancials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationFinancials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationFinancials
    **/
    _count?: true | LocationFinancialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationFinancialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationFinancialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationFinancialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationFinancialMaxAggregateInputType
  }

  export type GetLocationFinancialAggregateType<T extends LocationFinancialAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationFinancial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationFinancial[P]>
      : GetScalarType<T[P], AggregateLocationFinancial[P]>
  }




  export type LocationFinancialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationFinancialWhereInput
    orderBy?: LocationFinancialOrderByWithAggregationInput | LocationFinancialOrderByWithAggregationInput[]
    by: LocationFinancialScalarFieldEnum[] | LocationFinancialScalarFieldEnum
    having?: LocationFinancialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationFinancialCountAggregateInputType | true
    _avg?: LocationFinancialAvgAggregateInputType
    _sum?: LocationFinancialSumAggregateInputType
    _min?: LocationFinancialMinAggregateInputType
    _max?: LocationFinancialMaxAggregateInputType
  }

  export type LocationFinancialGroupByOutputType = {
    id: string
    clinicId: string
    locationId: string
    date: Date
    production: Decimal
    adjustments: Decimal
    writeOffs: Decimal
    netProduction: Decimal
    patientIncome: Decimal
    insuranceIncome: Decimal
    totalCollections: Decimal
    unearned: Decimal | null
    dataSourceId: string | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: LocationFinancialCountAggregateOutputType | null
    _avg: LocationFinancialAvgAggregateOutputType | null
    _sum: LocationFinancialSumAggregateOutputType | null
    _min: LocationFinancialMinAggregateOutputType | null
    _max: LocationFinancialMaxAggregateOutputType | null
  }

  type GetLocationFinancialGroupByPayload<T extends LocationFinancialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationFinancialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationFinancialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationFinancialGroupByOutputType[P]>
            : GetScalarType<T[P], LocationFinancialGroupByOutputType[P]>
        }
      >
    >


  export type LocationFinancialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    locationId?: boolean
    date?: boolean
    production?: boolean
    adjustments?: boolean
    writeOffs?: boolean
    netProduction?: boolean
    patientIncome?: boolean
    insuranceIncome?: boolean
    totalCollections?: boolean
    unearned?: boolean
    dataSourceId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["locationFinancial"]>

  export type LocationFinancialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    locationId?: boolean
    date?: boolean
    production?: boolean
    adjustments?: boolean
    writeOffs?: boolean
    netProduction?: boolean
    patientIncome?: boolean
    insuranceIncome?: boolean
    totalCollections?: boolean
    unearned?: boolean
    dataSourceId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["locationFinancial"]>

  export type LocationFinancialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    locationId?: boolean
    date?: boolean
    production?: boolean
    adjustments?: boolean
    writeOffs?: boolean
    netProduction?: boolean
    patientIncome?: boolean
    insuranceIncome?: boolean
    totalCollections?: boolean
    unearned?: boolean
    dataSourceId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["locationFinancial"]>

  export type LocationFinancialSelectScalar = {
    id?: boolean
    clinicId?: boolean
    locationId?: boolean
    date?: boolean
    production?: boolean
    adjustments?: boolean
    writeOffs?: boolean
    netProduction?: boolean
    patientIncome?: boolean
    insuranceIncome?: boolean
    totalCollections?: boolean
    unearned?: boolean
    dataSourceId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationFinancialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "locationId" | "date" | "production" | "adjustments" | "writeOffs" | "netProduction" | "patientIncome" | "insuranceIncome" | "totalCollections" | "unearned" | "dataSourceId" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["locationFinancial"]>
  export type LocationFinancialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }
  export type LocationFinancialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }
  export type LocationFinancialIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    dataSource?: boolean | LocationFinancial$dataSourceArgs<ExtArgs>
  }

  export type $LocationFinancialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationFinancial"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
      location: Prisma.$LocationPayload<ExtArgs>
      dataSource: Prisma.$DataSourcePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      locationId: string
      date: Date
      production: Prisma.Decimal
      adjustments: Prisma.Decimal
      writeOffs: Prisma.Decimal
      netProduction: Prisma.Decimal
      patientIncome: Prisma.Decimal
      insuranceIncome: Prisma.Decimal
      totalCollections: Prisma.Decimal
      unearned: Prisma.Decimal | null
      dataSourceId: string | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["locationFinancial"]>
    composites: {}
  }

  type LocationFinancialGetPayload<S extends boolean | null | undefined | LocationFinancialDefaultArgs> = $Result.GetResult<Prisma.$LocationFinancialPayload, S>

  type LocationFinancialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFinancialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationFinancialCountAggregateInputType | true
    }

  export interface LocationFinancialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationFinancial'], meta: { name: 'LocationFinancial' } }
    /**
     * Find zero or one LocationFinancial that matches the filter.
     * @param {LocationFinancialFindUniqueArgs} args - Arguments to find a LocationFinancial
     * @example
     * // Get one LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFinancialFindUniqueArgs>(args: SelectSubset<T, LocationFinancialFindUniqueArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LocationFinancial that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFinancialFindUniqueOrThrowArgs} args - Arguments to find a LocationFinancial
     * @example
     * // Get one LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFinancialFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFinancialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationFinancial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialFindFirstArgs} args - Arguments to find a LocationFinancial
     * @example
     * // Get one LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFinancialFindFirstArgs>(args?: SelectSubset<T, LocationFinancialFindFirstArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LocationFinancial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialFindFirstOrThrowArgs} args - Arguments to find a LocationFinancial
     * @example
     * // Get one LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFinancialFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFinancialFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LocationFinancials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationFinancials
     * const locationFinancials = await prisma.locationFinancial.findMany()
     * 
     * // Get first 10 LocationFinancials
     * const locationFinancials = await prisma.locationFinancial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationFinancialWithIdOnly = await prisma.locationFinancial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFinancialFindManyArgs>(args?: SelectSubset<T, LocationFinancialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LocationFinancial.
     * @param {LocationFinancialCreateArgs} args - Arguments to create a LocationFinancial.
     * @example
     * // Create one LocationFinancial
     * const LocationFinancial = await prisma.locationFinancial.create({
     *   data: {
     *     // ... data to create a LocationFinancial
     *   }
     * })
     * 
     */
    create<T extends LocationFinancialCreateArgs>(args: SelectSubset<T, LocationFinancialCreateArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LocationFinancials.
     * @param {LocationFinancialCreateManyArgs} args - Arguments to create many LocationFinancials.
     * @example
     * // Create many LocationFinancials
     * const locationFinancial = await prisma.locationFinancial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationFinancialCreateManyArgs>(args?: SelectSubset<T, LocationFinancialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationFinancials and returns the data saved in the database.
     * @param {LocationFinancialCreateManyAndReturnArgs} args - Arguments to create many LocationFinancials.
     * @example
     * // Create many LocationFinancials
     * const locationFinancial = await prisma.locationFinancial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationFinancials and only return the `id`
     * const locationFinancialWithIdOnly = await prisma.locationFinancial.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationFinancialCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationFinancialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LocationFinancial.
     * @param {LocationFinancialDeleteArgs} args - Arguments to delete one LocationFinancial.
     * @example
     * // Delete one LocationFinancial
     * const LocationFinancial = await prisma.locationFinancial.delete({
     *   where: {
     *     // ... filter to delete one LocationFinancial
     *   }
     * })
     * 
     */
    delete<T extends LocationFinancialDeleteArgs>(args: SelectSubset<T, LocationFinancialDeleteArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LocationFinancial.
     * @param {LocationFinancialUpdateArgs} args - Arguments to update one LocationFinancial.
     * @example
     * // Update one LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationFinancialUpdateArgs>(args: SelectSubset<T, LocationFinancialUpdateArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LocationFinancials.
     * @param {LocationFinancialDeleteManyArgs} args - Arguments to filter LocationFinancials to delete.
     * @example
     * // Delete a few LocationFinancials
     * const { count } = await prisma.locationFinancial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationFinancialDeleteManyArgs>(args?: SelectSubset<T, LocationFinancialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationFinancials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationFinancials
     * const locationFinancial = await prisma.locationFinancial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationFinancialUpdateManyArgs>(args: SelectSubset<T, LocationFinancialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationFinancials and returns the data updated in the database.
     * @param {LocationFinancialUpdateManyAndReturnArgs} args - Arguments to update many LocationFinancials.
     * @example
     * // Update many LocationFinancials
     * const locationFinancial = await prisma.locationFinancial.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LocationFinancials and only return the `id`
     * const locationFinancialWithIdOnly = await prisma.locationFinancial.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationFinancialUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationFinancialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LocationFinancial.
     * @param {LocationFinancialUpsertArgs} args - Arguments to update or create a LocationFinancial.
     * @example
     * // Update or create a LocationFinancial
     * const locationFinancial = await prisma.locationFinancial.upsert({
     *   create: {
     *     // ... data to create a LocationFinancial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationFinancial we want to update
     *   }
     * })
     */
    upsert<T extends LocationFinancialUpsertArgs>(args: SelectSubset<T, LocationFinancialUpsertArgs<ExtArgs>>): Prisma__LocationFinancialClient<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LocationFinancials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialCountArgs} args - Arguments to filter LocationFinancials to count.
     * @example
     * // Count the number of LocationFinancials
     * const count = await prisma.locationFinancial.count({
     *   where: {
     *     // ... the filter for the LocationFinancials we want to count
     *   }
     * })
    **/
    count<T extends LocationFinancialCountArgs>(
      args?: Subset<T, LocationFinancialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationFinancialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationFinancial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationFinancialAggregateArgs>(args: Subset<T, LocationFinancialAggregateArgs>): Prisma.PrismaPromise<GetLocationFinancialAggregateType<T>>

    /**
     * Group by LocationFinancial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFinancialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationFinancialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationFinancialGroupByArgs['orderBy'] }
        : { orderBy?: LocationFinancialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationFinancialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationFinancialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationFinancial model
   */
  readonly fields: LocationFinancialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationFinancial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationFinancialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    dataSource<T extends LocationFinancial$dataSourceArgs<ExtArgs> = {}>(args?: Subset<T, LocationFinancial$dataSourceArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationFinancial model
   */
  interface LocationFinancialFieldRefs {
    readonly id: FieldRef<"LocationFinancial", 'String'>
    readonly clinicId: FieldRef<"LocationFinancial", 'String'>
    readonly locationId: FieldRef<"LocationFinancial", 'String'>
    readonly date: FieldRef<"LocationFinancial", 'DateTime'>
    readonly production: FieldRef<"LocationFinancial", 'Decimal'>
    readonly adjustments: FieldRef<"LocationFinancial", 'Decimal'>
    readonly writeOffs: FieldRef<"LocationFinancial", 'Decimal'>
    readonly netProduction: FieldRef<"LocationFinancial", 'Decimal'>
    readonly patientIncome: FieldRef<"LocationFinancial", 'Decimal'>
    readonly insuranceIncome: FieldRef<"LocationFinancial", 'Decimal'>
    readonly totalCollections: FieldRef<"LocationFinancial", 'Decimal'>
    readonly unearned: FieldRef<"LocationFinancial", 'Decimal'>
    readonly dataSourceId: FieldRef<"LocationFinancial", 'String'>
    readonly createdBy: FieldRef<"LocationFinancial", 'String'>
    readonly createdAt: FieldRef<"LocationFinancial", 'DateTime'>
    readonly updatedAt: FieldRef<"LocationFinancial", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LocationFinancial findUnique
   */
  export type LocationFinancialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter, which LocationFinancial to fetch.
     */
    where: LocationFinancialWhereUniqueInput
  }

  /**
   * LocationFinancial findUniqueOrThrow
   */
  export type LocationFinancialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter, which LocationFinancial to fetch.
     */
    where: LocationFinancialWhereUniqueInput
  }

  /**
   * LocationFinancial findFirst
   */
  export type LocationFinancialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter, which LocationFinancial to fetch.
     */
    where?: LocationFinancialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationFinancials to fetch.
     */
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationFinancials.
     */
    cursor?: LocationFinancialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationFinancials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationFinancials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationFinancials.
     */
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * LocationFinancial findFirstOrThrow
   */
  export type LocationFinancialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter, which LocationFinancial to fetch.
     */
    where?: LocationFinancialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationFinancials to fetch.
     */
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationFinancials.
     */
    cursor?: LocationFinancialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationFinancials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationFinancials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationFinancials.
     */
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * LocationFinancial findMany
   */
  export type LocationFinancialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter, which LocationFinancials to fetch.
     */
    where?: LocationFinancialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationFinancials to fetch.
     */
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationFinancials.
     */
    cursor?: LocationFinancialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationFinancials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationFinancials.
     */
    skip?: number
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * LocationFinancial create
   */
  export type LocationFinancialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationFinancial.
     */
    data: XOR<LocationFinancialCreateInput, LocationFinancialUncheckedCreateInput>
  }

  /**
   * LocationFinancial createMany
   */
  export type LocationFinancialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationFinancials.
     */
    data: LocationFinancialCreateManyInput | LocationFinancialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationFinancial createManyAndReturn
   */
  export type LocationFinancialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * The data used to create many LocationFinancials.
     */
    data: LocationFinancialCreateManyInput | LocationFinancialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationFinancial update
   */
  export type LocationFinancialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationFinancial.
     */
    data: XOR<LocationFinancialUpdateInput, LocationFinancialUncheckedUpdateInput>
    /**
     * Choose, which LocationFinancial to update.
     */
    where: LocationFinancialWhereUniqueInput
  }

  /**
   * LocationFinancial updateMany
   */
  export type LocationFinancialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationFinancials.
     */
    data: XOR<LocationFinancialUpdateManyMutationInput, LocationFinancialUncheckedUpdateManyInput>
    /**
     * Filter which LocationFinancials to update
     */
    where?: LocationFinancialWhereInput
    /**
     * Limit how many LocationFinancials to update.
     */
    limit?: number
  }

  /**
   * LocationFinancial updateManyAndReturn
   */
  export type LocationFinancialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * The data used to update LocationFinancials.
     */
    data: XOR<LocationFinancialUpdateManyMutationInput, LocationFinancialUncheckedUpdateManyInput>
    /**
     * Filter which LocationFinancials to update
     */
    where?: LocationFinancialWhereInput
    /**
     * Limit how many LocationFinancials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationFinancial upsert
   */
  export type LocationFinancialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationFinancial to update in case it exists.
     */
    where: LocationFinancialWhereUniqueInput
    /**
     * In case the LocationFinancial found by the `where` argument doesn't exist, create a new LocationFinancial with this data.
     */
    create: XOR<LocationFinancialCreateInput, LocationFinancialUncheckedCreateInput>
    /**
     * In case the LocationFinancial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationFinancialUpdateInput, LocationFinancialUncheckedUpdateInput>
  }

  /**
   * LocationFinancial delete
   */
  export type LocationFinancialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    /**
     * Filter which LocationFinancial to delete.
     */
    where: LocationFinancialWhereUniqueInput
  }

  /**
   * LocationFinancial deleteMany
   */
  export type LocationFinancialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationFinancials to delete
     */
    where?: LocationFinancialWhereInput
    /**
     * Limit how many LocationFinancials to delete.
     */
    limit?: number
  }

  /**
   * LocationFinancial.dataSource
   */
  export type LocationFinancial$dataSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
  }

  /**
   * LocationFinancial without action
   */
  export type LocationFinancialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
  }


  /**
   * Model MetricDefinition
   */

  export type AggregateMetricDefinition = {
    _count: MetricDefinitionCountAggregateOutputType | null
    _min: MetricDefinitionMinAggregateOutputType | null
    _max: MetricDefinitionMaxAggregateOutputType | null
  }

  export type MetricDefinitionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    dataType: string | null
    calculationFormula: string | null
    category: string | null
    isComposite: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricDefinitionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    dataType: string | null
    calculationFormula: string | null
    category: string | null
    isComposite: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricDefinitionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    dataType: number
    calculationFormula: number
    category: number
    isComposite: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MetricDefinitionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dataType?: true
    calculationFormula?: true
    category?: true
    isComposite?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricDefinitionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dataType?: true
    calculationFormula?: true
    category?: true
    isComposite?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricDefinitionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    dataType?: true
    calculationFormula?: true
    category?: true
    isComposite?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MetricDefinitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricDefinition to aggregate.
     */
    where?: MetricDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricDefinitions to fetch.
     */
    orderBy?: MetricDefinitionOrderByWithRelationInput | MetricDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricDefinitions
    **/
    _count?: true | MetricDefinitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricDefinitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricDefinitionMaxAggregateInputType
  }

  export type GetMetricDefinitionAggregateType<T extends MetricDefinitionAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricDefinition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricDefinition[P]>
      : GetScalarType<T[P], AggregateMetricDefinition[P]>
  }




  export type MetricDefinitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricDefinitionWhereInput
    orderBy?: MetricDefinitionOrderByWithAggregationInput | MetricDefinitionOrderByWithAggregationInput[]
    by: MetricDefinitionScalarFieldEnum[] | MetricDefinitionScalarFieldEnum
    having?: MetricDefinitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricDefinitionCountAggregateInputType | true
    _min?: MetricDefinitionMinAggregateInputType
    _max?: MetricDefinitionMaxAggregateInputType
  }

  export type MetricDefinitionGroupByOutputType = {
    id: string
    name: string
    description: string
    dataType: string
    calculationFormula: string | null
    category: string
    isComposite: boolean
    createdAt: Date
    updatedAt: Date
    _count: MetricDefinitionCountAggregateOutputType | null
    _min: MetricDefinitionMinAggregateOutputType | null
    _max: MetricDefinitionMaxAggregateOutputType | null
  }

  type GetMetricDefinitionGroupByPayload<T extends MetricDefinitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricDefinitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricDefinitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricDefinitionGroupByOutputType[P]>
            : GetScalarType<T[P], MetricDefinitionGroupByOutputType[P]>
        }
      >
    >


  export type MetricDefinitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    dataType?: boolean
    calculationFormula?: boolean
    category?: boolean
    isComposite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metrics?: boolean | MetricDefinition$metricsArgs<ExtArgs>
    columnMappings?: boolean | MetricDefinition$columnMappingsArgs<ExtArgs>
    goals?: boolean | MetricDefinition$goalsArgs<ExtArgs>
    widgets?: boolean | MetricDefinition$widgetsArgs<ExtArgs>
    _count?: boolean | MetricDefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricDefinition"]>

  export type MetricDefinitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    dataType?: boolean
    calculationFormula?: boolean
    category?: boolean
    isComposite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricDefinition"]>

  export type MetricDefinitionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    dataType?: boolean
    calculationFormula?: boolean
    category?: boolean
    isComposite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricDefinition"]>

  export type MetricDefinitionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    dataType?: boolean
    calculationFormula?: boolean
    category?: boolean
    isComposite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MetricDefinitionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "dataType" | "calculationFormula" | "category" | "isComposite" | "createdAt" | "updatedAt", ExtArgs["result"]["metricDefinition"]>
  export type MetricDefinitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metrics?: boolean | MetricDefinition$metricsArgs<ExtArgs>
    columnMappings?: boolean | MetricDefinition$columnMappingsArgs<ExtArgs>
    goals?: boolean | MetricDefinition$goalsArgs<ExtArgs>
    widgets?: boolean | MetricDefinition$widgetsArgs<ExtArgs>
    _count?: boolean | MetricDefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MetricDefinitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MetricDefinitionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MetricDefinitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricDefinition"
    objects: {
      metrics: Prisma.$MetricValuePayload<ExtArgs>[]
      columnMappings: Prisma.$ColumnMappingPayload<ExtArgs>[]
      goals: Prisma.$GoalPayload<ExtArgs>[]
      widgets: Prisma.$WidgetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      dataType: string
      calculationFormula: string | null
      category: string
      isComposite: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["metricDefinition"]>
    composites: {}
  }

  type MetricDefinitionGetPayload<S extends boolean | null | undefined | MetricDefinitionDefaultArgs> = $Result.GetResult<Prisma.$MetricDefinitionPayload, S>

  type MetricDefinitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricDefinitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricDefinitionCountAggregateInputType | true
    }

  export interface MetricDefinitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricDefinition'], meta: { name: 'MetricDefinition' } }
    /**
     * Find zero or one MetricDefinition that matches the filter.
     * @param {MetricDefinitionFindUniqueArgs} args - Arguments to find a MetricDefinition
     * @example
     * // Get one MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricDefinitionFindUniqueArgs>(args: SelectSubset<T, MetricDefinitionFindUniqueArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetricDefinition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricDefinitionFindUniqueOrThrowArgs} args - Arguments to find a MetricDefinition
     * @example
     * // Get one MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricDefinitionFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricDefinitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricDefinition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionFindFirstArgs} args - Arguments to find a MetricDefinition
     * @example
     * // Get one MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricDefinitionFindFirstArgs>(args?: SelectSubset<T, MetricDefinitionFindFirstArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricDefinition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionFindFirstOrThrowArgs} args - Arguments to find a MetricDefinition
     * @example
     * // Get one MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricDefinitionFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricDefinitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetricDefinitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricDefinitions
     * const metricDefinitions = await prisma.metricDefinition.findMany()
     * 
     * // Get first 10 MetricDefinitions
     * const metricDefinitions = await prisma.metricDefinition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricDefinitionWithIdOnly = await prisma.metricDefinition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricDefinitionFindManyArgs>(args?: SelectSubset<T, MetricDefinitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetricDefinition.
     * @param {MetricDefinitionCreateArgs} args - Arguments to create a MetricDefinition.
     * @example
     * // Create one MetricDefinition
     * const MetricDefinition = await prisma.metricDefinition.create({
     *   data: {
     *     // ... data to create a MetricDefinition
     *   }
     * })
     * 
     */
    create<T extends MetricDefinitionCreateArgs>(args: SelectSubset<T, MetricDefinitionCreateArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetricDefinitions.
     * @param {MetricDefinitionCreateManyArgs} args - Arguments to create many MetricDefinitions.
     * @example
     * // Create many MetricDefinitions
     * const metricDefinition = await prisma.metricDefinition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricDefinitionCreateManyArgs>(args?: SelectSubset<T, MetricDefinitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricDefinitions and returns the data saved in the database.
     * @param {MetricDefinitionCreateManyAndReturnArgs} args - Arguments to create many MetricDefinitions.
     * @example
     * // Create many MetricDefinitions
     * const metricDefinition = await prisma.metricDefinition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricDefinitions and only return the `id`
     * const metricDefinitionWithIdOnly = await prisma.metricDefinition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricDefinitionCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricDefinitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetricDefinition.
     * @param {MetricDefinitionDeleteArgs} args - Arguments to delete one MetricDefinition.
     * @example
     * // Delete one MetricDefinition
     * const MetricDefinition = await prisma.metricDefinition.delete({
     *   where: {
     *     // ... filter to delete one MetricDefinition
     *   }
     * })
     * 
     */
    delete<T extends MetricDefinitionDeleteArgs>(args: SelectSubset<T, MetricDefinitionDeleteArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetricDefinition.
     * @param {MetricDefinitionUpdateArgs} args - Arguments to update one MetricDefinition.
     * @example
     * // Update one MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricDefinitionUpdateArgs>(args: SelectSubset<T, MetricDefinitionUpdateArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetricDefinitions.
     * @param {MetricDefinitionDeleteManyArgs} args - Arguments to filter MetricDefinitions to delete.
     * @example
     * // Delete a few MetricDefinitions
     * const { count } = await prisma.metricDefinition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricDefinitionDeleteManyArgs>(args?: SelectSubset<T, MetricDefinitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricDefinitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricDefinitions
     * const metricDefinition = await prisma.metricDefinition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricDefinitionUpdateManyArgs>(args: SelectSubset<T, MetricDefinitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricDefinitions and returns the data updated in the database.
     * @param {MetricDefinitionUpdateManyAndReturnArgs} args - Arguments to update many MetricDefinitions.
     * @example
     * // Update many MetricDefinitions
     * const metricDefinition = await prisma.metricDefinition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetricDefinitions and only return the `id`
     * const metricDefinitionWithIdOnly = await prisma.metricDefinition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricDefinitionUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricDefinitionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetricDefinition.
     * @param {MetricDefinitionUpsertArgs} args - Arguments to update or create a MetricDefinition.
     * @example
     * // Update or create a MetricDefinition
     * const metricDefinition = await prisma.metricDefinition.upsert({
     *   create: {
     *     // ... data to create a MetricDefinition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricDefinition we want to update
     *   }
     * })
     */
    upsert<T extends MetricDefinitionUpsertArgs>(args: SelectSubset<T, MetricDefinitionUpsertArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetricDefinitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionCountArgs} args - Arguments to filter MetricDefinitions to count.
     * @example
     * // Count the number of MetricDefinitions
     * const count = await prisma.metricDefinition.count({
     *   where: {
     *     // ... the filter for the MetricDefinitions we want to count
     *   }
     * })
    **/
    count<T extends MetricDefinitionCountArgs>(
      args?: Subset<T, MetricDefinitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricDefinitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricDefinition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricDefinitionAggregateArgs>(args: Subset<T, MetricDefinitionAggregateArgs>): Prisma.PrismaPromise<GetMetricDefinitionAggregateType<T>>

    /**
     * Group by MetricDefinition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricDefinitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricDefinitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricDefinitionGroupByArgs['orderBy'] }
        : { orderBy?: MetricDefinitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricDefinitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricDefinitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricDefinition model
   */
  readonly fields: MetricDefinitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricDefinition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricDefinitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    metrics<T extends MetricDefinition$metricsArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinition$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    columnMappings<T extends MetricDefinition$columnMappingsArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinition$columnMappingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goals<T extends MetricDefinition$goalsArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinition$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    widgets<T extends MetricDefinition$widgetsArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinition$widgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricDefinition model
   */
  interface MetricDefinitionFieldRefs {
    readonly id: FieldRef<"MetricDefinition", 'String'>
    readonly name: FieldRef<"MetricDefinition", 'String'>
    readonly description: FieldRef<"MetricDefinition", 'String'>
    readonly dataType: FieldRef<"MetricDefinition", 'String'>
    readonly calculationFormula: FieldRef<"MetricDefinition", 'String'>
    readonly category: FieldRef<"MetricDefinition", 'String'>
    readonly isComposite: FieldRef<"MetricDefinition", 'Boolean'>
    readonly createdAt: FieldRef<"MetricDefinition", 'DateTime'>
    readonly updatedAt: FieldRef<"MetricDefinition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MetricDefinition findUnique
   */
  export type MetricDefinitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which MetricDefinition to fetch.
     */
    where: MetricDefinitionWhereUniqueInput
  }

  /**
   * MetricDefinition findUniqueOrThrow
   */
  export type MetricDefinitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which MetricDefinition to fetch.
     */
    where: MetricDefinitionWhereUniqueInput
  }

  /**
   * MetricDefinition findFirst
   */
  export type MetricDefinitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which MetricDefinition to fetch.
     */
    where?: MetricDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricDefinitions to fetch.
     */
    orderBy?: MetricDefinitionOrderByWithRelationInput | MetricDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricDefinitions.
     */
    cursor?: MetricDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricDefinitions.
     */
    distinct?: MetricDefinitionScalarFieldEnum | MetricDefinitionScalarFieldEnum[]
  }

  /**
   * MetricDefinition findFirstOrThrow
   */
  export type MetricDefinitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which MetricDefinition to fetch.
     */
    where?: MetricDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricDefinitions to fetch.
     */
    orderBy?: MetricDefinitionOrderByWithRelationInput | MetricDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricDefinitions.
     */
    cursor?: MetricDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricDefinitions.
     */
    distinct?: MetricDefinitionScalarFieldEnum | MetricDefinitionScalarFieldEnum[]
  }

  /**
   * MetricDefinition findMany
   */
  export type MetricDefinitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which MetricDefinitions to fetch.
     */
    where?: MetricDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricDefinitions to fetch.
     */
    orderBy?: MetricDefinitionOrderByWithRelationInput | MetricDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricDefinitions.
     */
    cursor?: MetricDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricDefinitions.
     */
    skip?: number
    distinct?: MetricDefinitionScalarFieldEnum | MetricDefinitionScalarFieldEnum[]
  }

  /**
   * MetricDefinition create
   */
  export type MetricDefinitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * The data needed to create a MetricDefinition.
     */
    data: XOR<MetricDefinitionCreateInput, MetricDefinitionUncheckedCreateInput>
  }

  /**
   * MetricDefinition createMany
   */
  export type MetricDefinitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricDefinitions.
     */
    data: MetricDefinitionCreateManyInput | MetricDefinitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricDefinition createManyAndReturn
   */
  export type MetricDefinitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * The data used to create many MetricDefinitions.
     */
    data: MetricDefinitionCreateManyInput | MetricDefinitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricDefinition update
   */
  export type MetricDefinitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * The data needed to update a MetricDefinition.
     */
    data: XOR<MetricDefinitionUpdateInput, MetricDefinitionUncheckedUpdateInput>
    /**
     * Choose, which MetricDefinition to update.
     */
    where: MetricDefinitionWhereUniqueInput
  }

  /**
   * MetricDefinition updateMany
   */
  export type MetricDefinitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricDefinitions.
     */
    data: XOR<MetricDefinitionUpdateManyMutationInput, MetricDefinitionUncheckedUpdateManyInput>
    /**
     * Filter which MetricDefinitions to update
     */
    where?: MetricDefinitionWhereInput
    /**
     * Limit how many MetricDefinitions to update.
     */
    limit?: number
  }

  /**
   * MetricDefinition updateManyAndReturn
   */
  export type MetricDefinitionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * The data used to update MetricDefinitions.
     */
    data: XOR<MetricDefinitionUpdateManyMutationInput, MetricDefinitionUncheckedUpdateManyInput>
    /**
     * Filter which MetricDefinitions to update
     */
    where?: MetricDefinitionWhereInput
    /**
     * Limit how many MetricDefinitions to update.
     */
    limit?: number
  }

  /**
   * MetricDefinition upsert
   */
  export type MetricDefinitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * The filter to search for the MetricDefinition to update in case it exists.
     */
    where: MetricDefinitionWhereUniqueInput
    /**
     * In case the MetricDefinition found by the `where` argument doesn't exist, create a new MetricDefinition with this data.
     */
    create: XOR<MetricDefinitionCreateInput, MetricDefinitionUncheckedCreateInput>
    /**
     * In case the MetricDefinition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricDefinitionUpdateInput, MetricDefinitionUncheckedUpdateInput>
  }

  /**
   * MetricDefinition delete
   */
  export type MetricDefinitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    /**
     * Filter which MetricDefinition to delete.
     */
    where: MetricDefinitionWhereUniqueInput
  }

  /**
   * MetricDefinition deleteMany
   */
  export type MetricDefinitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricDefinitions to delete
     */
    where?: MetricDefinitionWhereInput
    /**
     * Limit how many MetricDefinitions to delete.
     */
    limit?: number
  }

  /**
   * MetricDefinition.metrics
   */
  export type MetricDefinition$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    where?: MetricValueWhereInput
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    cursor?: MetricValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * MetricDefinition.columnMappings
   */
  export type MetricDefinition$columnMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    where?: ColumnMappingWhereInput
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    cursor?: ColumnMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColumnMappingScalarFieldEnum | ColumnMappingScalarFieldEnum[]
  }

  /**
   * MetricDefinition.goals
   */
  export type MetricDefinition$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * MetricDefinition.widgets
   */
  export type MetricDefinition$widgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    where?: WidgetWhereInput
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    cursor?: WidgetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WidgetScalarFieldEnum | WidgetScalarFieldEnum[]
  }

  /**
   * MetricDefinition without action
   */
  export type MetricDefinitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
  }


  /**
   * Model DataSource
   */

  export type AggregateDataSource = {
    _count: DataSourceCountAggregateOutputType | null
    _min: DataSourceMinAggregateOutputType | null
    _max: DataSourceMaxAggregateOutputType | null
  }

  export type DataSourceMinAggregateOutputType = {
    id: string | null
    name: string | null
    spreadsheetId: string | null
    sheetName: string | null
    lastSyncedAt: Date | null
    syncFrequency: string | null
    connectionStatus: string | null
    appScriptId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
  }

  export type DataSourceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    spreadsheetId: string | null
    sheetName: string | null
    lastSyncedAt: Date | null
    syncFrequency: string | null
    connectionStatus: string | null
    appScriptId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
  }

  export type DataSourceCountAggregateOutputType = {
    id: number
    name: number
    spreadsheetId: number
    sheetName: number
    lastSyncedAt: number
    syncFrequency: number
    connectionStatus: number
    appScriptId: number
    accessToken: number
    refreshToken: number
    expiryDate: number
    createdAt: number
    updatedAt: number
    clinicId: number
    providerId: number
    _all: number
  }


  export type DataSourceMinAggregateInputType = {
    id?: true
    name?: true
    spreadsheetId?: true
    sheetName?: true
    lastSyncedAt?: true
    syncFrequency?: true
    connectionStatus?: true
    appScriptId?: true
    accessToken?: true
    refreshToken?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
  }

  export type DataSourceMaxAggregateInputType = {
    id?: true
    name?: true
    spreadsheetId?: true
    sheetName?: true
    lastSyncedAt?: true
    syncFrequency?: true
    connectionStatus?: true
    appScriptId?: true
    accessToken?: true
    refreshToken?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
  }

  export type DataSourceCountAggregateInputType = {
    id?: true
    name?: true
    spreadsheetId?: true
    sheetName?: true
    lastSyncedAt?: true
    syncFrequency?: true
    connectionStatus?: true
    appScriptId?: true
    accessToken?: true
    refreshToken?: true
    expiryDate?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    _all?: true
  }

  export type DataSourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataSource to aggregate.
     */
    where?: DataSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSources to fetch.
     */
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataSources
    **/
    _count?: true | DataSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataSourceMaxAggregateInputType
  }

  export type GetDataSourceAggregateType<T extends DataSourceAggregateArgs> = {
        [P in keyof T & keyof AggregateDataSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataSource[P]>
      : GetScalarType<T[P], AggregateDataSource[P]>
  }




  export type DataSourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataSourceWhereInput
    orderBy?: DataSourceOrderByWithAggregationInput | DataSourceOrderByWithAggregationInput[]
    by: DataSourceScalarFieldEnum[] | DataSourceScalarFieldEnum
    having?: DataSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataSourceCountAggregateInputType | true
    _min?: DataSourceMinAggregateInputType
    _max?: DataSourceMaxAggregateInputType
  }

  export type DataSourceGroupByOutputType = {
    id: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt: Date | null
    syncFrequency: string
    connectionStatus: string
    appScriptId: string | null
    accessToken: string
    refreshToken: string | null
    expiryDate: Date | null
    createdAt: Date
    updatedAt: Date
    clinicId: string
    providerId: string | null
    _count: DataSourceCountAggregateOutputType | null
    _min: DataSourceMinAggregateOutputType | null
    _max: DataSourceMaxAggregateOutputType | null
  }

  type GetDataSourceGroupByPayload<T extends DataSourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataSourceGroupByOutputType[P]>
            : GetScalarType<T[P], DataSourceGroupByOutputType[P]>
        }
      >
    >


  export type DataSourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    spreadsheetId?: boolean
    sheetName?: boolean
    lastSyncedAt?: boolean
    syncFrequency?: boolean
    connectionStatus?: boolean
    appScriptId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    columnMappings?: boolean | DataSource$columnMappingsArgs<ExtArgs>
    metrics?: boolean | DataSource$metricsArgs<ExtArgs>
    hygieneProduction?: boolean | DataSource$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | DataSource$dentistProductionArgs<ExtArgs>
    locationFinancials?: boolean | DataSource$locationFinancialsArgs<ExtArgs>
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
    _count?: boolean | DataSourceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataSource"]>

  export type DataSourceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    spreadsheetId?: boolean
    sheetName?: boolean
    lastSyncedAt?: boolean
    syncFrequency?: boolean
    connectionStatus?: boolean
    appScriptId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
  }, ExtArgs["result"]["dataSource"]>

  export type DataSourceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    spreadsheetId?: boolean
    sheetName?: boolean
    lastSyncedAt?: boolean
    syncFrequency?: boolean
    connectionStatus?: boolean
    appScriptId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
  }, ExtArgs["result"]["dataSource"]>

  export type DataSourceSelectScalar = {
    id?: boolean
    name?: boolean
    spreadsheetId?: boolean
    sheetName?: boolean
    lastSyncedAt?: boolean
    syncFrequency?: boolean
    connectionStatus?: boolean
    appScriptId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
  }

  export type DataSourceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "spreadsheetId" | "sheetName" | "lastSyncedAt" | "syncFrequency" | "connectionStatus" | "appScriptId" | "accessToken" | "refreshToken" | "expiryDate" | "createdAt" | "updatedAt" | "clinicId" | "providerId", ExtArgs["result"]["dataSource"]>
  export type DataSourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columnMappings?: boolean | DataSource$columnMappingsArgs<ExtArgs>
    metrics?: boolean | DataSource$metricsArgs<ExtArgs>
    hygieneProduction?: boolean | DataSource$hygieneProductionArgs<ExtArgs>
    dentistProduction?: boolean | DataSource$dentistProductionArgs<ExtArgs>
    locationFinancials?: boolean | DataSource$locationFinancialsArgs<ExtArgs>
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
    _count?: boolean | DataSourceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DataSourceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
  }
  export type DataSourceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DataSource$providerArgs<ExtArgs>
  }

  export type $DataSourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataSource"
    objects: {
      columnMappings: Prisma.$ColumnMappingPayload<ExtArgs>[]
      metrics: Prisma.$MetricValuePayload<ExtArgs>[]
      hygieneProduction: Prisma.$HygieneProductionPayload<ExtArgs>[]
      dentistProduction: Prisma.$DentistProductionPayload<ExtArgs>[]
      locationFinancials: Prisma.$LocationFinancialPayload<ExtArgs>[]
      clinic: Prisma.$ClinicPayload<ExtArgs>
      provider: Prisma.$ProviderPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      spreadsheetId: string
      sheetName: string
      lastSyncedAt: Date | null
      syncFrequency: string
      connectionStatus: string
      appScriptId: string | null
      accessToken: string
      refreshToken: string | null
      expiryDate: Date | null
      createdAt: Date
      updatedAt: Date
      clinicId: string
      providerId: string | null
    }, ExtArgs["result"]["dataSource"]>
    composites: {}
  }

  type DataSourceGetPayload<S extends boolean | null | undefined | DataSourceDefaultArgs> = $Result.GetResult<Prisma.$DataSourcePayload, S>

  type DataSourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DataSourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DataSourceCountAggregateInputType | true
    }

  export interface DataSourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataSource'], meta: { name: 'DataSource' } }
    /**
     * Find zero or one DataSource that matches the filter.
     * @param {DataSourceFindUniqueArgs} args - Arguments to find a DataSource
     * @example
     * // Get one DataSource
     * const dataSource = await prisma.dataSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataSourceFindUniqueArgs>(args: SelectSubset<T, DataSourceFindUniqueArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DataSource that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DataSourceFindUniqueOrThrowArgs} args - Arguments to find a DataSource
     * @example
     * // Get one DataSource
     * const dataSource = await prisma.dataSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataSourceFindUniqueOrThrowArgs>(args: SelectSubset<T, DataSourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceFindFirstArgs} args - Arguments to find a DataSource
     * @example
     * // Get one DataSource
     * const dataSource = await prisma.dataSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataSourceFindFirstArgs>(args?: SelectSubset<T, DataSourceFindFirstArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataSource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceFindFirstOrThrowArgs} args - Arguments to find a DataSource
     * @example
     * // Get one DataSource
     * const dataSource = await prisma.dataSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataSourceFindFirstOrThrowArgs>(args?: SelectSubset<T, DataSourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DataSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataSources
     * const dataSources = await prisma.dataSource.findMany()
     * 
     * // Get first 10 DataSources
     * const dataSources = await prisma.dataSource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataSourceWithIdOnly = await prisma.dataSource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataSourceFindManyArgs>(args?: SelectSubset<T, DataSourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DataSource.
     * @param {DataSourceCreateArgs} args - Arguments to create a DataSource.
     * @example
     * // Create one DataSource
     * const DataSource = await prisma.dataSource.create({
     *   data: {
     *     // ... data to create a DataSource
     *   }
     * })
     * 
     */
    create<T extends DataSourceCreateArgs>(args: SelectSubset<T, DataSourceCreateArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DataSources.
     * @param {DataSourceCreateManyArgs} args - Arguments to create many DataSources.
     * @example
     * // Create many DataSources
     * const dataSource = await prisma.dataSource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataSourceCreateManyArgs>(args?: SelectSubset<T, DataSourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataSources and returns the data saved in the database.
     * @param {DataSourceCreateManyAndReturnArgs} args - Arguments to create many DataSources.
     * @example
     * // Create many DataSources
     * const dataSource = await prisma.dataSource.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataSources and only return the `id`
     * const dataSourceWithIdOnly = await prisma.dataSource.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataSourceCreateManyAndReturnArgs>(args?: SelectSubset<T, DataSourceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DataSource.
     * @param {DataSourceDeleteArgs} args - Arguments to delete one DataSource.
     * @example
     * // Delete one DataSource
     * const DataSource = await prisma.dataSource.delete({
     *   where: {
     *     // ... filter to delete one DataSource
     *   }
     * })
     * 
     */
    delete<T extends DataSourceDeleteArgs>(args: SelectSubset<T, DataSourceDeleteArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DataSource.
     * @param {DataSourceUpdateArgs} args - Arguments to update one DataSource.
     * @example
     * // Update one DataSource
     * const dataSource = await prisma.dataSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataSourceUpdateArgs>(args: SelectSubset<T, DataSourceUpdateArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DataSources.
     * @param {DataSourceDeleteManyArgs} args - Arguments to filter DataSources to delete.
     * @example
     * // Delete a few DataSources
     * const { count } = await prisma.dataSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataSourceDeleteManyArgs>(args?: SelectSubset<T, DataSourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataSources
     * const dataSource = await prisma.dataSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataSourceUpdateManyArgs>(args: SelectSubset<T, DataSourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataSources and returns the data updated in the database.
     * @param {DataSourceUpdateManyAndReturnArgs} args - Arguments to update many DataSources.
     * @example
     * // Update many DataSources
     * const dataSource = await prisma.dataSource.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DataSources and only return the `id`
     * const dataSourceWithIdOnly = await prisma.dataSource.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DataSourceUpdateManyAndReturnArgs>(args: SelectSubset<T, DataSourceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DataSource.
     * @param {DataSourceUpsertArgs} args - Arguments to update or create a DataSource.
     * @example
     * // Update or create a DataSource
     * const dataSource = await prisma.dataSource.upsert({
     *   create: {
     *     // ... data to create a DataSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataSource we want to update
     *   }
     * })
     */
    upsert<T extends DataSourceUpsertArgs>(args: SelectSubset<T, DataSourceUpsertArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DataSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceCountArgs} args - Arguments to filter DataSources to count.
     * @example
     * // Count the number of DataSources
     * const count = await prisma.dataSource.count({
     *   where: {
     *     // ... the filter for the DataSources we want to count
     *   }
     * })
    **/
    count<T extends DataSourceCountArgs>(
      args?: Subset<T, DataSourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataSourceAggregateArgs>(args: Subset<T, DataSourceAggregateArgs>): Prisma.PrismaPromise<GetDataSourceAggregateType<T>>

    /**
     * Group by DataSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataSourceGroupByArgs['orderBy'] }
        : { orderBy?: DataSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataSource model
   */
  readonly fields: DataSourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataSourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    columnMappings<T extends DataSource$columnMappingsArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$columnMappingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metrics<T extends DataSource$metricsArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hygieneProduction<T extends DataSource$hygieneProductionArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$hygieneProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dentistProduction<T extends DataSource$dentistProductionArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$dentistProductionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locationFinancials<T extends DataSource$locationFinancialsArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$locationFinancialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationFinancialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends DataSource$providerArgs<ExtArgs> = {}>(args?: Subset<T, DataSource$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataSource model
   */
  interface DataSourceFieldRefs {
    readonly id: FieldRef<"DataSource", 'String'>
    readonly name: FieldRef<"DataSource", 'String'>
    readonly spreadsheetId: FieldRef<"DataSource", 'String'>
    readonly sheetName: FieldRef<"DataSource", 'String'>
    readonly lastSyncedAt: FieldRef<"DataSource", 'DateTime'>
    readonly syncFrequency: FieldRef<"DataSource", 'String'>
    readonly connectionStatus: FieldRef<"DataSource", 'String'>
    readonly appScriptId: FieldRef<"DataSource", 'String'>
    readonly accessToken: FieldRef<"DataSource", 'String'>
    readonly refreshToken: FieldRef<"DataSource", 'String'>
    readonly expiryDate: FieldRef<"DataSource", 'DateTime'>
    readonly createdAt: FieldRef<"DataSource", 'DateTime'>
    readonly updatedAt: FieldRef<"DataSource", 'DateTime'>
    readonly clinicId: FieldRef<"DataSource", 'String'>
    readonly providerId: FieldRef<"DataSource", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DataSource findUnique
   */
  export type DataSourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter, which DataSource to fetch.
     */
    where: DataSourceWhereUniqueInput
  }

  /**
   * DataSource findUniqueOrThrow
   */
  export type DataSourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter, which DataSource to fetch.
     */
    where: DataSourceWhereUniqueInput
  }

  /**
   * DataSource findFirst
   */
  export type DataSourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter, which DataSource to fetch.
     */
    where?: DataSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSources to fetch.
     */
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataSources.
     */
    cursor?: DataSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataSources.
     */
    distinct?: DataSourceScalarFieldEnum | DataSourceScalarFieldEnum[]
  }

  /**
   * DataSource findFirstOrThrow
   */
  export type DataSourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter, which DataSource to fetch.
     */
    where?: DataSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSources to fetch.
     */
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataSources.
     */
    cursor?: DataSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataSources.
     */
    distinct?: DataSourceScalarFieldEnum | DataSourceScalarFieldEnum[]
  }

  /**
   * DataSource findMany
   */
  export type DataSourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter, which DataSources to fetch.
     */
    where?: DataSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataSources to fetch.
     */
    orderBy?: DataSourceOrderByWithRelationInput | DataSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataSources.
     */
    cursor?: DataSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataSources.
     */
    skip?: number
    distinct?: DataSourceScalarFieldEnum | DataSourceScalarFieldEnum[]
  }

  /**
   * DataSource create
   */
  export type DataSourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * The data needed to create a DataSource.
     */
    data: XOR<DataSourceCreateInput, DataSourceUncheckedCreateInput>
  }

  /**
   * DataSource createMany
   */
  export type DataSourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataSources.
     */
    data: DataSourceCreateManyInput | DataSourceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataSource createManyAndReturn
   */
  export type DataSourceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * The data used to create many DataSources.
     */
    data: DataSourceCreateManyInput | DataSourceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataSource update
   */
  export type DataSourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * The data needed to update a DataSource.
     */
    data: XOR<DataSourceUpdateInput, DataSourceUncheckedUpdateInput>
    /**
     * Choose, which DataSource to update.
     */
    where: DataSourceWhereUniqueInput
  }

  /**
   * DataSource updateMany
   */
  export type DataSourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataSources.
     */
    data: XOR<DataSourceUpdateManyMutationInput, DataSourceUncheckedUpdateManyInput>
    /**
     * Filter which DataSources to update
     */
    where?: DataSourceWhereInput
    /**
     * Limit how many DataSources to update.
     */
    limit?: number
  }

  /**
   * DataSource updateManyAndReturn
   */
  export type DataSourceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * The data used to update DataSources.
     */
    data: XOR<DataSourceUpdateManyMutationInput, DataSourceUncheckedUpdateManyInput>
    /**
     * Filter which DataSources to update
     */
    where?: DataSourceWhereInput
    /**
     * Limit how many DataSources to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataSource upsert
   */
  export type DataSourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * The filter to search for the DataSource to update in case it exists.
     */
    where: DataSourceWhereUniqueInput
    /**
     * In case the DataSource found by the `where` argument doesn't exist, create a new DataSource with this data.
     */
    create: XOR<DataSourceCreateInput, DataSourceUncheckedCreateInput>
    /**
     * In case the DataSource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataSourceUpdateInput, DataSourceUncheckedUpdateInput>
  }

  /**
   * DataSource delete
   */
  export type DataSourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    /**
     * Filter which DataSource to delete.
     */
    where: DataSourceWhereUniqueInput
  }

  /**
   * DataSource deleteMany
   */
  export type DataSourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataSources to delete
     */
    where?: DataSourceWhereInput
    /**
     * Limit how many DataSources to delete.
     */
    limit?: number
  }

  /**
   * DataSource.columnMappings
   */
  export type DataSource$columnMappingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    where?: ColumnMappingWhereInput
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    cursor?: ColumnMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColumnMappingScalarFieldEnum | ColumnMappingScalarFieldEnum[]
  }

  /**
   * DataSource.metrics
   */
  export type DataSource$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    where?: MetricValueWhereInput
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    cursor?: MetricValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * DataSource.hygieneProduction
   */
  export type DataSource$hygieneProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    where?: HygieneProductionWhereInput
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    cursor?: HygieneProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * DataSource.dentistProduction
   */
  export type DataSource$dentistProductionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    where?: DentistProductionWhereInput
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    cursor?: DentistProductionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * DataSource.locationFinancials
   */
  export type DataSource$locationFinancialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationFinancial
     */
    select?: LocationFinancialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LocationFinancial
     */
    omit?: LocationFinancialOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationFinancialInclude<ExtArgs> | null
    where?: LocationFinancialWhereInput
    orderBy?: LocationFinancialOrderByWithRelationInput | LocationFinancialOrderByWithRelationInput[]
    cursor?: LocationFinancialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationFinancialScalarFieldEnum | LocationFinancialScalarFieldEnum[]
  }

  /**
   * DataSource.provider
   */
  export type DataSource$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * DataSource without action
   */
  export type DataSourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
  }


  /**
   * Model ColumnMapping
   */

  export type AggregateColumnMapping = {
    _count: ColumnMappingCountAggregateOutputType | null
    _min: ColumnMappingMinAggregateOutputType | null
    _max: ColumnMappingMaxAggregateOutputType | null
  }

  export type ColumnMappingMinAggregateOutputType = {
    id: string | null
    columnName: string | null
    transformationRule: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dataSourceId: string | null
    metricDefinitionId: string | null
  }

  export type ColumnMappingMaxAggregateOutputType = {
    id: string | null
    columnName: string | null
    transformationRule: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dataSourceId: string | null
    metricDefinitionId: string | null
  }

  export type ColumnMappingCountAggregateOutputType = {
    id: number
    columnName: number
    transformationRule: number
    createdAt: number
    updatedAt: number
    dataSourceId: number
    metricDefinitionId: number
    _all: number
  }


  export type ColumnMappingMinAggregateInputType = {
    id?: true
    columnName?: true
    transformationRule?: true
    createdAt?: true
    updatedAt?: true
    dataSourceId?: true
    metricDefinitionId?: true
  }

  export type ColumnMappingMaxAggregateInputType = {
    id?: true
    columnName?: true
    transformationRule?: true
    createdAt?: true
    updatedAt?: true
    dataSourceId?: true
    metricDefinitionId?: true
  }

  export type ColumnMappingCountAggregateInputType = {
    id?: true
    columnName?: true
    transformationRule?: true
    createdAt?: true
    updatedAt?: true
    dataSourceId?: true
    metricDefinitionId?: true
    _all?: true
  }

  export type ColumnMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColumnMapping to aggregate.
     */
    where?: ColumnMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappings to fetch.
     */
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColumnMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ColumnMappings
    **/
    _count?: true | ColumnMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColumnMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColumnMappingMaxAggregateInputType
  }

  export type GetColumnMappingAggregateType<T extends ColumnMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateColumnMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColumnMapping[P]>
      : GetScalarType<T[P], AggregateColumnMapping[P]>
  }




  export type ColumnMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnMappingWhereInput
    orderBy?: ColumnMappingOrderByWithAggregationInput | ColumnMappingOrderByWithAggregationInput[]
    by: ColumnMappingScalarFieldEnum[] | ColumnMappingScalarFieldEnum
    having?: ColumnMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColumnMappingCountAggregateInputType | true
    _min?: ColumnMappingMinAggregateInputType
    _max?: ColumnMappingMaxAggregateInputType
  }

  export type ColumnMappingGroupByOutputType = {
    id: string
    columnName: string
    transformationRule: string | null
    createdAt: Date
    updatedAt: Date
    dataSourceId: string
    metricDefinitionId: string
    _count: ColumnMappingCountAggregateOutputType | null
    _min: ColumnMappingMinAggregateOutputType | null
    _max: ColumnMappingMaxAggregateOutputType | null
  }

  type GetColumnMappingGroupByPayload<T extends ColumnMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColumnMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColumnMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColumnMappingGroupByOutputType[P]>
            : GetScalarType<T[P], ColumnMappingGroupByOutputType[P]>
        }
      >
    >


  export type ColumnMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    columnName?: boolean
    transformationRule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataSourceId?: boolean
    metricDefinitionId?: boolean
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["columnMapping"]>

  export type ColumnMappingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    columnName?: boolean
    transformationRule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataSourceId?: boolean
    metricDefinitionId?: boolean
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["columnMapping"]>

  export type ColumnMappingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    columnName?: boolean
    transformationRule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataSourceId?: boolean
    metricDefinitionId?: boolean
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["columnMapping"]>

  export type ColumnMappingSelectScalar = {
    id?: boolean
    columnName?: boolean
    transformationRule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dataSourceId?: boolean
    metricDefinitionId?: boolean
  }

  export type ColumnMappingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "columnName" | "transformationRule" | "createdAt" | "updatedAt" | "dataSourceId" | "metricDefinitionId", ExtArgs["result"]["columnMapping"]>
  export type ColumnMappingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }
  export type ColumnMappingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }
  export type ColumnMappingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dataSource?: boolean | DataSourceDefaultArgs<ExtArgs>
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
  }

  export type $ColumnMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ColumnMapping"
    objects: {
      dataSource: Prisma.$DataSourcePayload<ExtArgs>
      metricDefinition: Prisma.$MetricDefinitionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      columnName: string
      transformationRule: string | null
      createdAt: Date
      updatedAt: Date
      dataSourceId: string
      metricDefinitionId: string
    }, ExtArgs["result"]["columnMapping"]>
    composites: {}
  }

  type ColumnMappingGetPayload<S extends boolean | null | undefined | ColumnMappingDefaultArgs> = $Result.GetResult<Prisma.$ColumnMappingPayload, S>

  type ColumnMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColumnMappingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColumnMappingCountAggregateInputType | true
    }

  export interface ColumnMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ColumnMapping'], meta: { name: 'ColumnMapping' } }
    /**
     * Find zero or one ColumnMapping that matches the filter.
     * @param {ColumnMappingFindUniqueArgs} args - Arguments to find a ColumnMapping
     * @example
     * // Get one ColumnMapping
     * const columnMapping = await prisma.columnMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColumnMappingFindUniqueArgs>(args: SelectSubset<T, ColumnMappingFindUniqueArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ColumnMapping that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColumnMappingFindUniqueOrThrowArgs} args - Arguments to find a ColumnMapping
     * @example
     * // Get one ColumnMapping
     * const columnMapping = await prisma.columnMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColumnMappingFindUniqueOrThrowArgs>(args: SelectSubset<T, ColumnMappingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColumnMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingFindFirstArgs} args - Arguments to find a ColumnMapping
     * @example
     * // Get one ColumnMapping
     * const columnMapping = await prisma.columnMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColumnMappingFindFirstArgs>(args?: SelectSubset<T, ColumnMappingFindFirstArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColumnMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingFindFirstOrThrowArgs} args - Arguments to find a ColumnMapping
     * @example
     * // Get one ColumnMapping
     * const columnMapping = await prisma.columnMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColumnMappingFindFirstOrThrowArgs>(args?: SelectSubset<T, ColumnMappingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ColumnMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ColumnMappings
     * const columnMappings = await prisma.columnMapping.findMany()
     * 
     * // Get first 10 ColumnMappings
     * const columnMappings = await prisma.columnMapping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const columnMappingWithIdOnly = await prisma.columnMapping.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColumnMappingFindManyArgs>(args?: SelectSubset<T, ColumnMappingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ColumnMapping.
     * @param {ColumnMappingCreateArgs} args - Arguments to create a ColumnMapping.
     * @example
     * // Create one ColumnMapping
     * const ColumnMapping = await prisma.columnMapping.create({
     *   data: {
     *     // ... data to create a ColumnMapping
     *   }
     * })
     * 
     */
    create<T extends ColumnMappingCreateArgs>(args: SelectSubset<T, ColumnMappingCreateArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ColumnMappings.
     * @param {ColumnMappingCreateManyArgs} args - Arguments to create many ColumnMappings.
     * @example
     * // Create many ColumnMappings
     * const columnMapping = await prisma.columnMapping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColumnMappingCreateManyArgs>(args?: SelectSubset<T, ColumnMappingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ColumnMappings and returns the data saved in the database.
     * @param {ColumnMappingCreateManyAndReturnArgs} args - Arguments to create many ColumnMappings.
     * @example
     * // Create many ColumnMappings
     * const columnMapping = await prisma.columnMapping.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ColumnMappings and only return the `id`
     * const columnMappingWithIdOnly = await prisma.columnMapping.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ColumnMappingCreateManyAndReturnArgs>(args?: SelectSubset<T, ColumnMappingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ColumnMapping.
     * @param {ColumnMappingDeleteArgs} args - Arguments to delete one ColumnMapping.
     * @example
     * // Delete one ColumnMapping
     * const ColumnMapping = await prisma.columnMapping.delete({
     *   where: {
     *     // ... filter to delete one ColumnMapping
     *   }
     * })
     * 
     */
    delete<T extends ColumnMappingDeleteArgs>(args: SelectSubset<T, ColumnMappingDeleteArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ColumnMapping.
     * @param {ColumnMappingUpdateArgs} args - Arguments to update one ColumnMapping.
     * @example
     * // Update one ColumnMapping
     * const columnMapping = await prisma.columnMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColumnMappingUpdateArgs>(args: SelectSubset<T, ColumnMappingUpdateArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ColumnMappings.
     * @param {ColumnMappingDeleteManyArgs} args - Arguments to filter ColumnMappings to delete.
     * @example
     * // Delete a few ColumnMappings
     * const { count } = await prisma.columnMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColumnMappingDeleteManyArgs>(args?: SelectSubset<T, ColumnMappingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColumnMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ColumnMappings
     * const columnMapping = await prisma.columnMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColumnMappingUpdateManyArgs>(args: SelectSubset<T, ColumnMappingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColumnMappings and returns the data updated in the database.
     * @param {ColumnMappingUpdateManyAndReturnArgs} args - Arguments to update many ColumnMappings.
     * @example
     * // Update many ColumnMappings
     * const columnMapping = await prisma.columnMapping.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ColumnMappings and only return the `id`
     * const columnMappingWithIdOnly = await prisma.columnMapping.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ColumnMappingUpdateManyAndReturnArgs>(args: SelectSubset<T, ColumnMappingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ColumnMapping.
     * @param {ColumnMappingUpsertArgs} args - Arguments to update or create a ColumnMapping.
     * @example
     * // Update or create a ColumnMapping
     * const columnMapping = await prisma.columnMapping.upsert({
     *   create: {
     *     // ... data to create a ColumnMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ColumnMapping we want to update
     *   }
     * })
     */
    upsert<T extends ColumnMappingUpsertArgs>(args: SelectSubset<T, ColumnMappingUpsertArgs<ExtArgs>>): Prisma__ColumnMappingClient<$Result.GetResult<Prisma.$ColumnMappingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ColumnMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingCountArgs} args - Arguments to filter ColumnMappings to count.
     * @example
     * // Count the number of ColumnMappings
     * const count = await prisma.columnMapping.count({
     *   where: {
     *     // ... the filter for the ColumnMappings we want to count
     *   }
     * })
    **/
    count<T extends ColumnMappingCountArgs>(
      args?: Subset<T, ColumnMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColumnMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ColumnMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColumnMappingAggregateArgs>(args: Subset<T, ColumnMappingAggregateArgs>): Prisma.PrismaPromise<GetColumnMappingAggregateType<T>>

    /**
     * Group by ColumnMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColumnMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColumnMappingGroupByArgs['orderBy'] }
        : { orderBy?: ColumnMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColumnMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColumnMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ColumnMapping model
   */
  readonly fields: ColumnMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ColumnMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColumnMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dataSource<T extends DataSourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DataSourceDefaultArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metricDefinition<T extends MetricDefinitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinitionDefaultArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ColumnMapping model
   */
  interface ColumnMappingFieldRefs {
    readonly id: FieldRef<"ColumnMapping", 'String'>
    readonly columnName: FieldRef<"ColumnMapping", 'String'>
    readonly transformationRule: FieldRef<"ColumnMapping", 'String'>
    readonly createdAt: FieldRef<"ColumnMapping", 'DateTime'>
    readonly updatedAt: FieldRef<"ColumnMapping", 'DateTime'>
    readonly dataSourceId: FieldRef<"ColumnMapping", 'String'>
    readonly metricDefinitionId: FieldRef<"ColumnMapping", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ColumnMapping findUnique
   */
  export type ColumnMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter, which ColumnMapping to fetch.
     */
    where: ColumnMappingWhereUniqueInput
  }

  /**
   * ColumnMapping findUniqueOrThrow
   */
  export type ColumnMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter, which ColumnMapping to fetch.
     */
    where: ColumnMappingWhereUniqueInput
  }

  /**
   * ColumnMapping findFirst
   */
  export type ColumnMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter, which ColumnMapping to fetch.
     */
    where?: ColumnMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappings to fetch.
     */
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColumnMappings.
     */
    cursor?: ColumnMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColumnMappings.
     */
    distinct?: ColumnMappingScalarFieldEnum | ColumnMappingScalarFieldEnum[]
  }

  /**
   * ColumnMapping findFirstOrThrow
   */
  export type ColumnMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter, which ColumnMapping to fetch.
     */
    where?: ColumnMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappings to fetch.
     */
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColumnMappings.
     */
    cursor?: ColumnMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColumnMappings.
     */
    distinct?: ColumnMappingScalarFieldEnum | ColumnMappingScalarFieldEnum[]
  }

  /**
   * ColumnMapping findMany
   */
  export type ColumnMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter, which ColumnMappings to fetch.
     */
    where?: ColumnMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappings to fetch.
     */
    orderBy?: ColumnMappingOrderByWithRelationInput | ColumnMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ColumnMappings.
     */
    cursor?: ColumnMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappings.
     */
    skip?: number
    distinct?: ColumnMappingScalarFieldEnum | ColumnMappingScalarFieldEnum[]
  }

  /**
   * ColumnMapping create
   */
  export type ColumnMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * The data needed to create a ColumnMapping.
     */
    data: XOR<ColumnMappingCreateInput, ColumnMappingUncheckedCreateInput>
  }

  /**
   * ColumnMapping createMany
   */
  export type ColumnMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ColumnMappings.
     */
    data: ColumnMappingCreateManyInput | ColumnMappingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ColumnMapping createManyAndReturn
   */
  export type ColumnMappingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * The data used to create many ColumnMappings.
     */
    data: ColumnMappingCreateManyInput | ColumnMappingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ColumnMapping update
   */
  export type ColumnMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * The data needed to update a ColumnMapping.
     */
    data: XOR<ColumnMappingUpdateInput, ColumnMappingUncheckedUpdateInput>
    /**
     * Choose, which ColumnMapping to update.
     */
    where: ColumnMappingWhereUniqueInput
  }

  /**
   * ColumnMapping updateMany
   */
  export type ColumnMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ColumnMappings.
     */
    data: XOR<ColumnMappingUpdateManyMutationInput, ColumnMappingUncheckedUpdateManyInput>
    /**
     * Filter which ColumnMappings to update
     */
    where?: ColumnMappingWhereInput
    /**
     * Limit how many ColumnMappings to update.
     */
    limit?: number
  }

  /**
   * ColumnMapping updateManyAndReturn
   */
  export type ColumnMappingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * The data used to update ColumnMappings.
     */
    data: XOR<ColumnMappingUpdateManyMutationInput, ColumnMappingUncheckedUpdateManyInput>
    /**
     * Filter which ColumnMappings to update
     */
    where?: ColumnMappingWhereInput
    /**
     * Limit how many ColumnMappings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ColumnMapping upsert
   */
  export type ColumnMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * The filter to search for the ColumnMapping to update in case it exists.
     */
    where: ColumnMappingWhereUniqueInput
    /**
     * In case the ColumnMapping found by the `where` argument doesn't exist, create a new ColumnMapping with this data.
     */
    create: XOR<ColumnMappingCreateInput, ColumnMappingUncheckedCreateInput>
    /**
     * In case the ColumnMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColumnMappingUpdateInput, ColumnMappingUncheckedUpdateInput>
  }

  /**
   * ColumnMapping delete
   */
  export type ColumnMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
    /**
     * Filter which ColumnMapping to delete.
     */
    where: ColumnMappingWhereUniqueInput
  }

  /**
   * ColumnMapping deleteMany
   */
  export type ColumnMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColumnMappings to delete
     */
    where?: ColumnMappingWhereInput
    /**
     * Limit how many ColumnMappings to delete.
     */
    limit?: number
  }

  /**
   * ColumnMapping without action
   */
  export type ColumnMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMapping
     */
    select?: ColumnMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMapping
     */
    omit?: ColumnMappingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnMappingInclude<ExtArgs> | null
  }


  /**
   * Model MetricValue
   */

  export type AggregateMetricValue = {
    _count: MetricValueCountAggregateOutputType | null
    _min: MetricValueMinAggregateOutputType | null
    _max: MetricValueMaxAggregateOutputType | null
  }

  export type MetricValueMinAggregateOutputType = {
    id: string | null
    date: Date | null
    value: string | null
    sourceType: string | null
    sourceSheet: string | null
    externalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    metricDefinitionId: string | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type MetricValueMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    value: string | null
    sourceType: string | null
    sourceSheet: string | null
    externalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    metricDefinitionId: string | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type MetricValueCountAggregateOutputType = {
    id: number
    date: number
    value: number
    sourceType: number
    sourceSheet: number
    externalId: number
    createdAt: number
    updatedAt: number
    metricDefinitionId: number
    clinicId: number
    providerId: number
    dataSourceId: number
    _all: number
  }


  export type MetricValueMinAggregateInputType = {
    id?: true
    date?: true
    value?: true
    sourceType?: true
    sourceSheet?: true
    externalId?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type MetricValueMaxAggregateInputType = {
    id?: true
    date?: true
    value?: true
    sourceType?: true
    sourceSheet?: true
    externalId?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type MetricValueCountAggregateInputType = {
    id?: true
    date?: true
    value?: true
    sourceType?: true
    sourceSheet?: true
    externalId?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
    _all?: true
  }

  export type MetricValueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricValue to aggregate.
     */
    where?: MetricValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricValues to fetch.
     */
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricValues
    **/
    _count?: true | MetricValueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricValueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricValueMaxAggregateInputType
  }

  export type GetMetricValueAggregateType<T extends MetricValueAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricValue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricValue[P]>
      : GetScalarType<T[P], AggregateMetricValue[P]>
  }




  export type MetricValueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricValueWhereInput
    orderBy?: MetricValueOrderByWithAggregationInput | MetricValueOrderByWithAggregationInput[]
    by: MetricValueScalarFieldEnum[] | MetricValueScalarFieldEnum
    having?: MetricValueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricValueCountAggregateInputType | true
    _min?: MetricValueMinAggregateInputType
    _max?: MetricValueMaxAggregateInputType
  }

  export type MetricValueGroupByOutputType = {
    id: string
    date: Date
    value: string
    sourceType: string
    sourceSheet: string | null
    externalId: string | null
    createdAt: Date
    updatedAt: Date
    metricDefinitionId: string
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
    _count: MetricValueCountAggregateOutputType | null
    _min: MetricValueMinAggregateOutputType | null
    _max: MetricValueMaxAggregateOutputType | null
  }

  type GetMetricValueGroupByPayload<T extends MetricValueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricValueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricValueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricValueGroupByOutputType[P]>
            : GetScalarType<T[P], MetricValueGroupByOutputType[P]>
        }
      >
    >


  export type MetricValueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    value?: boolean
    sourceType?: boolean
    sourceSheet?: boolean
    externalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["metricValue"]>

  export type MetricValueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    value?: boolean
    sourceType?: boolean
    sourceSheet?: boolean
    externalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["metricValue"]>

  export type MetricValueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    value?: boolean
    sourceType?: boolean
    sourceSheet?: boolean
    externalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["metricValue"]>

  export type MetricValueSelectScalar = {
    id?: boolean
    date?: boolean
    value?: boolean
    sourceType?: boolean
    sourceSheet?: boolean
    externalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
  }

  export type MetricValueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "value" | "sourceType" | "sourceSheet" | "externalId" | "createdAt" | "updatedAt" | "metricDefinitionId" | "clinicId" | "providerId" | "dataSourceId", ExtArgs["result"]["metricValue"]>
  export type MetricValueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }
  export type MetricValueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }
  export type MetricValueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | MetricValue$clinicArgs<ExtArgs>
    provider?: boolean | MetricValue$providerArgs<ExtArgs>
    dataSource?: boolean | MetricValue$dataSourceArgs<ExtArgs>
  }

  export type $MetricValuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricValue"
    objects: {
      metricDefinition: Prisma.$MetricDefinitionPayload<ExtArgs>
      clinic: Prisma.$ClinicPayload<ExtArgs> | null
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      dataSource: Prisma.$DataSourcePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      value: string
      sourceType: string
      sourceSheet: string | null
      externalId: string | null
      createdAt: Date
      updatedAt: Date
      metricDefinitionId: string
      clinicId: string | null
      providerId: string | null
      dataSourceId: string | null
    }, ExtArgs["result"]["metricValue"]>
    composites: {}
  }

  type MetricValueGetPayload<S extends boolean | null | undefined | MetricValueDefaultArgs> = $Result.GetResult<Prisma.$MetricValuePayload, S>

  type MetricValueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricValueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricValueCountAggregateInputType | true
    }

  export interface MetricValueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricValue'], meta: { name: 'MetricValue' } }
    /**
     * Find zero or one MetricValue that matches the filter.
     * @param {MetricValueFindUniqueArgs} args - Arguments to find a MetricValue
     * @example
     * // Get one MetricValue
     * const metricValue = await prisma.metricValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricValueFindUniqueArgs>(args: SelectSubset<T, MetricValueFindUniqueArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetricValue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricValueFindUniqueOrThrowArgs} args - Arguments to find a MetricValue
     * @example
     * // Get one MetricValue
     * const metricValue = await prisma.metricValue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricValueFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricValueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricValue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueFindFirstArgs} args - Arguments to find a MetricValue
     * @example
     * // Get one MetricValue
     * const metricValue = await prisma.metricValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricValueFindFirstArgs>(args?: SelectSubset<T, MetricValueFindFirstArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricValue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueFindFirstOrThrowArgs} args - Arguments to find a MetricValue
     * @example
     * // Get one MetricValue
     * const metricValue = await prisma.metricValue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricValueFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricValueFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetricValues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricValues
     * const metricValues = await prisma.metricValue.findMany()
     * 
     * // Get first 10 MetricValues
     * const metricValues = await prisma.metricValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricValueWithIdOnly = await prisma.metricValue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricValueFindManyArgs>(args?: SelectSubset<T, MetricValueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetricValue.
     * @param {MetricValueCreateArgs} args - Arguments to create a MetricValue.
     * @example
     * // Create one MetricValue
     * const MetricValue = await prisma.metricValue.create({
     *   data: {
     *     // ... data to create a MetricValue
     *   }
     * })
     * 
     */
    create<T extends MetricValueCreateArgs>(args: SelectSubset<T, MetricValueCreateArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetricValues.
     * @param {MetricValueCreateManyArgs} args - Arguments to create many MetricValues.
     * @example
     * // Create many MetricValues
     * const metricValue = await prisma.metricValue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricValueCreateManyArgs>(args?: SelectSubset<T, MetricValueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricValues and returns the data saved in the database.
     * @param {MetricValueCreateManyAndReturnArgs} args - Arguments to create many MetricValues.
     * @example
     * // Create many MetricValues
     * const metricValue = await prisma.metricValue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricValues and only return the `id`
     * const metricValueWithIdOnly = await prisma.metricValue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricValueCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricValueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetricValue.
     * @param {MetricValueDeleteArgs} args - Arguments to delete one MetricValue.
     * @example
     * // Delete one MetricValue
     * const MetricValue = await prisma.metricValue.delete({
     *   where: {
     *     // ... filter to delete one MetricValue
     *   }
     * })
     * 
     */
    delete<T extends MetricValueDeleteArgs>(args: SelectSubset<T, MetricValueDeleteArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetricValue.
     * @param {MetricValueUpdateArgs} args - Arguments to update one MetricValue.
     * @example
     * // Update one MetricValue
     * const metricValue = await prisma.metricValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricValueUpdateArgs>(args: SelectSubset<T, MetricValueUpdateArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetricValues.
     * @param {MetricValueDeleteManyArgs} args - Arguments to filter MetricValues to delete.
     * @example
     * // Delete a few MetricValues
     * const { count } = await prisma.metricValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricValueDeleteManyArgs>(args?: SelectSubset<T, MetricValueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricValues
     * const metricValue = await prisma.metricValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricValueUpdateManyArgs>(args: SelectSubset<T, MetricValueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricValues and returns the data updated in the database.
     * @param {MetricValueUpdateManyAndReturnArgs} args - Arguments to update many MetricValues.
     * @example
     * // Update many MetricValues
     * const metricValue = await prisma.metricValue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetricValues and only return the `id`
     * const metricValueWithIdOnly = await prisma.metricValue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricValueUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricValueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetricValue.
     * @param {MetricValueUpsertArgs} args - Arguments to update or create a MetricValue.
     * @example
     * // Update or create a MetricValue
     * const metricValue = await prisma.metricValue.upsert({
     *   create: {
     *     // ... data to create a MetricValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricValue we want to update
     *   }
     * })
     */
    upsert<T extends MetricValueUpsertArgs>(args: SelectSubset<T, MetricValueUpsertArgs<ExtArgs>>): Prisma__MetricValueClient<$Result.GetResult<Prisma.$MetricValuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetricValues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueCountArgs} args - Arguments to filter MetricValues to count.
     * @example
     * // Count the number of MetricValues
     * const count = await prisma.metricValue.count({
     *   where: {
     *     // ... the filter for the MetricValues we want to count
     *   }
     * })
    **/
    count<T extends MetricValueCountArgs>(
      args?: Subset<T, MetricValueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricValueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricValueAggregateArgs>(args: Subset<T, MetricValueAggregateArgs>): Prisma.PrismaPromise<GetMetricValueAggregateType<T>>

    /**
     * Group by MetricValue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricValueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricValueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricValueGroupByArgs['orderBy'] }
        : { orderBy?: MetricValueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricValueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricValueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricValue model
   */
  readonly fields: MetricValueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricValueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    metricDefinition<T extends MetricDefinitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinitionDefaultArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clinic<T extends MetricValue$clinicArgs<ExtArgs> = {}>(args?: Subset<T, MetricValue$clinicArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    provider<T extends MetricValue$providerArgs<ExtArgs> = {}>(args?: Subset<T, MetricValue$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dataSource<T extends MetricValue$dataSourceArgs<ExtArgs> = {}>(args?: Subset<T, MetricValue$dataSourceArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricValue model
   */
  interface MetricValueFieldRefs {
    readonly id: FieldRef<"MetricValue", 'String'>
    readonly date: FieldRef<"MetricValue", 'DateTime'>
    readonly value: FieldRef<"MetricValue", 'String'>
    readonly sourceType: FieldRef<"MetricValue", 'String'>
    readonly sourceSheet: FieldRef<"MetricValue", 'String'>
    readonly externalId: FieldRef<"MetricValue", 'String'>
    readonly createdAt: FieldRef<"MetricValue", 'DateTime'>
    readonly updatedAt: FieldRef<"MetricValue", 'DateTime'>
    readonly metricDefinitionId: FieldRef<"MetricValue", 'String'>
    readonly clinicId: FieldRef<"MetricValue", 'String'>
    readonly providerId: FieldRef<"MetricValue", 'String'>
    readonly dataSourceId: FieldRef<"MetricValue", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MetricValue findUnique
   */
  export type MetricValueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter, which MetricValue to fetch.
     */
    where: MetricValueWhereUniqueInput
  }

  /**
   * MetricValue findUniqueOrThrow
   */
  export type MetricValueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter, which MetricValue to fetch.
     */
    where: MetricValueWhereUniqueInput
  }

  /**
   * MetricValue findFirst
   */
  export type MetricValueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter, which MetricValue to fetch.
     */
    where?: MetricValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricValues to fetch.
     */
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricValues.
     */
    cursor?: MetricValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricValues.
     */
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * MetricValue findFirstOrThrow
   */
  export type MetricValueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter, which MetricValue to fetch.
     */
    where?: MetricValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricValues to fetch.
     */
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricValues.
     */
    cursor?: MetricValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricValues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricValues.
     */
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * MetricValue findMany
   */
  export type MetricValueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter, which MetricValues to fetch.
     */
    where?: MetricValueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricValues to fetch.
     */
    orderBy?: MetricValueOrderByWithRelationInput | MetricValueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricValues.
     */
    cursor?: MetricValueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricValues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricValues.
     */
    skip?: number
    distinct?: MetricValueScalarFieldEnum | MetricValueScalarFieldEnum[]
  }

  /**
   * MetricValue create
   */
  export type MetricValueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * The data needed to create a MetricValue.
     */
    data: XOR<MetricValueCreateInput, MetricValueUncheckedCreateInput>
  }

  /**
   * MetricValue createMany
   */
  export type MetricValueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricValues.
     */
    data: MetricValueCreateManyInput | MetricValueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricValue createManyAndReturn
   */
  export type MetricValueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * The data used to create many MetricValues.
     */
    data: MetricValueCreateManyInput | MetricValueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetricValue update
   */
  export type MetricValueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * The data needed to update a MetricValue.
     */
    data: XOR<MetricValueUpdateInput, MetricValueUncheckedUpdateInput>
    /**
     * Choose, which MetricValue to update.
     */
    where: MetricValueWhereUniqueInput
  }

  /**
   * MetricValue updateMany
   */
  export type MetricValueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricValues.
     */
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyInput>
    /**
     * Filter which MetricValues to update
     */
    where?: MetricValueWhereInput
    /**
     * Limit how many MetricValues to update.
     */
    limit?: number
  }

  /**
   * MetricValue updateManyAndReturn
   */
  export type MetricValueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * The data used to update MetricValues.
     */
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyInput>
    /**
     * Filter which MetricValues to update
     */
    where?: MetricValueWhereInput
    /**
     * Limit how many MetricValues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetricValue upsert
   */
  export type MetricValueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * The filter to search for the MetricValue to update in case it exists.
     */
    where: MetricValueWhereUniqueInput
    /**
     * In case the MetricValue found by the `where` argument doesn't exist, create a new MetricValue with this data.
     */
    create: XOR<MetricValueCreateInput, MetricValueUncheckedCreateInput>
    /**
     * In case the MetricValue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricValueUpdateInput, MetricValueUncheckedUpdateInput>
  }

  /**
   * MetricValue delete
   */
  export type MetricValueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
    /**
     * Filter which MetricValue to delete.
     */
    where: MetricValueWhereUniqueInput
  }

  /**
   * MetricValue deleteMany
   */
  export type MetricValueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricValues to delete
     */
    where?: MetricValueWhereInput
    /**
     * Limit how many MetricValues to delete.
     */
    limit?: number
  }

  /**
   * MetricValue.clinic
   */
  export type MetricValue$clinicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    where?: ClinicWhereInput
  }

  /**
   * MetricValue.provider
   */
  export type MetricValue$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * MetricValue.dataSource
   */
  export type MetricValue$dataSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
  }

  /**
   * MetricValue without action
   */
  export type MetricValueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricValue
     */
    select?: MetricValueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricValue
     */
    omit?: MetricValueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricValueInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    timePeriod: string | null
    startDate: Date | null
    endDate: Date | null
    targetValue: string | null
    createdAt: Date | null
    updatedAt: Date | null
    metricDefinitionId: string | null
    clinicId: string | null
    providerId: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    timePeriod: string | null
    startDate: Date | null
    endDate: Date | null
    targetValue: string | null
    createdAt: Date | null
    updatedAt: Date | null
    metricDefinitionId: string | null
    clinicId: string | null
    providerId: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    timePeriod: number
    startDate: number
    endDate: number
    targetValue: number
    createdAt: number
    updatedAt: number
    metricDefinitionId: number
    clinicId: number
    providerId: number
    _all: number
  }


  export type GoalMinAggregateInputType = {
    id?: true
    timePeriod?: true
    startDate?: true
    endDate?: true
    targetValue?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    timePeriod?: true
    startDate?: true
    endDate?: true
    targetValue?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    timePeriod?: true
    startDate?: true
    endDate?: true
    targetValue?: true
    createdAt?: true
    updatedAt?: true
    metricDefinitionId?: true
    clinicId?: true
    providerId?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    timePeriod: string
    startDate: Date
    endDate: Date
    targetValue: string
    createdAt: Date
    updatedAt: Date
    metricDefinitionId: string
    clinicId: string | null
    providerId: string | null
    _count: GoalCountAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timePeriod?: boolean
    startDate?: boolean
    endDate?: boolean
    targetValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timePeriod?: boolean
    startDate?: boolean
    endDate?: boolean
    targetValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timePeriod?: boolean
    startDate?: boolean
    endDate?: boolean
    targetValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    timePeriod?: boolean
    startDate?: boolean
    endDate?: boolean
    targetValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metricDefinitionId?: boolean
    clinicId?: boolean
    providerId?: boolean
  }

  export type GoalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timePeriod" | "startDate" | "endDate" | "targetValue" | "createdAt" | "updatedAt" | "metricDefinitionId" | "clinicId" | "providerId", ExtArgs["result"]["goal"]>
  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }
  export type GoalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricDefinition?: boolean | MetricDefinitionDefaultArgs<ExtArgs>
    clinic?: boolean | Goal$clinicArgs<ExtArgs>
    provider?: boolean | Goal$providerArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      metricDefinition: Prisma.$MetricDefinitionPayload<ExtArgs>
      clinic: Prisma.$ClinicPayload<ExtArgs> | null
      provider: Prisma.$ProviderPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timePeriod: string
      startDate: Date
      endDate: Date
      targetValue: string
      createdAt: Date
      updatedAt: Date
      metricDefinitionId: string
      clinicId: string | null
      providerId: string | null
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals and returns the data updated in the database.
     * @param {GoalUpdateManyAndReturnArgs} args - Arguments to update many Goals.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    metricDefinition<T extends MetricDefinitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefinitionDefaultArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clinic<T extends Goal$clinicArgs<ExtArgs> = {}>(args?: Subset<T, Goal$clinicArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    provider<T extends Goal$providerArgs<ExtArgs> = {}>(args?: Subset<T, Goal$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly timePeriod: FieldRef<"Goal", 'String'>
    readonly startDate: FieldRef<"Goal", 'DateTime'>
    readonly endDate: FieldRef<"Goal", 'DateTime'>
    readonly targetValue: FieldRef<"Goal", 'String'>
    readonly createdAt: FieldRef<"Goal", 'DateTime'>
    readonly updatedAt: FieldRef<"Goal", 'DateTime'>
    readonly metricDefinitionId: FieldRef<"Goal", 'String'>
    readonly clinicId: FieldRef<"Goal", 'String'>
    readonly providerId: FieldRef<"Goal", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
  }

  /**
   * Goal updateManyAndReturn
   */
  export type GoalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
    /**
     * Limit how many Goals to delete.
     */
    limit?: number
  }

  /**
   * Goal.clinic
   */
  export type Goal$clinicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinic
     */
    select?: ClinicSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinic
     */
    omit?: ClinicOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicInclude<ExtArgs> | null
    where?: ClinicWhereInput
  }

  /**
   * Goal.provider
   */
  export type Goal$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Goal
     */
    omit?: GoalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model Dashboard
   */

  export type AggregateDashboard = {
    _count: DashboardCountAggregateOutputType | null
    _min: DashboardMinAggregateOutputType | null
    _max: DashboardMaxAggregateOutputType | null
  }

  export type DashboardMinAggregateOutputType = {
    id: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    uuidId: string | null
    userUuidId: string | null
    userId: string | null
  }

  export type DashboardMaxAggregateOutputType = {
    id: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    uuidId: string | null
    userUuidId: string | null
    userId: string | null
  }

  export type DashboardCountAggregateOutputType = {
    id: number
    name: number
    isDefault: number
    layoutConfig: number
    createdAt: number
    updatedAt: number
    uuidId: number
    userUuidId: number
    userId: number
    _all: number
  }


  export type DashboardMinAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
    userUuidId?: true
    userId?: true
  }

  export type DashboardMaxAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
    userUuidId?: true
    userId?: true
  }

  export type DashboardCountAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    layoutConfig?: true
    createdAt?: true
    updatedAt?: true
    uuidId?: true
    userUuidId?: true
    userId?: true
    _all?: true
  }

  export type DashboardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dashboard to aggregate.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dashboards
    **/
    _count?: true | DashboardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DashboardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DashboardMaxAggregateInputType
  }

  export type GetDashboardAggregateType<T extends DashboardAggregateArgs> = {
        [P in keyof T & keyof AggregateDashboard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDashboard[P]>
      : GetScalarType<T[P], AggregateDashboard[P]>
  }




  export type DashboardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DashboardWhereInput
    orderBy?: DashboardOrderByWithAggregationInput | DashboardOrderByWithAggregationInput[]
    by: DashboardScalarFieldEnum[] | DashboardScalarFieldEnum
    having?: DashboardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DashboardCountAggregateInputType | true
    _min?: DashboardMinAggregateInputType
    _max?: DashboardMaxAggregateInputType
  }

  export type DashboardGroupByOutputType = {
    id: string
    name: string
    isDefault: boolean
    layoutConfig: JsonValue | null
    createdAt: Date
    updatedAt: Date
    uuidId: string | null
    userUuidId: string | null
    userId: string
    _count: DashboardCountAggregateOutputType | null
    _min: DashboardMinAggregateOutputType | null
    _max: DashboardMaxAggregateOutputType | null
  }

  type GetDashboardGroupByPayload<T extends DashboardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DashboardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DashboardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DashboardGroupByOutputType[P]>
            : GetScalarType<T[P], DashboardGroupByOutputType[P]>
        }
      >
    >


  export type DashboardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    layoutConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
    userUuidId?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    widgets?: boolean | Dashboard$widgetsArgs<ExtArgs>
    _count?: boolean | DashboardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    layoutConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
    userUuidId?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    layoutConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
    userUuidId?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dashboard"]>

  export type DashboardSelectScalar = {
    id?: boolean
    name?: boolean
    isDefault?: boolean
    layoutConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuidId?: boolean
    userUuidId?: boolean
    userId?: boolean
  }

  export type DashboardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isDefault" | "layoutConfig" | "createdAt" | "updatedAt" | "uuidId" | "userUuidId" | "userId", ExtArgs["result"]["dashboard"]>
  export type DashboardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    widgets?: boolean | Dashboard$widgetsArgs<ExtArgs>
    _count?: boolean | DashboardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DashboardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DashboardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DashboardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dashboard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      widgets: Prisma.$WidgetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      isDefault: boolean
      layoutConfig: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      uuidId: string | null
      userUuidId: string | null
      userId: string
    }, ExtArgs["result"]["dashboard"]>
    composites: {}
  }

  type DashboardGetPayload<S extends boolean | null | undefined | DashboardDefaultArgs> = $Result.GetResult<Prisma.$DashboardPayload, S>

  type DashboardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DashboardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DashboardCountAggregateInputType | true
    }

  export interface DashboardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dashboard'], meta: { name: 'Dashboard' } }
    /**
     * Find zero or one Dashboard that matches the filter.
     * @param {DashboardFindUniqueArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DashboardFindUniqueArgs>(args: SelectSubset<T, DashboardFindUniqueArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dashboard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DashboardFindUniqueOrThrowArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DashboardFindUniqueOrThrowArgs>(args: SelectSubset<T, DashboardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dashboard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindFirstArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DashboardFindFirstArgs>(args?: SelectSubset<T, DashboardFindFirstArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dashboard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindFirstOrThrowArgs} args - Arguments to find a Dashboard
     * @example
     * // Get one Dashboard
     * const dashboard = await prisma.dashboard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DashboardFindFirstOrThrowArgs>(args?: SelectSubset<T, DashboardFindFirstOrThrowArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dashboards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dashboards
     * const dashboards = await prisma.dashboard.findMany()
     * 
     * // Get first 10 Dashboards
     * const dashboards = await prisma.dashboard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DashboardFindManyArgs>(args?: SelectSubset<T, DashboardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dashboard.
     * @param {DashboardCreateArgs} args - Arguments to create a Dashboard.
     * @example
     * // Create one Dashboard
     * const Dashboard = await prisma.dashboard.create({
     *   data: {
     *     // ... data to create a Dashboard
     *   }
     * })
     * 
     */
    create<T extends DashboardCreateArgs>(args: SelectSubset<T, DashboardCreateArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dashboards.
     * @param {DashboardCreateManyArgs} args - Arguments to create many Dashboards.
     * @example
     * // Create many Dashboards
     * const dashboard = await prisma.dashboard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DashboardCreateManyArgs>(args?: SelectSubset<T, DashboardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dashboards and returns the data saved in the database.
     * @param {DashboardCreateManyAndReturnArgs} args - Arguments to create many Dashboards.
     * @example
     * // Create many Dashboards
     * const dashboard = await prisma.dashboard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dashboards and only return the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DashboardCreateManyAndReturnArgs>(args?: SelectSubset<T, DashboardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dashboard.
     * @param {DashboardDeleteArgs} args - Arguments to delete one Dashboard.
     * @example
     * // Delete one Dashboard
     * const Dashboard = await prisma.dashboard.delete({
     *   where: {
     *     // ... filter to delete one Dashboard
     *   }
     * })
     * 
     */
    delete<T extends DashboardDeleteArgs>(args: SelectSubset<T, DashboardDeleteArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dashboard.
     * @param {DashboardUpdateArgs} args - Arguments to update one Dashboard.
     * @example
     * // Update one Dashboard
     * const dashboard = await prisma.dashboard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DashboardUpdateArgs>(args: SelectSubset<T, DashboardUpdateArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dashboards.
     * @param {DashboardDeleteManyArgs} args - Arguments to filter Dashboards to delete.
     * @example
     * // Delete a few Dashboards
     * const { count } = await prisma.dashboard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DashboardDeleteManyArgs>(args?: SelectSubset<T, DashboardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dashboards
     * const dashboard = await prisma.dashboard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DashboardUpdateManyArgs>(args: SelectSubset<T, DashboardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dashboards and returns the data updated in the database.
     * @param {DashboardUpdateManyAndReturnArgs} args - Arguments to update many Dashboards.
     * @example
     * // Update many Dashboards
     * const dashboard = await prisma.dashboard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dashboards and only return the `id`
     * const dashboardWithIdOnly = await prisma.dashboard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DashboardUpdateManyAndReturnArgs>(args: SelectSubset<T, DashboardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dashboard.
     * @param {DashboardUpsertArgs} args - Arguments to update or create a Dashboard.
     * @example
     * // Update or create a Dashboard
     * const dashboard = await prisma.dashboard.upsert({
     *   create: {
     *     // ... data to create a Dashboard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dashboard we want to update
     *   }
     * })
     */
    upsert<T extends DashboardUpsertArgs>(args: SelectSubset<T, DashboardUpsertArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dashboards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardCountArgs} args - Arguments to filter Dashboards to count.
     * @example
     * // Count the number of Dashboards
     * const count = await prisma.dashboard.count({
     *   where: {
     *     // ... the filter for the Dashboards we want to count
     *   }
     * })
    **/
    count<T extends DashboardCountArgs>(
      args?: Subset<T, DashboardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DashboardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dashboard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DashboardAggregateArgs>(args: Subset<T, DashboardAggregateArgs>): Prisma.PrismaPromise<GetDashboardAggregateType<T>>

    /**
     * Group by Dashboard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DashboardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DashboardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DashboardGroupByArgs['orderBy'] }
        : { orderBy?: DashboardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DashboardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDashboardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dashboard model
   */
  readonly fields: DashboardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dashboard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DashboardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    widgets<T extends Dashboard$widgetsArgs<ExtArgs> = {}>(args?: Subset<T, Dashboard$widgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dashboard model
   */
  interface DashboardFieldRefs {
    readonly id: FieldRef<"Dashboard", 'String'>
    readonly name: FieldRef<"Dashboard", 'String'>
    readonly isDefault: FieldRef<"Dashboard", 'Boolean'>
    readonly layoutConfig: FieldRef<"Dashboard", 'Json'>
    readonly createdAt: FieldRef<"Dashboard", 'DateTime'>
    readonly updatedAt: FieldRef<"Dashboard", 'DateTime'>
    readonly uuidId: FieldRef<"Dashboard", 'String'>
    readonly userUuidId: FieldRef<"Dashboard", 'String'>
    readonly userId: FieldRef<"Dashboard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Dashboard findUnique
   */
  export type DashboardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard findUniqueOrThrow
   */
  export type DashboardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard findFirst
   */
  export type DashboardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dashboards.
     */
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard findFirstOrThrow
   */
  export type DashboardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboard to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dashboards.
     */
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard findMany
   */
  export type DashboardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter, which Dashboards to fetch.
     */
    where?: DashboardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dashboards to fetch.
     */
    orderBy?: DashboardOrderByWithRelationInput | DashboardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dashboards.
     */
    cursor?: DashboardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dashboards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dashboards.
     */
    skip?: number
    distinct?: DashboardScalarFieldEnum | DashboardScalarFieldEnum[]
  }

  /**
   * Dashboard create
   */
  export type DashboardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The data needed to create a Dashboard.
     */
    data: XOR<DashboardCreateInput, DashboardUncheckedCreateInput>
  }

  /**
   * Dashboard createMany
   */
  export type DashboardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dashboards.
     */
    data: DashboardCreateManyInput | DashboardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dashboard createManyAndReturn
   */
  export type DashboardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * The data used to create many Dashboards.
     */
    data: DashboardCreateManyInput | DashboardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dashboard update
   */
  export type DashboardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The data needed to update a Dashboard.
     */
    data: XOR<DashboardUpdateInput, DashboardUncheckedUpdateInput>
    /**
     * Choose, which Dashboard to update.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard updateMany
   */
  export type DashboardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dashboards.
     */
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyInput>
    /**
     * Filter which Dashboards to update
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to update.
     */
    limit?: number
  }

  /**
   * Dashboard updateManyAndReturn
   */
  export type DashboardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * The data used to update Dashboards.
     */
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyInput>
    /**
     * Filter which Dashboards to update
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dashboard upsert
   */
  export type DashboardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * The filter to search for the Dashboard to update in case it exists.
     */
    where: DashboardWhereUniqueInput
    /**
     * In case the Dashboard found by the `where` argument doesn't exist, create a new Dashboard with this data.
     */
    create: XOR<DashboardCreateInput, DashboardUncheckedCreateInput>
    /**
     * In case the Dashboard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DashboardUpdateInput, DashboardUncheckedUpdateInput>
  }

  /**
   * Dashboard delete
   */
  export type DashboardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
    /**
     * Filter which Dashboard to delete.
     */
    where: DashboardWhereUniqueInput
  }

  /**
   * Dashboard deleteMany
   */
  export type DashboardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dashboards to delete
     */
    where?: DashboardWhereInput
    /**
     * Limit how many Dashboards to delete.
     */
    limit?: number
  }

  /**
   * Dashboard.widgets
   */
  export type Dashboard$widgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    where?: WidgetWhereInput
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    cursor?: WidgetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WidgetScalarFieldEnum | WidgetScalarFieldEnum[]
  }

  /**
   * Dashboard without action
   */
  export type DashboardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dashboard
     */
    select?: DashboardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dashboard
     */
    omit?: DashboardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DashboardInclude<ExtArgs> | null
  }


  /**
   * Model Widget
   */

  export type AggregateWidget = {
    _count: WidgetCountAggregateOutputType | null
    _avg: WidgetAvgAggregateOutputType | null
    _sum: WidgetSumAggregateOutputType | null
    _min: WidgetMinAggregateOutputType | null
    _max: WidgetMaxAggregateOutputType | null
  }

  export type WidgetAvgAggregateOutputType = {
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
  }

  export type WidgetSumAggregateOutputType = {
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
  }

  export type WidgetMinAggregateOutputType = {
    id: string | null
    widgetType: string | null
    chartType: string | null
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
    dashboardId: string | null
    metricDefinitionId: string | null
  }

  export type WidgetMaxAggregateOutputType = {
    id: string | null
    widgetType: string | null
    chartType: string | null
    positionX: number | null
    positionY: number | null
    width: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
    dashboardId: string | null
    metricDefinitionId: string | null
  }

  export type WidgetCountAggregateOutputType = {
    id: number
    widgetType: number
    chartType: number
    positionX: number
    positionY: number
    width: number
    height: number
    config: number
    createdAt: number
    updatedAt: number
    dashboardId: number
    metricDefinitionId: number
    _all: number
  }


  export type WidgetAvgAggregateInputType = {
    positionX?: true
    positionY?: true
    width?: true
    height?: true
  }

  export type WidgetSumAggregateInputType = {
    positionX?: true
    positionY?: true
    width?: true
    height?: true
  }

  export type WidgetMinAggregateInputType = {
    id?: true
    widgetType?: true
    chartType?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    dashboardId?: true
    metricDefinitionId?: true
  }

  export type WidgetMaxAggregateInputType = {
    id?: true
    widgetType?: true
    chartType?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    dashboardId?: true
    metricDefinitionId?: true
  }

  export type WidgetCountAggregateInputType = {
    id?: true
    widgetType?: true
    chartType?: true
    positionX?: true
    positionY?: true
    width?: true
    height?: true
    config?: true
    createdAt?: true
    updatedAt?: true
    dashboardId?: true
    metricDefinitionId?: true
    _all?: true
  }

  export type WidgetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Widget to aggregate.
     */
    where?: WidgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Widgets to fetch.
     */
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WidgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Widgets
    **/
    _count?: true | WidgetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WidgetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WidgetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WidgetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WidgetMaxAggregateInputType
  }

  export type GetWidgetAggregateType<T extends WidgetAggregateArgs> = {
        [P in keyof T & keyof AggregateWidget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWidget[P]>
      : GetScalarType<T[P], AggregateWidget[P]>
  }




  export type WidgetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WidgetWhereInput
    orderBy?: WidgetOrderByWithAggregationInput | WidgetOrderByWithAggregationInput[]
    by: WidgetScalarFieldEnum[] | WidgetScalarFieldEnum
    having?: WidgetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WidgetCountAggregateInputType | true
    _avg?: WidgetAvgAggregateInputType
    _sum?: WidgetSumAggregateInputType
    _min?: WidgetMinAggregateInputType
    _max?: WidgetMaxAggregateInputType
  }

  export type WidgetGroupByOutputType = {
    id: string
    widgetType: string
    chartType: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config: JsonValue | null
    createdAt: Date
    updatedAt: Date
    dashboardId: string
    metricDefinitionId: string | null
    _count: WidgetCountAggregateOutputType | null
    _avg: WidgetAvgAggregateOutputType | null
    _sum: WidgetSumAggregateOutputType | null
    _min: WidgetMinAggregateOutputType | null
    _max: WidgetMaxAggregateOutputType | null
  }

  type GetWidgetGroupByPayload<T extends WidgetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WidgetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WidgetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WidgetGroupByOutputType[P]>
            : GetScalarType<T[P], WidgetGroupByOutputType[P]>
        }
      >
    >


  export type WidgetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    widgetType?: boolean
    chartType?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dashboardId?: boolean
    metricDefinitionId?: boolean
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }, ExtArgs["result"]["widget"]>

  export type WidgetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    widgetType?: boolean
    chartType?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dashboardId?: boolean
    metricDefinitionId?: boolean
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }, ExtArgs["result"]["widget"]>

  export type WidgetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    widgetType?: boolean
    chartType?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dashboardId?: boolean
    metricDefinitionId?: boolean
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }, ExtArgs["result"]["widget"]>

  export type WidgetSelectScalar = {
    id?: boolean
    widgetType?: boolean
    chartType?: boolean
    positionX?: boolean
    positionY?: boolean
    width?: boolean
    height?: boolean
    config?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dashboardId?: boolean
    metricDefinitionId?: boolean
  }

  export type WidgetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "widgetType" | "chartType" | "positionX" | "positionY" | "width" | "height" | "config" | "createdAt" | "updatedAt" | "dashboardId" | "metricDefinitionId", ExtArgs["result"]["widget"]>
  export type WidgetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }
  export type WidgetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }
  export type WidgetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dashboard?: boolean | DashboardDefaultArgs<ExtArgs>
    metricDefinition?: boolean | Widget$metricDefinitionArgs<ExtArgs>
  }

  export type $WidgetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Widget"
    objects: {
      dashboard: Prisma.$DashboardPayload<ExtArgs>
      metricDefinition: Prisma.$MetricDefinitionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      widgetType: string
      chartType: string | null
      positionX: number
      positionY: number
      width: number
      height: number
      config: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      dashboardId: string
      metricDefinitionId: string | null
    }, ExtArgs["result"]["widget"]>
    composites: {}
  }

  type WidgetGetPayload<S extends boolean | null | undefined | WidgetDefaultArgs> = $Result.GetResult<Prisma.$WidgetPayload, S>

  type WidgetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WidgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WidgetCountAggregateInputType | true
    }

  export interface WidgetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Widget'], meta: { name: 'Widget' } }
    /**
     * Find zero or one Widget that matches the filter.
     * @param {WidgetFindUniqueArgs} args - Arguments to find a Widget
     * @example
     * // Get one Widget
     * const widget = await prisma.widget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WidgetFindUniqueArgs>(args: SelectSubset<T, WidgetFindUniqueArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Widget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WidgetFindUniqueOrThrowArgs} args - Arguments to find a Widget
     * @example
     * // Get one Widget
     * const widget = await prisma.widget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WidgetFindUniqueOrThrowArgs>(args: SelectSubset<T, WidgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Widget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetFindFirstArgs} args - Arguments to find a Widget
     * @example
     * // Get one Widget
     * const widget = await prisma.widget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WidgetFindFirstArgs>(args?: SelectSubset<T, WidgetFindFirstArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Widget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetFindFirstOrThrowArgs} args - Arguments to find a Widget
     * @example
     * // Get one Widget
     * const widget = await prisma.widget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WidgetFindFirstOrThrowArgs>(args?: SelectSubset<T, WidgetFindFirstOrThrowArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Widgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Widgets
     * const widgets = await prisma.widget.findMany()
     * 
     * // Get first 10 Widgets
     * const widgets = await prisma.widget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const widgetWithIdOnly = await prisma.widget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WidgetFindManyArgs>(args?: SelectSubset<T, WidgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Widget.
     * @param {WidgetCreateArgs} args - Arguments to create a Widget.
     * @example
     * // Create one Widget
     * const Widget = await prisma.widget.create({
     *   data: {
     *     // ... data to create a Widget
     *   }
     * })
     * 
     */
    create<T extends WidgetCreateArgs>(args: SelectSubset<T, WidgetCreateArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Widgets.
     * @param {WidgetCreateManyArgs} args - Arguments to create many Widgets.
     * @example
     * // Create many Widgets
     * const widget = await prisma.widget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WidgetCreateManyArgs>(args?: SelectSubset<T, WidgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Widgets and returns the data saved in the database.
     * @param {WidgetCreateManyAndReturnArgs} args - Arguments to create many Widgets.
     * @example
     * // Create many Widgets
     * const widget = await prisma.widget.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Widgets and only return the `id`
     * const widgetWithIdOnly = await prisma.widget.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WidgetCreateManyAndReturnArgs>(args?: SelectSubset<T, WidgetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Widget.
     * @param {WidgetDeleteArgs} args - Arguments to delete one Widget.
     * @example
     * // Delete one Widget
     * const Widget = await prisma.widget.delete({
     *   where: {
     *     // ... filter to delete one Widget
     *   }
     * })
     * 
     */
    delete<T extends WidgetDeleteArgs>(args: SelectSubset<T, WidgetDeleteArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Widget.
     * @param {WidgetUpdateArgs} args - Arguments to update one Widget.
     * @example
     * // Update one Widget
     * const widget = await prisma.widget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WidgetUpdateArgs>(args: SelectSubset<T, WidgetUpdateArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Widgets.
     * @param {WidgetDeleteManyArgs} args - Arguments to filter Widgets to delete.
     * @example
     * // Delete a few Widgets
     * const { count } = await prisma.widget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WidgetDeleteManyArgs>(args?: SelectSubset<T, WidgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Widgets
     * const widget = await prisma.widget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WidgetUpdateManyArgs>(args: SelectSubset<T, WidgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Widgets and returns the data updated in the database.
     * @param {WidgetUpdateManyAndReturnArgs} args - Arguments to update many Widgets.
     * @example
     * // Update many Widgets
     * const widget = await prisma.widget.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Widgets and only return the `id`
     * const widgetWithIdOnly = await prisma.widget.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WidgetUpdateManyAndReturnArgs>(args: SelectSubset<T, WidgetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Widget.
     * @param {WidgetUpsertArgs} args - Arguments to update or create a Widget.
     * @example
     * // Update or create a Widget
     * const widget = await prisma.widget.upsert({
     *   create: {
     *     // ... data to create a Widget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Widget we want to update
     *   }
     * })
     */
    upsert<T extends WidgetUpsertArgs>(args: SelectSubset<T, WidgetUpsertArgs<ExtArgs>>): Prisma__WidgetClient<$Result.GetResult<Prisma.$WidgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Widgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetCountArgs} args - Arguments to filter Widgets to count.
     * @example
     * // Count the number of Widgets
     * const count = await prisma.widget.count({
     *   where: {
     *     // ... the filter for the Widgets we want to count
     *   }
     * })
    **/
    count<T extends WidgetCountArgs>(
      args?: Subset<T, WidgetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WidgetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Widget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WidgetAggregateArgs>(args: Subset<T, WidgetAggregateArgs>): Prisma.PrismaPromise<GetWidgetAggregateType<T>>

    /**
     * Group by Widget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WidgetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WidgetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WidgetGroupByArgs['orderBy'] }
        : { orderBy?: WidgetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WidgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWidgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Widget model
   */
  readonly fields: WidgetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Widget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WidgetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dashboard<T extends DashboardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DashboardDefaultArgs<ExtArgs>>): Prisma__DashboardClient<$Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metricDefinition<T extends Widget$metricDefinitionArgs<ExtArgs> = {}>(args?: Subset<T, Widget$metricDefinitionArgs<ExtArgs>>): Prisma__MetricDefinitionClient<$Result.GetResult<Prisma.$MetricDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Widget model
   */
  interface WidgetFieldRefs {
    readonly id: FieldRef<"Widget", 'String'>
    readonly widgetType: FieldRef<"Widget", 'String'>
    readonly chartType: FieldRef<"Widget", 'String'>
    readonly positionX: FieldRef<"Widget", 'Int'>
    readonly positionY: FieldRef<"Widget", 'Int'>
    readonly width: FieldRef<"Widget", 'Int'>
    readonly height: FieldRef<"Widget", 'Int'>
    readonly config: FieldRef<"Widget", 'Json'>
    readonly createdAt: FieldRef<"Widget", 'DateTime'>
    readonly updatedAt: FieldRef<"Widget", 'DateTime'>
    readonly dashboardId: FieldRef<"Widget", 'String'>
    readonly metricDefinitionId: FieldRef<"Widget", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Widget findUnique
   */
  export type WidgetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter, which Widget to fetch.
     */
    where: WidgetWhereUniqueInput
  }

  /**
   * Widget findUniqueOrThrow
   */
  export type WidgetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter, which Widget to fetch.
     */
    where: WidgetWhereUniqueInput
  }

  /**
   * Widget findFirst
   */
  export type WidgetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter, which Widget to fetch.
     */
    where?: WidgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Widgets to fetch.
     */
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Widgets.
     */
    cursor?: WidgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Widgets.
     */
    distinct?: WidgetScalarFieldEnum | WidgetScalarFieldEnum[]
  }

  /**
   * Widget findFirstOrThrow
   */
  export type WidgetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter, which Widget to fetch.
     */
    where?: WidgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Widgets to fetch.
     */
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Widgets.
     */
    cursor?: WidgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Widgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Widgets.
     */
    distinct?: WidgetScalarFieldEnum | WidgetScalarFieldEnum[]
  }

  /**
   * Widget findMany
   */
  export type WidgetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter, which Widgets to fetch.
     */
    where?: WidgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Widgets to fetch.
     */
    orderBy?: WidgetOrderByWithRelationInput | WidgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Widgets.
     */
    cursor?: WidgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Widgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Widgets.
     */
    skip?: number
    distinct?: WidgetScalarFieldEnum | WidgetScalarFieldEnum[]
  }

  /**
   * Widget create
   */
  export type WidgetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * The data needed to create a Widget.
     */
    data: XOR<WidgetCreateInput, WidgetUncheckedCreateInput>
  }

  /**
   * Widget createMany
   */
  export type WidgetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Widgets.
     */
    data: WidgetCreateManyInput | WidgetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Widget createManyAndReturn
   */
  export type WidgetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * The data used to create many Widgets.
     */
    data: WidgetCreateManyInput | WidgetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Widget update
   */
  export type WidgetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * The data needed to update a Widget.
     */
    data: XOR<WidgetUpdateInput, WidgetUncheckedUpdateInput>
    /**
     * Choose, which Widget to update.
     */
    where: WidgetWhereUniqueInput
  }

  /**
   * Widget updateMany
   */
  export type WidgetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Widgets.
     */
    data: XOR<WidgetUpdateManyMutationInput, WidgetUncheckedUpdateManyInput>
    /**
     * Filter which Widgets to update
     */
    where?: WidgetWhereInput
    /**
     * Limit how many Widgets to update.
     */
    limit?: number
  }

  /**
   * Widget updateManyAndReturn
   */
  export type WidgetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * The data used to update Widgets.
     */
    data: XOR<WidgetUpdateManyMutationInput, WidgetUncheckedUpdateManyInput>
    /**
     * Filter which Widgets to update
     */
    where?: WidgetWhereInput
    /**
     * Limit how many Widgets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Widget upsert
   */
  export type WidgetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * The filter to search for the Widget to update in case it exists.
     */
    where: WidgetWhereUniqueInput
    /**
     * In case the Widget found by the `where` argument doesn't exist, create a new Widget with this data.
     */
    create: XOR<WidgetCreateInput, WidgetUncheckedCreateInput>
    /**
     * In case the Widget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WidgetUpdateInput, WidgetUncheckedUpdateInput>
  }

  /**
   * Widget delete
   */
  export type WidgetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
    /**
     * Filter which Widget to delete.
     */
    where: WidgetWhereUniqueInput
  }

  /**
   * Widget deleteMany
   */
  export type WidgetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Widgets to delete
     */
    where?: WidgetWhereInput
    /**
     * Limit how many Widgets to delete.
     */
    limit?: number
  }

  /**
   * Widget.metricDefinition
   */
  export type Widget$metricDefinitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricDefinition
     */
    select?: MetricDefinitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricDefinition
     */
    omit?: MetricDefinitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricDefinitionInclude<ExtArgs> | null
    where?: MetricDefinitionWhereInput
  }

  /**
   * Widget without action
   */
  export type WidgetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Widget
     */
    select?: WidgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Widget
     */
    omit?: WidgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WidgetInclude<ExtArgs> | null
  }


  /**
   * Model UserClinicRole
   */

  export type AggregateUserClinicRole = {
    _count: UserClinicRoleCountAggregateOutputType | null
    _min: UserClinicRoleMinAggregateOutputType | null
    _max: UserClinicRoleMaxAggregateOutputType | null
  }

  export type UserClinicRoleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicId: string | null
    role: string | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserClinicRoleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicId: string | null
    role: string | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserClinicRoleCountAggregateOutputType = {
    id: number
    userId: number
    clinicId: number
    role: number
    isActive: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserClinicRoleMinAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    role?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserClinicRoleMaxAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    role?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserClinicRoleCountAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    role?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserClinicRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClinicRole to aggregate.
     */
    where?: UserClinicRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClinicRoles to fetch.
     */
    orderBy?: UserClinicRoleOrderByWithRelationInput | UserClinicRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserClinicRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClinicRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClinicRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserClinicRoles
    **/
    _count?: true | UserClinicRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserClinicRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserClinicRoleMaxAggregateInputType
  }

  export type GetUserClinicRoleAggregateType<T extends UserClinicRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserClinicRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserClinicRole[P]>
      : GetScalarType<T[P], AggregateUserClinicRole[P]>
  }




  export type UserClinicRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClinicRoleWhereInput
    orderBy?: UserClinicRoleOrderByWithAggregationInput | UserClinicRoleOrderByWithAggregationInput[]
    by: UserClinicRoleScalarFieldEnum[] | UserClinicRoleScalarFieldEnum
    having?: UserClinicRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserClinicRoleCountAggregateInputType | true
    _min?: UserClinicRoleMinAggregateInputType
    _max?: UserClinicRoleMaxAggregateInputType
  }

  export type UserClinicRoleGroupByOutputType = {
    id: string
    userId: string
    clinicId: string
    role: string
    isActive: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserClinicRoleCountAggregateOutputType | null
    _min: UserClinicRoleMinAggregateOutputType | null
    _max: UserClinicRoleMaxAggregateOutputType | null
  }

  type GetUserClinicRoleGroupByPayload<T extends UserClinicRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserClinicRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserClinicRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserClinicRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserClinicRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserClinicRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    role?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userClinicRole"]>

  export type UserClinicRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    role?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userClinicRole"]>

  export type UserClinicRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    role?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userClinicRole"]>

  export type UserClinicRoleSelectScalar = {
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    role?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserClinicRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "clinicId" | "role" | "isActive" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["userClinicRole"]>

  export type $UserClinicRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserClinicRole"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      clinicId: string
      role: string
      isActive: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userClinicRole"]>
    composites: {}
  }

  type UserClinicRoleGetPayload<S extends boolean | null | undefined | UserClinicRoleDefaultArgs> = $Result.GetResult<Prisma.$UserClinicRolePayload, S>

  type UserClinicRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserClinicRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserClinicRoleCountAggregateInputType | true
    }

  export interface UserClinicRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserClinicRole'], meta: { name: 'UserClinicRole' } }
    /**
     * Find zero or one UserClinicRole that matches the filter.
     * @param {UserClinicRoleFindUniqueArgs} args - Arguments to find a UserClinicRole
     * @example
     * // Get one UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserClinicRoleFindUniqueArgs>(args: SelectSubset<T, UserClinicRoleFindUniqueArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserClinicRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserClinicRoleFindUniqueOrThrowArgs} args - Arguments to find a UserClinicRole
     * @example
     * // Get one UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserClinicRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserClinicRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserClinicRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleFindFirstArgs} args - Arguments to find a UserClinicRole
     * @example
     * // Get one UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserClinicRoleFindFirstArgs>(args?: SelectSubset<T, UserClinicRoleFindFirstArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserClinicRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleFindFirstOrThrowArgs} args - Arguments to find a UserClinicRole
     * @example
     * // Get one UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserClinicRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserClinicRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserClinicRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserClinicRoles
     * const userClinicRoles = await prisma.userClinicRole.findMany()
     * 
     * // Get first 10 UserClinicRoles
     * const userClinicRoles = await prisma.userClinicRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userClinicRoleWithIdOnly = await prisma.userClinicRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserClinicRoleFindManyArgs>(args?: SelectSubset<T, UserClinicRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserClinicRole.
     * @param {UserClinicRoleCreateArgs} args - Arguments to create a UserClinicRole.
     * @example
     * // Create one UserClinicRole
     * const UserClinicRole = await prisma.userClinicRole.create({
     *   data: {
     *     // ... data to create a UserClinicRole
     *   }
     * })
     * 
     */
    create<T extends UserClinicRoleCreateArgs>(args: SelectSubset<T, UserClinicRoleCreateArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserClinicRoles.
     * @param {UserClinicRoleCreateManyArgs} args - Arguments to create many UserClinicRoles.
     * @example
     * // Create many UserClinicRoles
     * const userClinicRole = await prisma.userClinicRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserClinicRoleCreateManyArgs>(args?: SelectSubset<T, UserClinicRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserClinicRoles and returns the data saved in the database.
     * @param {UserClinicRoleCreateManyAndReturnArgs} args - Arguments to create many UserClinicRoles.
     * @example
     * // Create many UserClinicRoles
     * const userClinicRole = await prisma.userClinicRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserClinicRoles and only return the `id`
     * const userClinicRoleWithIdOnly = await prisma.userClinicRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserClinicRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserClinicRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserClinicRole.
     * @param {UserClinicRoleDeleteArgs} args - Arguments to delete one UserClinicRole.
     * @example
     * // Delete one UserClinicRole
     * const UserClinicRole = await prisma.userClinicRole.delete({
     *   where: {
     *     // ... filter to delete one UserClinicRole
     *   }
     * })
     * 
     */
    delete<T extends UserClinicRoleDeleteArgs>(args: SelectSubset<T, UserClinicRoleDeleteArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserClinicRole.
     * @param {UserClinicRoleUpdateArgs} args - Arguments to update one UserClinicRole.
     * @example
     * // Update one UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserClinicRoleUpdateArgs>(args: SelectSubset<T, UserClinicRoleUpdateArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserClinicRoles.
     * @param {UserClinicRoleDeleteManyArgs} args - Arguments to filter UserClinicRoles to delete.
     * @example
     * // Delete a few UserClinicRoles
     * const { count } = await prisma.userClinicRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserClinicRoleDeleteManyArgs>(args?: SelectSubset<T, UserClinicRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserClinicRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserClinicRoles
     * const userClinicRole = await prisma.userClinicRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserClinicRoleUpdateManyArgs>(args: SelectSubset<T, UserClinicRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserClinicRoles and returns the data updated in the database.
     * @param {UserClinicRoleUpdateManyAndReturnArgs} args - Arguments to update many UserClinicRoles.
     * @example
     * // Update many UserClinicRoles
     * const userClinicRole = await prisma.userClinicRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserClinicRoles and only return the `id`
     * const userClinicRoleWithIdOnly = await prisma.userClinicRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserClinicRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserClinicRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserClinicRole.
     * @param {UserClinicRoleUpsertArgs} args - Arguments to update or create a UserClinicRole.
     * @example
     * // Update or create a UserClinicRole
     * const userClinicRole = await prisma.userClinicRole.upsert({
     *   create: {
     *     // ... data to create a UserClinicRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserClinicRole we want to update
     *   }
     * })
     */
    upsert<T extends UserClinicRoleUpsertArgs>(args: SelectSubset<T, UserClinicRoleUpsertArgs<ExtArgs>>): Prisma__UserClinicRoleClient<$Result.GetResult<Prisma.$UserClinicRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserClinicRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleCountArgs} args - Arguments to filter UserClinicRoles to count.
     * @example
     * // Count the number of UserClinicRoles
     * const count = await prisma.userClinicRole.count({
     *   where: {
     *     // ... the filter for the UserClinicRoles we want to count
     *   }
     * })
    **/
    count<T extends UserClinicRoleCountArgs>(
      args?: Subset<T, UserClinicRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserClinicRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserClinicRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserClinicRoleAggregateArgs>(args: Subset<T, UserClinicRoleAggregateArgs>): Prisma.PrismaPromise<GetUserClinicRoleAggregateType<T>>

    /**
     * Group by UserClinicRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClinicRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserClinicRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserClinicRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserClinicRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserClinicRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserClinicRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserClinicRole model
   */
  readonly fields: UserClinicRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserClinicRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClinicRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserClinicRole model
   */
  interface UserClinicRoleFieldRefs {
    readonly id: FieldRef<"UserClinicRole", 'String'>
    readonly userId: FieldRef<"UserClinicRole", 'String'>
    readonly clinicId: FieldRef<"UserClinicRole", 'String'>
    readonly role: FieldRef<"UserClinicRole", 'String'>
    readonly isActive: FieldRef<"UserClinicRole", 'Boolean'>
    readonly createdBy: FieldRef<"UserClinicRole", 'String'>
    readonly createdAt: FieldRef<"UserClinicRole", 'DateTime'>
    readonly updatedAt: FieldRef<"UserClinicRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserClinicRole findUnique
   */
  export type UserClinicRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserClinicRole to fetch.
     */
    where: UserClinicRoleWhereUniqueInput
  }

  /**
   * UserClinicRole findUniqueOrThrow
   */
  export type UserClinicRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserClinicRole to fetch.
     */
    where: UserClinicRoleWhereUniqueInput
  }

  /**
   * UserClinicRole findFirst
   */
  export type UserClinicRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserClinicRole to fetch.
     */
    where?: UserClinicRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClinicRoles to fetch.
     */
    orderBy?: UserClinicRoleOrderByWithRelationInput | UserClinicRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClinicRoles.
     */
    cursor?: UserClinicRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClinicRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClinicRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClinicRoles.
     */
    distinct?: UserClinicRoleScalarFieldEnum | UserClinicRoleScalarFieldEnum[]
  }

  /**
   * UserClinicRole findFirstOrThrow
   */
  export type UserClinicRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserClinicRole to fetch.
     */
    where?: UserClinicRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClinicRoles to fetch.
     */
    orderBy?: UserClinicRoleOrderByWithRelationInput | UserClinicRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClinicRoles.
     */
    cursor?: UserClinicRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClinicRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClinicRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClinicRoles.
     */
    distinct?: UserClinicRoleScalarFieldEnum | UserClinicRoleScalarFieldEnum[]
  }

  /**
   * UserClinicRole findMany
   */
  export type UserClinicRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter, which UserClinicRoles to fetch.
     */
    where?: UserClinicRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClinicRoles to fetch.
     */
    orderBy?: UserClinicRoleOrderByWithRelationInput | UserClinicRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserClinicRoles.
     */
    cursor?: UserClinicRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClinicRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClinicRoles.
     */
    skip?: number
    distinct?: UserClinicRoleScalarFieldEnum | UserClinicRoleScalarFieldEnum[]
  }

  /**
   * UserClinicRole create
   */
  export type UserClinicRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * The data needed to create a UserClinicRole.
     */
    data: XOR<UserClinicRoleCreateInput, UserClinicRoleUncheckedCreateInput>
  }

  /**
   * UserClinicRole createMany
   */
  export type UserClinicRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserClinicRoles.
     */
    data: UserClinicRoleCreateManyInput | UserClinicRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserClinicRole createManyAndReturn
   */
  export type UserClinicRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserClinicRoles.
     */
    data: UserClinicRoleCreateManyInput | UserClinicRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserClinicRole update
   */
  export type UserClinicRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * The data needed to update a UserClinicRole.
     */
    data: XOR<UserClinicRoleUpdateInput, UserClinicRoleUncheckedUpdateInput>
    /**
     * Choose, which UserClinicRole to update.
     */
    where: UserClinicRoleWhereUniqueInput
  }

  /**
   * UserClinicRole updateMany
   */
  export type UserClinicRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserClinicRoles.
     */
    data: XOR<UserClinicRoleUpdateManyMutationInput, UserClinicRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserClinicRoles to update
     */
    where?: UserClinicRoleWhereInput
    /**
     * Limit how many UserClinicRoles to update.
     */
    limit?: number
  }

  /**
   * UserClinicRole updateManyAndReturn
   */
  export type UserClinicRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserClinicRoles.
     */
    data: XOR<UserClinicRoleUpdateManyMutationInput, UserClinicRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserClinicRoles to update
     */
    where?: UserClinicRoleWhereInput
    /**
     * Limit how many UserClinicRoles to update.
     */
    limit?: number
  }

  /**
   * UserClinicRole upsert
   */
  export type UserClinicRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * The filter to search for the UserClinicRole to update in case it exists.
     */
    where: UserClinicRoleWhereUniqueInput
    /**
     * In case the UserClinicRole found by the `where` argument doesn't exist, create a new UserClinicRole with this data.
     */
    create: XOR<UserClinicRoleCreateInput, UserClinicRoleUncheckedCreateInput>
    /**
     * In case the UserClinicRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserClinicRoleUpdateInput, UserClinicRoleUncheckedUpdateInput>
  }

  /**
   * UserClinicRole delete
   */
  export type UserClinicRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
    /**
     * Filter which UserClinicRole to delete.
     */
    where: UserClinicRoleWhereUniqueInput
  }

  /**
   * UserClinicRole deleteMany
   */
  export type UserClinicRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClinicRoles to delete
     */
    where?: UserClinicRoleWhereInput
    /**
     * Limit how many UserClinicRoles to delete.
     */
    limit?: number
  }

  /**
   * UserClinicRole without action
   */
  export type UserClinicRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClinicRole
     */
    select?: UserClinicRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClinicRole
     */
    omit?: UserClinicRoleOmit<ExtArgs> | null
  }


  /**
   * Model GoalTemplate
   */

  export type AggregateGoalTemplate = {
    _count: GoalTemplateCountAggregateOutputType | null
    _min: GoalTemplateMinAggregateOutputType | null
    _max: GoalTemplateMaxAggregateOutputType | null
  }

  export type GoalTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    metricDefinitionId: string | null
    targetFormula: string | null
    timePeriod: string | null
    isSystemTemplate: boolean | null
    clinicId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    metricDefinitionId: string | null
    targetFormula: string | null
    timePeriod: string | null
    isSystemTemplate: boolean | null
    clinicId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoalTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    metricDefinitionId: number
    targetFormula: number
    timePeriod: number
    isSystemTemplate: number
    clinicId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoalTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    metricDefinitionId?: true
    targetFormula?: true
    timePeriod?: true
    isSystemTemplate?: true
    clinicId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    metricDefinitionId?: true
    targetFormula?: true
    timePeriod?: true
    isSystemTemplate?: true
    clinicId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoalTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    metricDefinitionId?: true
    targetFormula?: true
    timePeriod?: true
    isSystemTemplate?: true
    clinicId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoalTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalTemplate to aggregate.
     */
    where?: GoalTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalTemplates to fetch.
     */
    orderBy?: GoalTemplateOrderByWithRelationInput | GoalTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalTemplates
    **/
    _count?: true | GoalTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalTemplateMaxAggregateInputType
  }

  export type GetGoalTemplateAggregateType<T extends GoalTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalTemplate[P]>
      : GetScalarType<T[P], AggregateGoalTemplate[P]>
  }




  export type GoalTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalTemplateWhereInput
    orderBy?: GoalTemplateOrderByWithAggregationInput | GoalTemplateOrderByWithAggregationInput[]
    by: GoalTemplateScalarFieldEnum[] | GoalTemplateScalarFieldEnum
    having?: GoalTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalTemplateCountAggregateInputType | true
    _min?: GoalTemplateMinAggregateInputType
    _max?: GoalTemplateMaxAggregateInputType
  }

  export type GoalTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    metricDefinitionId: string
    targetFormula: string | null
    timePeriod: string
    isSystemTemplate: boolean
    clinicId: string | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: GoalTemplateCountAggregateOutputType | null
    _min: GoalTemplateMinAggregateOutputType | null
    _max: GoalTemplateMaxAggregateOutputType | null
  }

  type GetGoalTemplateGroupByPayload<T extends GoalTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], GoalTemplateGroupByOutputType[P]>
        }
      >
    >


  export type GoalTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    metricDefinitionId?: boolean
    targetFormula?: boolean
    timePeriod?: boolean
    isSystemTemplate?: boolean
    clinicId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["goalTemplate"]>

  export type GoalTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    metricDefinitionId?: boolean
    targetFormula?: boolean
    timePeriod?: boolean
    isSystemTemplate?: boolean
    clinicId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["goalTemplate"]>

  export type GoalTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    metricDefinitionId?: boolean
    targetFormula?: boolean
    timePeriod?: boolean
    isSystemTemplate?: boolean
    clinicId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["goalTemplate"]>

  export type GoalTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    metricDefinitionId?: boolean
    targetFormula?: boolean
    timePeriod?: boolean
    isSystemTemplate?: boolean
    clinicId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoalTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "metricDefinitionId" | "targetFormula" | "timePeriod" | "isSystemTemplate" | "clinicId" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["goalTemplate"]>

  export type $GoalTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoalTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      metricDefinitionId: string
      targetFormula: string | null
      timePeriod: string
      isSystemTemplate: boolean
      clinicId: string | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["goalTemplate"]>
    composites: {}
  }

  type GoalTemplateGetPayload<S extends boolean | null | undefined | GoalTemplateDefaultArgs> = $Result.GetResult<Prisma.$GoalTemplatePayload, S>

  type GoalTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoalTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoalTemplateCountAggregateInputType | true
    }

  export interface GoalTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoalTemplate'], meta: { name: 'GoalTemplate' } }
    /**
     * Find zero or one GoalTemplate that matches the filter.
     * @param {GoalTemplateFindUniqueArgs} args - Arguments to find a GoalTemplate
     * @example
     * // Get one GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalTemplateFindUniqueArgs>(args: SelectSubset<T, GoalTemplateFindUniqueArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoalTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoalTemplateFindUniqueOrThrowArgs} args - Arguments to find a GoalTemplate
     * @example
     * // Get one GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateFindFirstArgs} args - Arguments to find a GoalTemplate
     * @example
     * // Get one GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalTemplateFindFirstArgs>(args?: SelectSubset<T, GoalTemplateFindFirstArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoalTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateFindFirstOrThrowArgs} args - Arguments to find a GoalTemplate
     * @example
     * // Get one GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoalTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalTemplates
     * const goalTemplates = await prisma.goalTemplate.findMany()
     * 
     * // Get first 10 GoalTemplates
     * const goalTemplates = await prisma.goalTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalTemplateWithIdOnly = await prisma.goalTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalTemplateFindManyArgs>(args?: SelectSubset<T, GoalTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoalTemplate.
     * @param {GoalTemplateCreateArgs} args - Arguments to create a GoalTemplate.
     * @example
     * // Create one GoalTemplate
     * const GoalTemplate = await prisma.goalTemplate.create({
     *   data: {
     *     // ... data to create a GoalTemplate
     *   }
     * })
     * 
     */
    create<T extends GoalTemplateCreateArgs>(args: SelectSubset<T, GoalTemplateCreateArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoalTemplates.
     * @param {GoalTemplateCreateManyArgs} args - Arguments to create many GoalTemplates.
     * @example
     * // Create many GoalTemplates
     * const goalTemplate = await prisma.goalTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalTemplateCreateManyArgs>(args?: SelectSubset<T, GoalTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoalTemplates and returns the data saved in the database.
     * @param {GoalTemplateCreateManyAndReturnArgs} args - Arguments to create many GoalTemplates.
     * @example
     * // Create many GoalTemplates
     * const goalTemplate = await prisma.goalTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoalTemplates and only return the `id`
     * const goalTemplateWithIdOnly = await prisma.goalTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoalTemplate.
     * @param {GoalTemplateDeleteArgs} args - Arguments to delete one GoalTemplate.
     * @example
     * // Delete one GoalTemplate
     * const GoalTemplate = await prisma.goalTemplate.delete({
     *   where: {
     *     // ... filter to delete one GoalTemplate
     *   }
     * })
     * 
     */
    delete<T extends GoalTemplateDeleteArgs>(args: SelectSubset<T, GoalTemplateDeleteArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoalTemplate.
     * @param {GoalTemplateUpdateArgs} args - Arguments to update one GoalTemplate.
     * @example
     * // Update one GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalTemplateUpdateArgs>(args: SelectSubset<T, GoalTemplateUpdateArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoalTemplates.
     * @param {GoalTemplateDeleteManyArgs} args - Arguments to filter GoalTemplates to delete.
     * @example
     * // Delete a few GoalTemplates
     * const { count } = await prisma.goalTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalTemplateDeleteManyArgs>(args?: SelectSubset<T, GoalTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalTemplates
     * const goalTemplate = await prisma.goalTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalTemplateUpdateManyArgs>(args: SelectSubset<T, GoalTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalTemplates and returns the data updated in the database.
     * @param {GoalTemplateUpdateManyAndReturnArgs} args - Arguments to update many GoalTemplates.
     * @example
     * // Update many GoalTemplates
     * const goalTemplate = await prisma.goalTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoalTemplates and only return the `id`
     * const goalTemplateWithIdOnly = await prisma.goalTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoalTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, GoalTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoalTemplate.
     * @param {GoalTemplateUpsertArgs} args - Arguments to update or create a GoalTemplate.
     * @example
     * // Update or create a GoalTemplate
     * const goalTemplate = await prisma.goalTemplate.upsert({
     *   create: {
     *     // ... data to create a GoalTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalTemplate we want to update
     *   }
     * })
     */
    upsert<T extends GoalTemplateUpsertArgs>(args: SelectSubset<T, GoalTemplateUpsertArgs<ExtArgs>>): Prisma__GoalTemplateClient<$Result.GetResult<Prisma.$GoalTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoalTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateCountArgs} args - Arguments to filter GoalTemplates to count.
     * @example
     * // Count the number of GoalTemplates
     * const count = await prisma.goalTemplate.count({
     *   where: {
     *     // ... the filter for the GoalTemplates we want to count
     *   }
     * })
    **/
    count<T extends GoalTemplateCountArgs>(
      args?: Subset<T, GoalTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalTemplateAggregateArgs>(args: Subset<T, GoalTemplateAggregateArgs>): Prisma.PrismaPromise<GetGoalTemplateAggregateType<T>>

    /**
     * Group by GoalTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalTemplateGroupByArgs['orderBy'] }
        : { orderBy?: GoalTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoalTemplate model
   */
  readonly fields: GoalTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoalTemplate model
   */
  interface GoalTemplateFieldRefs {
    readonly id: FieldRef<"GoalTemplate", 'String'>
    readonly name: FieldRef<"GoalTemplate", 'String'>
    readonly description: FieldRef<"GoalTemplate", 'String'>
    readonly category: FieldRef<"GoalTemplate", 'String'>
    readonly metricDefinitionId: FieldRef<"GoalTemplate", 'String'>
    readonly targetFormula: FieldRef<"GoalTemplate", 'String'>
    readonly timePeriod: FieldRef<"GoalTemplate", 'String'>
    readonly isSystemTemplate: FieldRef<"GoalTemplate", 'Boolean'>
    readonly clinicId: FieldRef<"GoalTemplate", 'String'>
    readonly createdBy: FieldRef<"GoalTemplate", 'String'>
    readonly createdAt: FieldRef<"GoalTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"GoalTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GoalTemplate findUnique
   */
  export type GoalTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter, which GoalTemplate to fetch.
     */
    where: GoalTemplateWhereUniqueInput
  }

  /**
   * GoalTemplate findUniqueOrThrow
   */
  export type GoalTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter, which GoalTemplate to fetch.
     */
    where: GoalTemplateWhereUniqueInput
  }

  /**
   * GoalTemplate findFirst
   */
  export type GoalTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter, which GoalTemplate to fetch.
     */
    where?: GoalTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalTemplates to fetch.
     */
    orderBy?: GoalTemplateOrderByWithRelationInput | GoalTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalTemplates.
     */
    cursor?: GoalTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalTemplates.
     */
    distinct?: GoalTemplateScalarFieldEnum | GoalTemplateScalarFieldEnum[]
  }

  /**
   * GoalTemplate findFirstOrThrow
   */
  export type GoalTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter, which GoalTemplate to fetch.
     */
    where?: GoalTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalTemplates to fetch.
     */
    orderBy?: GoalTemplateOrderByWithRelationInput | GoalTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalTemplates.
     */
    cursor?: GoalTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalTemplates.
     */
    distinct?: GoalTemplateScalarFieldEnum | GoalTemplateScalarFieldEnum[]
  }

  /**
   * GoalTemplate findMany
   */
  export type GoalTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter, which GoalTemplates to fetch.
     */
    where?: GoalTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalTemplates to fetch.
     */
    orderBy?: GoalTemplateOrderByWithRelationInput | GoalTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalTemplates.
     */
    cursor?: GoalTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalTemplates.
     */
    skip?: number
    distinct?: GoalTemplateScalarFieldEnum | GoalTemplateScalarFieldEnum[]
  }

  /**
   * GoalTemplate create
   */
  export type GoalTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * The data needed to create a GoalTemplate.
     */
    data: XOR<GoalTemplateCreateInput, GoalTemplateUncheckedCreateInput>
  }

  /**
   * GoalTemplate createMany
   */
  export type GoalTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoalTemplates.
     */
    data: GoalTemplateCreateManyInput | GoalTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoalTemplate createManyAndReturn
   */
  export type GoalTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many GoalTemplates.
     */
    data: GoalTemplateCreateManyInput | GoalTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoalTemplate update
   */
  export type GoalTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * The data needed to update a GoalTemplate.
     */
    data: XOR<GoalTemplateUpdateInput, GoalTemplateUncheckedUpdateInput>
    /**
     * Choose, which GoalTemplate to update.
     */
    where: GoalTemplateWhereUniqueInput
  }

  /**
   * GoalTemplate updateMany
   */
  export type GoalTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoalTemplates.
     */
    data: XOR<GoalTemplateUpdateManyMutationInput, GoalTemplateUncheckedUpdateManyInput>
    /**
     * Filter which GoalTemplates to update
     */
    where?: GoalTemplateWhereInput
    /**
     * Limit how many GoalTemplates to update.
     */
    limit?: number
  }

  /**
   * GoalTemplate updateManyAndReturn
   */
  export type GoalTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * The data used to update GoalTemplates.
     */
    data: XOR<GoalTemplateUpdateManyMutationInput, GoalTemplateUncheckedUpdateManyInput>
    /**
     * Filter which GoalTemplates to update
     */
    where?: GoalTemplateWhereInput
    /**
     * Limit how many GoalTemplates to update.
     */
    limit?: number
  }

  /**
   * GoalTemplate upsert
   */
  export type GoalTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * The filter to search for the GoalTemplate to update in case it exists.
     */
    where: GoalTemplateWhereUniqueInput
    /**
     * In case the GoalTemplate found by the `where` argument doesn't exist, create a new GoalTemplate with this data.
     */
    create: XOR<GoalTemplateCreateInput, GoalTemplateUncheckedCreateInput>
    /**
     * In case the GoalTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalTemplateUpdateInput, GoalTemplateUncheckedUpdateInput>
  }

  /**
   * GoalTemplate delete
   */
  export type GoalTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
    /**
     * Filter which GoalTemplate to delete.
     */
    where: GoalTemplateWhereUniqueInput
  }

  /**
   * GoalTemplate deleteMany
   */
  export type GoalTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoalTemplates to delete
     */
    where?: GoalTemplateWhereInput
    /**
     * Limit how many GoalTemplates to delete.
     */
    limit?: number
  }

  /**
   * GoalTemplate without action
   */
  export type GoalTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoalTemplate
     */
    select?: GoalTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoalTemplate
     */
    omit?: GoalTemplateOmit<ExtArgs> | null
  }


  /**
   * Model FinancialMetric
   */

  export type AggregateFinancialMetric = {
    _count: FinancialMetricCountAggregateOutputType | null
    _avg: FinancialMetricAvgAggregateOutputType | null
    _sum: FinancialMetricSumAggregateOutputType | null
    _min: FinancialMetricMinAggregateOutputType | null
    _max: FinancialMetricMaxAggregateOutputType | null
  }

  export type FinancialMetricAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type FinancialMetricSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type FinancialMetricMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    metricType: string | null
    category: string | null
    amount: Decimal | null
    providerId: string | null
    insuranceCarrier: string | null
    paymentMethod: string | null
    procedureCode: string | null
    notes: string | null
    sourceReference: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinancialMetricMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    metricType: string | null
    category: string | null
    amount: Decimal | null
    providerId: string | null
    insuranceCarrier: string | null
    paymentMethod: string | null
    procedureCode: string | null
    notes: string | null
    sourceReference: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FinancialMetricCountAggregateOutputType = {
    id: number
    clinicId: number
    date: number
    metricType: number
    category: number
    amount: number
    providerId: number
    insuranceCarrier: number
    paymentMethod: number
    procedureCode: number
    notes: number
    sourceReference: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FinancialMetricAvgAggregateInputType = {
    amount?: true
  }

  export type FinancialMetricSumAggregateInputType = {
    amount?: true
  }

  export type FinancialMetricMinAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    metricType?: true
    category?: true
    amount?: true
    providerId?: true
    insuranceCarrier?: true
    paymentMethod?: true
    procedureCode?: true
    notes?: true
    sourceReference?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinancialMetricMaxAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    metricType?: true
    category?: true
    amount?: true
    providerId?: true
    insuranceCarrier?: true
    paymentMethod?: true
    procedureCode?: true
    notes?: true
    sourceReference?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FinancialMetricCountAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    metricType?: true
    category?: true
    amount?: true
    providerId?: true
    insuranceCarrier?: true
    paymentMethod?: true
    procedureCode?: true
    notes?: true
    sourceReference?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FinancialMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialMetric to aggregate.
     */
    where?: FinancialMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialMetrics to fetch.
     */
    orderBy?: FinancialMetricOrderByWithRelationInput | FinancialMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialMetrics
    **/
    _count?: true | FinancialMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialMetricMaxAggregateInputType
  }

  export type GetFinancialMetricAggregateType<T extends FinancialMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialMetric[P]>
      : GetScalarType<T[P], AggregateFinancialMetric[P]>
  }




  export type FinancialMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialMetricWhereInput
    orderBy?: FinancialMetricOrderByWithAggregationInput | FinancialMetricOrderByWithAggregationInput[]
    by: FinancialMetricScalarFieldEnum[] | FinancialMetricScalarFieldEnum
    having?: FinancialMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialMetricCountAggregateInputType | true
    _avg?: FinancialMetricAvgAggregateInputType
    _sum?: FinancialMetricSumAggregateInputType
    _min?: FinancialMetricMinAggregateInputType
    _max?: FinancialMetricMaxAggregateInputType
  }

  export type FinancialMetricGroupByOutputType = {
    id: string
    clinicId: string
    date: Date
    metricType: string
    category: string
    amount: Decimal
    providerId: string | null
    insuranceCarrier: string | null
    paymentMethod: string | null
    procedureCode: string | null
    notes: string | null
    sourceReference: string | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: FinancialMetricCountAggregateOutputType | null
    _avg: FinancialMetricAvgAggregateOutputType | null
    _sum: FinancialMetricSumAggregateOutputType | null
    _min: FinancialMetricMinAggregateOutputType | null
    _max: FinancialMetricMaxAggregateOutputType | null
  }

  type GetFinancialMetricGroupByPayload<T extends FinancialMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialMetricGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialMetricGroupByOutputType[P]>
        }
      >
    >


  export type FinancialMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    metricType?: boolean
    category?: boolean
    amount?: boolean
    providerId?: boolean
    insuranceCarrier?: boolean
    paymentMethod?: boolean
    procedureCode?: boolean
    notes?: boolean
    sourceReference?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["financialMetric"]>

  export type FinancialMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    metricType?: boolean
    category?: boolean
    amount?: boolean
    providerId?: boolean
    insuranceCarrier?: boolean
    paymentMethod?: boolean
    procedureCode?: boolean
    notes?: boolean
    sourceReference?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["financialMetric"]>

  export type FinancialMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    metricType?: boolean
    category?: boolean
    amount?: boolean
    providerId?: boolean
    insuranceCarrier?: boolean
    paymentMethod?: boolean
    procedureCode?: boolean
    notes?: boolean
    sourceReference?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["financialMetric"]>

  export type FinancialMetricSelectScalar = {
    id?: boolean
    clinicId?: boolean
    date?: boolean
    metricType?: boolean
    category?: boolean
    amount?: boolean
    providerId?: boolean
    insuranceCarrier?: boolean
    paymentMethod?: boolean
    procedureCode?: boolean
    notes?: boolean
    sourceReference?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FinancialMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "date" | "metricType" | "category" | "amount" | "providerId" | "insuranceCarrier" | "paymentMethod" | "procedureCode" | "notes" | "sourceReference" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["financialMetric"]>

  export type $FinancialMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialMetric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      date: Date
      metricType: string
      category: string
      amount: Prisma.Decimal
      providerId: string | null
      insuranceCarrier: string | null
      paymentMethod: string | null
      procedureCode: string | null
      notes: string | null
      sourceReference: string | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["financialMetric"]>
    composites: {}
  }

  type FinancialMetricGetPayload<S extends boolean | null | undefined | FinancialMetricDefaultArgs> = $Result.GetResult<Prisma.$FinancialMetricPayload, S>

  type FinancialMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialMetricCountAggregateInputType | true
    }

  export interface FinancialMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialMetric'], meta: { name: 'FinancialMetric' } }
    /**
     * Find zero or one FinancialMetric that matches the filter.
     * @param {FinancialMetricFindUniqueArgs} args - Arguments to find a FinancialMetric
     * @example
     * // Get one FinancialMetric
     * const financialMetric = await prisma.financialMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialMetricFindUniqueArgs>(args: SelectSubset<T, FinancialMetricFindUniqueArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FinancialMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialMetricFindUniqueOrThrowArgs} args - Arguments to find a FinancialMetric
     * @example
     * // Get one FinancialMetric
     * const financialMetric = await prisma.financialMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricFindFirstArgs} args - Arguments to find a FinancialMetric
     * @example
     * // Get one FinancialMetric
     * const financialMetric = await prisma.financialMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialMetricFindFirstArgs>(args?: SelectSubset<T, FinancialMetricFindFirstArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricFindFirstOrThrowArgs} args - Arguments to find a FinancialMetric
     * @example
     * // Get one FinancialMetric
     * const financialMetric = await prisma.financialMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FinancialMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialMetrics
     * const financialMetrics = await prisma.financialMetric.findMany()
     * 
     * // Get first 10 FinancialMetrics
     * const financialMetrics = await prisma.financialMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialMetricWithIdOnly = await prisma.financialMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialMetricFindManyArgs>(args?: SelectSubset<T, FinancialMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FinancialMetric.
     * @param {FinancialMetricCreateArgs} args - Arguments to create a FinancialMetric.
     * @example
     * // Create one FinancialMetric
     * const FinancialMetric = await prisma.financialMetric.create({
     *   data: {
     *     // ... data to create a FinancialMetric
     *   }
     * })
     * 
     */
    create<T extends FinancialMetricCreateArgs>(args: SelectSubset<T, FinancialMetricCreateArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FinancialMetrics.
     * @param {FinancialMetricCreateManyArgs} args - Arguments to create many FinancialMetrics.
     * @example
     * // Create many FinancialMetrics
     * const financialMetric = await prisma.financialMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialMetricCreateManyArgs>(args?: SelectSubset<T, FinancialMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialMetrics and returns the data saved in the database.
     * @param {FinancialMetricCreateManyAndReturnArgs} args - Arguments to create many FinancialMetrics.
     * @example
     * // Create many FinancialMetrics
     * const financialMetric = await prisma.financialMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialMetrics and only return the `id`
     * const financialMetricWithIdOnly = await prisma.financialMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FinancialMetric.
     * @param {FinancialMetricDeleteArgs} args - Arguments to delete one FinancialMetric.
     * @example
     * // Delete one FinancialMetric
     * const FinancialMetric = await prisma.financialMetric.delete({
     *   where: {
     *     // ... filter to delete one FinancialMetric
     *   }
     * })
     * 
     */
    delete<T extends FinancialMetricDeleteArgs>(args: SelectSubset<T, FinancialMetricDeleteArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FinancialMetric.
     * @param {FinancialMetricUpdateArgs} args - Arguments to update one FinancialMetric.
     * @example
     * // Update one FinancialMetric
     * const financialMetric = await prisma.financialMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialMetricUpdateArgs>(args: SelectSubset<T, FinancialMetricUpdateArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FinancialMetrics.
     * @param {FinancialMetricDeleteManyArgs} args - Arguments to filter FinancialMetrics to delete.
     * @example
     * // Delete a few FinancialMetrics
     * const { count } = await prisma.financialMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialMetricDeleteManyArgs>(args?: SelectSubset<T, FinancialMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialMetrics
     * const financialMetric = await prisma.financialMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialMetricUpdateManyArgs>(args: SelectSubset<T, FinancialMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialMetrics and returns the data updated in the database.
     * @param {FinancialMetricUpdateManyAndReturnArgs} args - Arguments to update many FinancialMetrics.
     * @example
     * // Update many FinancialMetrics
     * const financialMetric = await prisma.financialMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialMetrics and only return the `id`
     * const financialMetricWithIdOnly = await prisma.financialMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FinancialMetric.
     * @param {FinancialMetricUpsertArgs} args - Arguments to update or create a FinancialMetric.
     * @example
     * // Update or create a FinancialMetric
     * const financialMetric = await prisma.financialMetric.upsert({
     *   create: {
     *     // ... data to create a FinancialMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialMetric we want to update
     *   }
     * })
     */
    upsert<T extends FinancialMetricUpsertArgs>(args: SelectSubset<T, FinancialMetricUpsertArgs<ExtArgs>>): Prisma__FinancialMetricClient<$Result.GetResult<Prisma.$FinancialMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FinancialMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricCountArgs} args - Arguments to filter FinancialMetrics to count.
     * @example
     * // Count the number of FinancialMetrics
     * const count = await prisma.financialMetric.count({
     *   where: {
     *     // ... the filter for the FinancialMetrics we want to count
     *   }
     * })
    **/
    count<T extends FinancialMetricCountArgs>(
      args?: Subset<T, FinancialMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialMetricAggregateArgs>(args: Subset<T, FinancialMetricAggregateArgs>): Prisma.PrismaPromise<GetFinancialMetricAggregateType<T>>

    /**
     * Group by FinancialMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialMetricGroupByArgs['orderBy'] }
        : { orderBy?: FinancialMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialMetric model
   */
  readonly fields: FinancialMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialMetric model
   */
  interface FinancialMetricFieldRefs {
    readonly id: FieldRef<"FinancialMetric", 'String'>
    readonly clinicId: FieldRef<"FinancialMetric", 'String'>
    readonly date: FieldRef<"FinancialMetric", 'DateTime'>
    readonly metricType: FieldRef<"FinancialMetric", 'String'>
    readonly category: FieldRef<"FinancialMetric", 'String'>
    readonly amount: FieldRef<"FinancialMetric", 'Decimal'>
    readonly providerId: FieldRef<"FinancialMetric", 'String'>
    readonly insuranceCarrier: FieldRef<"FinancialMetric", 'String'>
    readonly paymentMethod: FieldRef<"FinancialMetric", 'String'>
    readonly procedureCode: FieldRef<"FinancialMetric", 'String'>
    readonly notes: FieldRef<"FinancialMetric", 'String'>
    readonly sourceReference: FieldRef<"FinancialMetric", 'String'>
    readonly createdBy: FieldRef<"FinancialMetric", 'String'>
    readonly createdAt: FieldRef<"FinancialMetric", 'DateTime'>
    readonly updatedAt: FieldRef<"FinancialMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FinancialMetric findUnique
   */
  export type FinancialMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter, which FinancialMetric to fetch.
     */
    where: FinancialMetricWhereUniqueInput
  }

  /**
   * FinancialMetric findUniqueOrThrow
   */
  export type FinancialMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter, which FinancialMetric to fetch.
     */
    where: FinancialMetricWhereUniqueInput
  }

  /**
   * FinancialMetric findFirst
   */
  export type FinancialMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter, which FinancialMetric to fetch.
     */
    where?: FinancialMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialMetrics to fetch.
     */
    orderBy?: FinancialMetricOrderByWithRelationInput | FinancialMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialMetrics.
     */
    cursor?: FinancialMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialMetrics.
     */
    distinct?: FinancialMetricScalarFieldEnum | FinancialMetricScalarFieldEnum[]
  }

  /**
   * FinancialMetric findFirstOrThrow
   */
  export type FinancialMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter, which FinancialMetric to fetch.
     */
    where?: FinancialMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialMetrics to fetch.
     */
    orderBy?: FinancialMetricOrderByWithRelationInput | FinancialMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialMetrics.
     */
    cursor?: FinancialMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialMetrics.
     */
    distinct?: FinancialMetricScalarFieldEnum | FinancialMetricScalarFieldEnum[]
  }

  /**
   * FinancialMetric findMany
   */
  export type FinancialMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter, which FinancialMetrics to fetch.
     */
    where?: FinancialMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialMetrics to fetch.
     */
    orderBy?: FinancialMetricOrderByWithRelationInput | FinancialMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialMetrics.
     */
    cursor?: FinancialMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialMetrics.
     */
    skip?: number
    distinct?: FinancialMetricScalarFieldEnum | FinancialMetricScalarFieldEnum[]
  }

  /**
   * FinancialMetric create
   */
  export type FinancialMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * The data needed to create a FinancialMetric.
     */
    data: XOR<FinancialMetricCreateInput, FinancialMetricUncheckedCreateInput>
  }

  /**
   * FinancialMetric createMany
   */
  export type FinancialMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialMetrics.
     */
    data: FinancialMetricCreateManyInput | FinancialMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialMetric createManyAndReturn
   */
  export type FinancialMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialMetrics.
     */
    data: FinancialMetricCreateManyInput | FinancialMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialMetric update
   */
  export type FinancialMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * The data needed to update a FinancialMetric.
     */
    data: XOR<FinancialMetricUpdateInput, FinancialMetricUncheckedUpdateInput>
    /**
     * Choose, which FinancialMetric to update.
     */
    where: FinancialMetricWhereUniqueInput
  }

  /**
   * FinancialMetric updateMany
   */
  export type FinancialMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialMetrics.
     */
    data: XOR<FinancialMetricUpdateManyMutationInput, FinancialMetricUncheckedUpdateManyInput>
    /**
     * Filter which FinancialMetrics to update
     */
    where?: FinancialMetricWhereInput
    /**
     * Limit how many FinancialMetrics to update.
     */
    limit?: number
  }

  /**
   * FinancialMetric updateManyAndReturn
   */
  export type FinancialMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * The data used to update FinancialMetrics.
     */
    data: XOR<FinancialMetricUpdateManyMutationInput, FinancialMetricUncheckedUpdateManyInput>
    /**
     * Filter which FinancialMetrics to update
     */
    where?: FinancialMetricWhereInput
    /**
     * Limit how many FinancialMetrics to update.
     */
    limit?: number
  }

  /**
   * FinancialMetric upsert
   */
  export type FinancialMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * The filter to search for the FinancialMetric to update in case it exists.
     */
    where: FinancialMetricWhereUniqueInput
    /**
     * In case the FinancialMetric found by the `where` argument doesn't exist, create a new FinancialMetric with this data.
     */
    create: XOR<FinancialMetricCreateInput, FinancialMetricUncheckedCreateInput>
    /**
     * In case the FinancialMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialMetricUpdateInput, FinancialMetricUncheckedUpdateInput>
  }

  /**
   * FinancialMetric delete
   */
  export type FinancialMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
    /**
     * Filter which FinancialMetric to delete.
     */
    where: FinancialMetricWhereUniqueInput
  }

  /**
   * FinancialMetric deleteMany
   */
  export type FinancialMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialMetrics to delete
     */
    where?: FinancialMetricWhereInput
    /**
     * Limit how many FinancialMetrics to delete.
     */
    limit?: number
  }

  /**
   * FinancialMetric without action
   */
  export type FinancialMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialMetric
     */
    select?: FinancialMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialMetric
     */
    omit?: FinancialMetricOmit<ExtArgs> | null
  }


  /**
   * Model AppointmentMetric
   */

  export type AggregateAppointmentMetric = {
    _count: AppointmentMetricCountAggregateOutputType | null
    _avg: AppointmentMetricAvgAggregateOutputType | null
    _sum: AppointmentMetricSumAggregateOutputType | null
    _min: AppointmentMetricMinAggregateOutputType | null
    _max: AppointmentMetricMaxAggregateOutputType | null
  }

  export type AppointmentMetricAvgAggregateOutputType = {
    scheduledCount: number | null
    completedCount: number | null
    cancelledCount: number | null
    noShowCount: number | null
    averageDuration: number | null
    productionAmount: Decimal | null
    utilizationRate: Decimal | null
  }

  export type AppointmentMetricSumAggregateOutputType = {
    scheduledCount: number | null
    completedCount: number | null
    cancelledCount: number | null
    noShowCount: number | null
    averageDuration: number | null
    productionAmount: Decimal | null
    utilizationRate: Decimal | null
  }

  export type AppointmentMetricMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    providerId: string | null
    appointmentType: string | null
    scheduledCount: number | null
    completedCount: number | null
    cancelledCount: number | null
    noShowCount: number | null
    averageDuration: number | null
    productionAmount: Decimal | null
    utilizationRate: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMetricMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    providerId: string | null
    appointmentType: string | null
    scheduledCount: number | null
    completedCount: number | null
    cancelledCount: number | null
    noShowCount: number | null
    averageDuration: number | null
    productionAmount: Decimal | null
    utilizationRate: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMetricCountAggregateOutputType = {
    id: number
    clinicId: number
    date: number
    providerId: number
    appointmentType: number
    scheduledCount: number
    completedCount: number
    cancelledCount: number
    noShowCount: number
    averageDuration: number
    productionAmount: number
    utilizationRate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMetricAvgAggregateInputType = {
    scheduledCount?: true
    completedCount?: true
    cancelledCount?: true
    noShowCount?: true
    averageDuration?: true
    productionAmount?: true
    utilizationRate?: true
  }

  export type AppointmentMetricSumAggregateInputType = {
    scheduledCount?: true
    completedCount?: true
    cancelledCount?: true
    noShowCount?: true
    averageDuration?: true
    productionAmount?: true
    utilizationRate?: true
  }

  export type AppointmentMetricMinAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    providerId?: true
    appointmentType?: true
    scheduledCount?: true
    completedCount?: true
    cancelledCount?: true
    noShowCount?: true
    averageDuration?: true
    productionAmount?: true
    utilizationRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMetricMaxAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    providerId?: true
    appointmentType?: true
    scheduledCount?: true
    completedCount?: true
    cancelledCount?: true
    noShowCount?: true
    averageDuration?: true
    productionAmount?: true
    utilizationRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMetricCountAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    providerId?: true
    appointmentType?: true
    scheduledCount?: true
    completedCount?: true
    cancelledCount?: true
    noShowCount?: true
    averageDuration?: true
    productionAmount?: true
    utilizationRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentMetric to aggregate.
     */
    where?: AppointmentMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentMetrics to fetch.
     */
    orderBy?: AppointmentMetricOrderByWithRelationInput | AppointmentMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppointmentMetrics
    **/
    _count?: true | AppointmentMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMetricMaxAggregateInputType
  }

  export type GetAppointmentMetricAggregateType<T extends AppointmentMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointmentMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointmentMetric[P]>
      : GetScalarType<T[P], AggregateAppointmentMetric[P]>
  }




  export type AppointmentMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentMetricWhereInput
    orderBy?: AppointmentMetricOrderByWithAggregationInput | AppointmentMetricOrderByWithAggregationInput[]
    by: AppointmentMetricScalarFieldEnum[] | AppointmentMetricScalarFieldEnum
    having?: AppointmentMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentMetricCountAggregateInputType | true
    _avg?: AppointmentMetricAvgAggregateInputType
    _sum?: AppointmentMetricSumAggregateInputType
    _min?: AppointmentMetricMinAggregateInputType
    _max?: AppointmentMetricMaxAggregateInputType
  }

  export type AppointmentMetricGroupByOutputType = {
    id: string
    clinicId: string
    date: Date
    providerId: string | null
    appointmentType: string
    scheduledCount: number
    completedCount: number
    cancelledCount: number
    noShowCount: number
    averageDuration: number | null
    productionAmount: Decimal | null
    utilizationRate: Decimal | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentMetricCountAggregateOutputType | null
    _avg: AppointmentMetricAvgAggregateOutputType | null
    _sum: AppointmentMetricSumAggregateOutputType | null
    _min: AppointmentMetricMinAggregateOutputType | null
    _max: AppointmentMetricMaxAggregateOutputType | null
  }

  type GetAppointmentMetricGroupByPayload<T extends AppointmentMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentMetricGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentMetricGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    providerId?: boolean
    appointmentType?: boolean
    scheduledCount?: boolean
    completedCount?: boolean
    cancelledCount?: boolean
    noShowCount?: boolean
    averageDuration?: boolean
    productionAmount?: boolean
    utilizationRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appointmentMetric"]>

  export type AppointmentMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    providerId?: boolean
    appointmentType?: boolean
    scheduledCount?: boolean
    completedCount?: boolean
    cancelledCount?: boolean
    noShowCount?: boolean
    averageDuration?: boolean
    productionAmount?: boolean
    utilizationRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appointmentMetric"]>

  export type AppointmentMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    providerId?: boolean
    appointmentType?: boolean
    scheduledCount?: boolean
    completedCount?: boolean
    cancelledCount?: boolean
    noShowCount?: boolean
    averageDuration?: boolean
    productionAmount?: boolean
    utilizationRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appointmentMetric"]>

  export type AppointmentMetricSelectScalar = {
    id?: boolean
    clinicId?: boolean
    date?: boolean
    providerId?: boolean
    appointmentType?: boolean
    scheduledCount?: boolean
    completedCount?: boolean
    cancelledCount?: boolean
    noShowCount?: boolean
    averageDuration?: boolean
    productionAmount?: boolean
    utilizationRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "date" | "providerId" | "appointmentType" | "scheduledCount" | "completedCount" | "cancelledCount" | "noShowCount" | "averageDuration" | "productionAmount" | "utilizationRate" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["appointmentMetric"]>

  export type $AppointmentMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppointmentMetric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      date: Date
      providerId: string | null
      appointmentType: string
      scheduledCount: number
      completedCount: number
      cancelledCount: number
      noShowCount: number
      averageDuration: number | null
      productionAmount: Prisma.Decimal | null
      utilizationRate: Prisma.Decimal | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointmentMetric"]>
    composites: {}
  }

  type AppointmentMetricGetPayload<S extends boolean | null | undefined | AppointmentMetricDefaultArgs> = $Result.GetResult<Prisma.$AppointmentMetricPayload, S>

  type AppointmentMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentMetricCountAggregateInputType | true
    }

  export interface AppointmentMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppointmentMetric'], meta: { name: 'AppointmentMetric' } }
    /**
     * Find zero or one AppointmentMetric that matches the filter.
     * @param {AppointmentMetricFindUniqueArgs} args - Arguments to find a AppointmentMetric
     * @example
     * // Get one AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentMetricFindUniqueArgs>(args: SelectSubset<T, AppointmentMetricFindUniqueArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppointmentMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentMetricFindUniqueOrThrowArgs} args - Arguments to find a AppointmentMetric
     * @example
     * // Get one AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricFindFirstArgs} args - Arguments to find a AppointmentMetric
     * @example
     * // Get one AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentMetricFindFirstArgs>(args?: SelectSubset<T, AppointmentMetricFindFirstArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppointmentMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricFindFirstOrThrowArgs} args - Arguments to find a AppointmentMetric
     * @example
     * // Get one AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppointmentMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppointmentMetrics
     * const appointmentMetrics = await prisma.appointmentMetric.findMany()
     * 
     * // Get first 10 AppointmentMetrics
     * const appointmentMetrics = await prisma.appointmentMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentMetricWithIdOnly = await prisma.appointmentMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentMetricFindManyArgs>(args?: SelectSubset<T, AppointmentMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppointmentMetric.
     * @param {AppointmentMetricCreateArgs} args - Arguments to create a AppointmentMetric.
     * @example
     * // Create one AppointmentMetric
     * const AppointmentMetric = await prisma.appointmentMetric.create({
     *   data: {
     *     // ... data to create a AppointmentMetric
     *   }
     * })
     * 
     */
    create<T extends AppointmentMetricCreateArgs>(args: SelectSubset<T, AppointmentMetricCreateArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppointmentMetrics.
     * @param {AppointmentMetricCreateManyArgs} args - Arguments to create many AppointmentMetrics.
     * @example
     * // Create many AppointmentMetrics
     * const appointmentMetric = await prisma.appointmentMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentMetricCreateManyArgs>(args?: SelectSubset<T, AppointmentMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppointmentMetrics and returns the data saved in the database.
     * @param {AppointmentMetricCreateManyAndReturnArgs} args - Arguments to create many AppointmentMetrics.
     * @example
     * // Create many AppointmentMetrics
     * const appointmentMetric = await prisma.appointmentMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppointmentMetrics and only return the `id`
     * const appointmentMetricWithIdOnly = await prisma.appointmentMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppointmentMetric.
     * @param {AppointmentMetricDeleteArgs} args - Arguments to delete one AppointmentMetric.
     * @example
     * // Delete one AppointmentMetric
     * const AppointmentMetric = await prisma.appointmentMetric.delete({
     *   where: {
     *     // ... filter to delete one AppointmentMetric
     *   }
     * })
     * 
     */
    delete<T extends AppointmentMetricDeleteArgs>(args: SelectSubset<T, AppointmentMetricDeleteArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppointmentMetric.
     * @param {AppointmentMetricUpdateArgs} args - Arguments to update one AppointmentMetric.
     * @example
     * // Update one AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentMetricUpdateArgs>(args: SelectSubset<T, AppointmentMetricUpdateArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppointmentMetrics.
     * @param {AppointmentMetricDeleteManyArgs} args - Arguments to filter AppointmentMetrics to delete.
     * @example
     * // Delete a few AppointmentMetrics
     * const { count } = await prisma.appointmentMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentMetricDeleteManyArgs>(args?: SelectSubset<T, AppointmentMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppointmentMetrics
     * const appointmentMetric = await prisma.appointmentMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentMetricUpdateManyArgs>(args: SelectSubset<T, AppointmentMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentMetrics and returns the data updated in the database.
     * @param {AppointmentMetricUpdateManyAndReturnArgs} args - Arguments to update many AppointmentMetrics.
     * @example
     * // Update many AppointmentMetrics
     * const appointmentMetric = await prisma.appointmentMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppointmentMetrics and only return the `id`
     * const appointmentMetricWithIdOnly = await prisma.appointmentMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppointmentMetric.
     * @param {AppointmentMetricUpsertArgs} args - Arguments to update or create a AppointmentMetric.
     * @example
     * // Update or create a AppointmentMetric
     * const appointmentMetric = await prisma.appointmentMetric.upsert({
     *   create: {
     *     // ... data to create a AppointmentMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppointmentMetric we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentMetricUpsertArgs>(args: SelectSubset<T, AppointmentMetricUpsertArgs<ExtArgs>>): Prisma__AppointmentMetricClient<$Result.GetResult<Prisma.$AppointmentMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppointmentMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricCountArgs} args - Arguments to filter AppointmentMetrics to count.
     * @example
     * // Count the number of AppointmentMetrics
     * const count = await prisma.appointmentMetric.count({
     *   where: {
     *     // ... the filter for the AppointmentMetrics we want to count
     *   }
     * })
    **/
    count<T extends AppointmentMetricCountArgs>(
      args?: Subset<T, AppointmentMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppointmentMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentMetricAggregateArgs>(args: Subset<T, AppointmentMetricAggregateArgs>): Prisma.PrismaPromise<GetAppointmentMetricAggregateType<T>>

    /**
     * Group by AppointmentMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentMetricGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppointmentMetric model
   */
  readonly fields: AppointmentMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppointmentMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppointmentMetric model
   */
  interface AppointmentMetricFieldRefs {
    readonly id: FieldRef<"AppointmentMetric", 'String'>
    readonly clinicId: FieldRef<"AppointmentMetric", 'String'>
    readonly date: FieldRef<"AppointmentMetric", 'DateTime'>
    readonly providerId: FieldRef<"AppointmentMetric", 'String'>
    readonly appointmentType: FieldRef<"AppointmentMetric", 'String'>
    readonly scheduledCount: FieldRef<"AppointmentMetric", 'Int'>
    readonly completedCount: FieldRef<"AppointmentMetric", 'Int'>
    readonly cancelledCount: FieldRef<"AppointmentMetric", 'Int'>
    readonly noShowCount: FieldRef<"AppointmentMetric", 'Int'>
    readonly averageDuration: FieldRef<"AppointmentMetric", 'Int'>
    readonly productionAmount: FieldRef<"AppointmentMetric", 'Decimal'>
    readonly utilizationRate: FieldRef<"AppointmentMetric", 'Decimal'>
    readonly createdBy: FieldRef<"AppointmentMetric", 'String'>
    readonly createdAt: FieldRef<"AppointmentMetric", 'DateTime'>
    readonly updatedAt: FieldRef<"AppointmentMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppointmentMetric findUnique
   */
  export type AppointmentMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter, which AppointmentMetric to fetch.
     */
    where: AppointmentMetricWhereUniqueInput
  }

  /**
   * AppointmentMetric findUniqueOrThrow
   */
  export type AppointmentMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter, which AppointmentMetric to fetch.
     */
    where: AppointmentMetricWhereUniqueInput
  }

  /**
   * AppointmentMetric findFirst
   */
  export type AppointmentMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter, which AppointmentMetric to fetch.
     */
    where?: AppointmentMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentMetrics to fetch.
     */
    orderBy?: AppointmentMetricOrderByWithRelationInput | AppointmentMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentMetrics.
     */
    cursor?: AppointmentMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentMetrics.
     */
    distinct?: AppointmentMetricScalarFieldEnum | AppointmentMetricScalarFieldEnum[]
  }

  /**
   * AppointmentMetric findFirstOrThrow
   */
  export type AppointmentMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter, which AppointmentMetric to fetch.
     */
    where?: AppointmentMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentMetrics to fetch.
     */
    orderBy?: AppointmentMetricOrderByWithRelationInput | AppointmentMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentMetrics.
     */
    cursor?: AppointmentMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentMetrics.
     */
    distinct?: AppointmentMetricScalarFieldEnum | AppointmentMetricScalarFieldEnum[]
  }

  /**
   * AppointmentMetric findMany
   */
  export type AppointmentMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter, which AppointmentMetrics to fetch.
     */
    where?: AppointmentMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentMetrics to fetch.
     */
    orderBy?: AppointmentMetricOrderByWithRelationInput | AppointmentMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppointmentMetrics.
     */
    cursor?: AppointmentMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentMetrics.
     */
    skip?: number
    distinct?: AppointmentMetricScalarFieldEnum | AppointmentMetricScalarFieldEnum[]
  }

  /**
   * AppointmentMetric create
   */
  export type AppointmentMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * The data needed to create a AppointmentMetric.
     */
    data: XOR<AppointmentMetricCreateInput, AppointmentMetricUncheckedCreateInput>
  }

  /**
   * AppointmentMetric createMany
   */
  export type AppointmentMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppointmentMetrics.
     */
    data: AppointmentMetricCreateManyInput | AppointmentMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppointmentMetric createManyAndReturn
   */
  export type AppointmentMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * The data used to create many AppointmentMetrics.
     */
    data: AppointmentMetricCreateManyInput | AppointmentMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AppointmentMetric update
   */
  export type AppointmentMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * The data needed to update a AppointmentMetric.
     */
    data: XOR<AppointmentMetricUpdateInput, AppointmentMetricUncheckedUpdateInput>
    /**
     * Choose, which AppointmentMetric to update.
     */
    where: AppointmentMetricWhereUniqueInput
  }

  /**
   * AppointmentMetric updateMany
   */
  export type AppointmentMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppointmentMetrics.
     */
    data: XOR<AppointmentMetricUpdateManyMutationInput, AppointmentMetricUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentMetrics to update
     */
    where?: AppointmentMetricWhereInput
    /**
     * Limit how many AppointmentMetrics to update.
     */
    limit?: number
  }

  /**
   * AppointmentMetric updateManyAndReturn
   */
  export type AppointmentMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * The data used to update AppointmentMetrics.
     */
    data: XOR<AppointmentMetricUpdateManyMutationInput, AppointmentMetricUncheckedUpdateManyInput>
    /**
     * Filter which AppointmentMetrics to update
     */
    where?: AppointmentMetricWhereInput
    /**
     * Limit how many AppointmentMetrics to update.
     */
    limit?: number
  }

  /**
   * AppointmentMetric upsert
   */
  export type AppointmentMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * The filter to search for the AppointmentMetric to update in case it exists.
     */
    where: AppointmentMetricWhereUniqueInput
    /**
     * In case the AppointmentMetric found by the `where` argument doesn't exist, create a new AppointmentMetric with this data.
     */
    create: XOR<AppointmentMetricCreateInput, AppointmentMetricUncheckedCreateInput>
    /**
     * In case the AppointmentMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentMetricUpdateInput, AppointmentMetricUncheckedUpdateInput>
  }

  /**
   * AppointmentMetric delete
   */
  export type AppointmentMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
    /**
     * Filter which AppointmentMetric to delete.
     */
    where: AppointmentMetricWhereUniqueInput
  }

  /**
   * AppointmentMetric deleteMany
   */
  export type AppointmentMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppointmentMetrics to delete
     */
    where?: AppointmentMetricWhereInput
    /**
     * Limit how many AppointmentMetrics to delete.
     */
    limit?: number
  }

  /**
   * AppointmentMetric without action
   */
  export type AppointmentMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentMetric
     */
    select?: AppointmentMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppointmentMetric
     */
    omit?: AppointmentMetricOmit<ExtArgs> | null
  }


  /**
   * Model CallMetric
   */

  export type AggregateCallMetric = {
    _count: CallMetricCountAggregateOutputType | null
    _avg: CallMetricAvgAggregateOutputType | null
    _sum: CallMetricSumAggregateOutputType | null
    _min: CallMetricMinAggregateOutputType | null
    _max: CallMetricMaxAggregateOutputType | null
  }

  export type CallMetricAvgAggregateOutputType = {
    totalCalls: number | null
    connectedCalls: number | null
    voicemails: number | null
    appointmentsScheduled: number | null
    conversionRate: Decimal | null
    averageCallDuration: number | null
  }

  export type CallMetricSumAggregateOutputType = {
    totalCalls: number | null
    connectedCalls: number | null
    voicemails: number | null
    appointmentsScheduled: number | null
    conversionRate: Decimal | null
    averageCallDuration: number | null
  }

  export type CallMetricMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    callType: string | null
    totalCalls: number | null
    connectedCalls: number | null
    voicemails: number | null
    appointmentsScheduled: number | null
    conversionRate: Decimal | null
    averageCallDuration: number | null
    staffMemberId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CallMetricMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    callType: string | null
    totalCalls: number | null
    connectedCalls: number | null
    voicemails: number | null
    appointmentsScheduled: number | null
    conversionRate: Decimal | null
    averageCallDuration: number | null
    staffMemberId: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CallMetricCountAggregateOutputType = {
    id: number
    clinicId: number
    date: number
    callType: number
    totalCalls: number
    connectedCalls: number
    voicemails: number
    appointmentsScheduled: number
    conversionRate: number
    averageCallDuration: number
    staffMemberId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CallMetricAvgAggregateInputType = {
    totalCalls?: true
    connectedCalls?: true
    voicemails?: true
    appointmentsScheduled?: true
    conversionRate?: true
    averageCallDuration?: true
  }

  export type CallMetricSumAggregateInputType = {
    totalCalls?: true
    connectedCalls?: true
    voicemails?: true
    appointmentsScheduled?: true
    conversionRate?: true
    averageCallDuration?: true
  }

  export type CallMetricMinAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    callType?: true
    totalCalls?: true
    connectedCalls?: true
    voicemails?: true
    appointmentsScheduled?: true
    conversionRate?: true
    averageCallDuration?: true
    staffMemberId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CallMetricMaxAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    callType?: true
    totalCalls?: true
    connectedCalls?: true
    voicemails?: true
    appointmentsScheduled?: true
    conversionRate?: true
    averageCallDuration?: true
    staffMemberId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CallMetricCountAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    callType?: true
    totalCalls?: true
    connectedCalls?: true
    voicemails?: true
    appointmentsScheduled?: true
    conversionRate?: true
    averageCallDuration?: true
    staffMemberId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CallMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallMetric to aggregate.
     */
    where?: CallMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallMetrics to fetch.
     */
    orderBy?: CallMetricOrderByWithRelationInput | CallMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CallMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CallMetrics
    **/
    _count?: true | CallMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CallMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CallMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CallMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CallMetricMaxAggregateInputType
  }

  export type GetCallMetricAggregateType<T extends CallMetricAggregateArgs> = {
        [P in keyof T & keyof AggregateCallMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCallMetric[P]>
      : GetScalarType<T[P], AggregateCallMetric[P]>
  }




  export type CallMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallMetricWhereInput
    orderBy?: CallMetricOrderByWithAggregationInput | CallMetricOrderByWithAggregationInput[]
    by: CallMetricScalarFieldEnum[] | CallMetricScalarFieldEnum
    having?: CallMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CallMetricCountAggregateInputType | true
    _avg?: CallMetricAvgAggregateInputType
    _sum?: CallMetricSumAggregateInputType
    _min?: CallMetricMinAggregateInputType
    _max?: CallMetricMaxAggregateInputType
  }

  export type CallMetricGroupByOutputType = {
    id: string
    clinicId: string
    date: Date
    callType: string
    totalCalls: number
    connectedCalls: number
    voicemails: number
    appointmentsScheduled: number
    conversionRate: Decimal
    averageCallDuration: number | null
    staffMemberId: string | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: CallMetricCountAggregateOutputType | null
    _avg: CallMetricAvgAggregateOutputType | null
    _sum: CallMetricSumAggregateOutputType | null
    _min: CallMetricMinAggregateOutputType | null
    _max: CallMetricMaxAggregateOutputType | null
  }

  type GetCallMetricGroupByPayload<T extends CallMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CallMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CallMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CallMetricGroupByOutputType[P]>
            : GetScalarType<T[P], CallMetricGroupByOutputType[P]>
        }
      >
    >


  export type CallMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    callType?: boolean
    totalCalls?: boolean
    connectedCalls?: boolean
    voicemails?: boolean
    appointmentsScheduled?: boolean
    conversionRate?: boolean
    averageCallDuration?: boolean
    staffMemberId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["callMetric"]>

  export type CallMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    callType?: boolean
    totalCalls?: boolean
    connectedCalls?: boolean
    voicemails?: boolean
    appointmentsScheduled?: boolean
    conversionRate?: boolean
    averageCallDuration?: boolean
    staffMemberId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["callMetric"]>

  export type CallMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    callType?: boolean
    totalCalls?: boolean
    connectedCalls?: boolean
    voicemails?: boolean
    appointmentsScheduled?: boolean
    conversionRate?: boolean
    averageCallDuration?: boolean
    staffMemberId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["callMetric"]>

  export type CallMetricSelectScalar = {
    id?: boolean
    clinicId?: boolean
    date?: boolean
    callType?: boolean
    totalCalls?: boolean
    connectedCalls?: boolean
    voicemails?: boolean
    appointmentsScheduled?: boolean
    conversionRate?: boolean
    averageCallDuration?: boolean
    staffMemberId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CallMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "date" | "callType" | "totalCalls" | "connectedCalls" | "voicemails" | "appointmentsScheduled" | "conversionRate" | "averageCallDuration" | "staffMemberId" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["callMetric"]>

  export type $CallMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CallMetric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      date: Date
      callType: string
      totalCalls: number
      connectedCalls: number
      voicemails: number
      appointmentsScheduled: number
      conversionRate: Prisma.Decimal
      averageCallDuration: number | null
      staffMemberId: string | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["callMetric"]>
    composites: {}
  }

  type CallMetricGetPayload<S extends boolean | null | undefined | CallMetricDefaultArgs> = $Result.GetResult<Prisma.$CallMetricPayload, S>

  type CallMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CallMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CallMetricCountAggregateInputType | true
    }

  export interface CallMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CallMetric'], meta: { name: 'CallMetric' } }
    /**
     * Find zero or one CallMetric that matches the filter.
     * @param {CallMetricFindUniqueArgs} args - Arguments to find a CallMetric
     * @example
     * // Get one CallMetric
     * const callMetric = await prisma.callMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CallMetricFindUniqueArgs>(args: SelectSubset<T, CallMetricFindUniqueArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CallMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CallMetricFindUniqueOrThrowArgs} args - Arguments to find a CallMetric
     * @example
     * // Get one CallMetric
     * const callMetric = await prisma.callMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CallMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, CallMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CallMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricFindFirstArgs} args - Arguments to find a CallMetric
     * @example
     * // Get one CallMetric
     * const callMetric = await prisma.callMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CallMetricFindFirstArgs>(args?: SelectSubset<T, CallMetricFindFirstArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CallMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricFindFirstOrThrowArgs} args - Arguments to find a CallMetric
     * @example
     * // Get one CallMetric
     * const callMetric = await prisma.callMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CallMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, CallMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CallMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CallMetrics
     * const callMetrics = await prisma.callMetric.findMany()
     * 
     * // Get first 10 CallMetrics
     * const callMetrics = await prisma.callMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const callMetricWithIdOnly = await prisma.callMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CallMetricFindManyArgs>(args?: SelectSubset<T, CallMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CallMetric.
     * @param {CallMetricCreateArgs} args - Arguments to create a CallMetric.
     * @example
     * // Create one CallMetric
     * const CallMetric = await prisma.callMetric.create({
     *   data: {
     *     // ... data to create a CallMetric
     *   }
     * })
     * 
     */
    create<T extends CallMetricCreateArgs>(args: SelectSubset<T, CallMetricCreateArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CallMetrics.
     * @param {CallMetricCreateManyArgs} args - Arguments to create many CallMetrics.
     * @example
     * // Create many CallMetrics
     * const callMetric = await prisma.callMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CallMetricCreateManyArgs>(args?: SelectSubset<T, CallMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CallMetrics and returns the data saved in the database.
     * @param {CallMetricCreateManyAndReturnArgs} args - Arguments to create many CallMetrics.
     * @example
     * // Create many CallMetrics
     * const callMetric = await prisma.callMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CallMetrics and only return the `id`
     * const callMetricWithIdOnly = await prisma.callMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CallMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, CallMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CallMetric.
     * @param {CallMetricDeleteArgs} args - Arguments to delete one CallMetric.
     * @example
     * // Delete one CallMetric
     * const CallMetric = await prisma.callMetric.delete({
     *   where: {
     *     // ... filter to delete one CallMetric
     *   }
     * })
     * 
     */
    delete<T extends CallMetricDeleteArgs>(args: SelectSubset<T, CallMetricDeleteArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CallMetric.
     * @param {CallMetricUpdateArgs} args - Arguments to update one CallMetric.
     * @example
     * // Update one CallMetric
     * const callMetric = await prisma.callMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CallMetricUpdateArgs>(args: SelectSubset<T, CallMetricUpdateArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CallMetrics.
     * @param {CallMetricDeleteManyArgs} args - Arguments to filter CallMetrics to delete.
     * @example
     * // Delete a few CallMetrics
     * const { count } = await prisma.callMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CallMetricDeleteManyArgs>(args?: SelectSubset<T, CallMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CallMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CallMetrics
     * const callMetric = await prisma.callMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CallMetricUpdateManyArgs>(args: SelectSubset<T, CallMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CallMetrics and returns the data updated in the database.
     * @param {CallMetricUpdateManyAndReturnArgs} args - Arguments to update many CallMetrics.
     * @example
     * // Update many CallMetrics
     * const callMetric = await prisma.callMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CallMetrics and only return the `id`
     * const callMetricWithIdOnly = await prisma.callMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CallMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, CallMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CallMetric.
     * @param {CallMetricUpsertArgs} args - Arguments to update or create a CallMetric.
     * @example
     * // Update or create a CallMetric
     * const callMetric = await prisma.callMetric.upsert({
     *   create: {
     *     // ... data to create a CallMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CallMetric we want to update
     *   }
     * })
     */
    upsert<T extends CallMetricUpsertArgs>(args: SelectSubset<T, CallMetricUpsertArgs<ExtArgs>>): Prisma__CallMetricClient<$Result.GetResult<Prisma.$CallMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CallMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricCountArgs} args - Arguments to filter CallMetrics to count.
     * @example
     * // Count the number of CallMetrics
     * const count = await prisma.callMetric.count({
     *   where: {
     *     // ... the filter for the CallMetrics we want to count
     *   }
     * })
    **/
    count<T extends CallMetricCountArgs>(
      args?: Subset<T, CallMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CallMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CallMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CallMetricAggregateArgs>(args: Subset<T, CallMetricAggregateArgs>): Prisma.PrismaPromise<GetCallMetricAggregateType<T>>

    /**
     * Group by CallMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CallMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CallMetricGroupByArgs['orderBy'] }
        : { orderBy?: CallMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CallMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CallMetric model
   */
  readonly fields: CallMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CallMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CallMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CallMetric model
   */
  interface CallMetricFieldRefs {
    readonly id: FieldRef<"CallMetric", 'String'>
    readonly clinicId: FieldRef<"CallMetric", 'String'>
    readonly date: FieldRef<"CallMetric", 'DateTime'>
    readonly callType: FieldRef<"CallMetric", 'String'>
    readonly totalCalls: FieldRef<"CallMetric", 'Int'>
    readonly connectedCalls: FieldRef<"CallMetric", 'Int'>
    readonly voicemails: FieldRef<"CallMetric", 'Int'>
    readonly appointmentsScheduled: FieldRef<"CallMetric", 'Int'>
    readonly conversionRate: FieldRef<"CallMetric", 'Decimal'>
    readonly averageCallDuration: FieldRef<"CallMetric", 'Int'>
    readonly staffMemberId: FieldRef<"CallMetric", 'String'>
    readonly createdBy: FieldRef<"CallMetric", 'String'>
    readonly createdAt: FieldRef<"CallMetric", 'DateTime'>
    readonly updatedAt: FieldRef<"CallMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CallMetric findUnique
   */
  export type CallMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter, which CallMetric to fetch.
     */
    where: CallMetricWhereUniqueInput
  }

  /**
   * CallMetric findUniqueOrThrow
   */
  export type CallMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter, which CallMetric to fetch.
     */
    where: CallMetricWhereUniqueInput
  }

  /**
   * CallMetric findFirst
   */
  export type CallMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter, which CallMetric to fetch.
     */
    where?: CallMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallMetrics to fetch.
     */
    orderBy?: CallMetricOrderByWithRelationInput | CallMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallMetrics.
     */
    cursor?: CallMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallMetrics.
     */
    distinct?: CallMetricScalarFieldEnum | CallMetricScalarFieldEnum[]
  }

  /**
   * CallMetric findFirstOrThrow
   */
  export type CallMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter, which CallMetric to fetch.
     */
    where?: CallMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallMetrics to fetch.
     */
    orderBy?: CallMetricOrderByWithRelationInput | CallMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CallMetrics.
     */
    cursor?: CallMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CallMetrics.
     */
    distinct?: CallMetricScalarFieldEnum | CallMetricScalarFieldEnum[]
  }

  /**
   * CallMetric findMany
   */
  export type CallMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter, which CallMetrics to fetch.
     */
    where?: CallMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CallMetrics to fetch.
     */
    orderBy?: CallMetricOrderByWithRelationInput | CallMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CallMetrics.
     */
    cursor?: CallMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CallMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CallMetrics.
     */
    skip?: number
    distinct?: CallMetricScalarFieldEnum | CallMetricScalarFieldEnum[]
  }

  /**
   * CallMetric create
   */
  export type CallMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * The data needed to create a CallMetric.
     */
    data: XOR<CallMetricCreateInput, CallMetricUncheckedCreateInput>
  }

  /**
   * CallMetric createMany
   */
  export type CallMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CallMetrics.
     */
    data: CallMetricCreateManyInput | CallMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallMetric createManyAndReturn
   */
  export type CallMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * The data used to create many CallMetrics.
     */
    data: CallMetricCreateManyInput | CallMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CallMetric update
   */
  export type CallMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * The data needed to update a CallMetric.
     */
    data: XOR<CallMetricUpdateInput, CallMetricUncheckedUpdateInput>
    /**
     * Choose, which CallMetric to update.
     */
    where: CallMetricWhereUniqueInput
  }

  /**
   * CallMetric updateMany
   */
  export type CallMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CallMetrics.
     */
    data: XOR<CallMetricUpdateManyMutationInput, CallMetricUncheckedUpdateManyInput>
    /**
     * Filter which CallMetrics to update
     */
    where?: CallMetricWhereInput
    /**
     * Limit how many CallMetrics to update.
     */
    limit?: number
  }

  /**
   * CallMetric updateManyAndReturn
   */
  export type CallMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * The data used to update CallMetrics.
     */
    data: XOR<CallMetricUpdateManyMutationInput, CallMetricUncheckedUpdateManyInput>
    /**
     * Filter which CallMetrics to update
     */
    where?: CallMetricWhereInput
    /**
     * Limit how many CallMetrics to update.
     */
    limit?: number
  }

  /**
   * CallMetric upsert
   */
  export type CallMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * The filter to search for the CallMetric to update in case it exists.
     */
    where: CallMetricWhereUniqueInput
    /**
     * In case the CallMetric found by the `where` argument doesn't exist, create a new CallMetric with this data.
     */
    create: XOR<CallMetricCreateInput, CallMetricUncheckedCreateInput>
    /**
     * In case the CallMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CallMetricUpdateInput, CallMetricUncheckedUpdateInput>
  }

  /**
   * CallMetric delete
   */
  export type CallMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
    /**
     * Filter which CallMetric to delete.
     */
    where: CallMetricWhereUniqueInput
  }

  /**
   * CallMetric deleteMany
   */
  export type CallMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CallMetrics to delete
     */
    where?: CallMetricWhereInput
    /**
     * Limit how many CallMetrics to delete.
     */
    limit?: number
  }

  /**
   * CallMetric without action
   */
  export type CallMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CallMetric
     */
    select?: CallMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CallMetric
     */
    omit?: CallMetricOmit<ExtArgs> | null
  }


  /**
   * Model PatientMetric
   */

  export type AggregatePatientMetric = {
    _count: PatientMetricCountAggregateOutputType | null
    _avg: PatientMetricAvgAggregateOutputType | null
    _sum: PatientMetricSumAggregateOutputType | null
    _min: PatientMetricMinAggregateOutputType | null
    _max: PatientMetricMaxAggregateOutputType | null
  }

  export type PatientMetricAvgAggregateOutputType = {
    activePatients: number | null
    newPatients: number | null
    reactivatedPatients: number | null
    lostPatients: number | null
    patientRetentionRate: Decimal | null
    averagePatientValue: Decimal | null
    recareComplianceRate: Decimal | null
    treatmentAcceptanceRate: Decimal | null
  }

  export type PatientMetricSumAggregateOutputType = {
    activePatients: number | null
    newPatients: number | null
    reactivatedPatients: number | null
    lostPatients: number | null
    patientRetentionRate: Decimal | null
    averagePatientValue: Decimal | null
    recareComplianceRate: Decimal | null
    treatmentAcceptanceRate: Decimal | null
  }

  export type PatientMetricMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    activePatients: number | null
    newPatients: number | null
    reactivatedPatients: number | null
    lostPatients: number | null
    patientRetentionRate: Decimal | null
    averagePatientValue: Decimal | null
    recareComplianceRate: Decimal | null
    treatmentAcceptanceRate: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMetricMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    date: Date | null
    activePatients: number | null
    newPatients: number | null
    reactivatedPatients: number | null
    lostPatients: number | null
    patientRetentionRate: Decimal | null
    averagePatientValue: Decimal | null
    recareComplianceRate: Decimal | null
    treatmentAcceptanceRate: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMetricCountAggregateOutputType = {
    id: number
    clinicId: number
    date: number
    activePatients: number
    newPatients: number
    reactivatedPatients: number
    lostPatients: number
    patientRetentionRate: number
    averagePatientValue: number
    recareComplianceRate: number
    treatmentAcceptanceRate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientMetricAvgAggregateInputType = {
    activePatients?: true
    newPatients?: true
    reactivatedPatients?: true
    lostPatients?: true
    patientRetentionRate?: true
    averagePatientValue?: true
    recareComplianceRate?: true
    treatmentAcceptanceRate?: true
  }

  export type PatientMetricSumAggregateInputType = {
    activePatients?: true
    newPatients?: true
    reactivatedPatients?: true
    lostPatients?: true
    patientRetentionRate?: true
    averagePatientValue?: true
    recareComplianceRate?: true
    treatmentAcceptanceRate?: true
  }

  export type PatientMetricMinAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    activePatients?: true
    newPatients?: true
    reactivatedPatients?: true
    lostPatients?: true
    patientRetentionRate?: true
    averagePatientValue?: true
    recareComplianceRate?: true
    treatmentAcceptanceRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMetricMaxAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    activePatients?: true
    newPatients?: true
    reactivatedPatients?: true
    lostPatients?: true
    patientRetentionRate?: true
    averagePatientValue?: true
    recareComplianceRate?: true
    treatmentAcceptanceRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMetricCountAggregateInputType = {
    id?: true
    clinicId?: true
    date?: true
    activePatients?: true
    newPatients?: true
    reactivatedPatients?: true
    lostPatients?: true
    patientRetentionRate?: true
    averagePatientValue?: true
    recareComplianceRate?: true
    treatmentAcceptanceRate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMetric to aggregate.
     */
    where?: PatientMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMetrics to fetch.
     */
    orderBy?: PatientMetricOrderByWithRelationInput | PatientMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientMetrics
    **/
    _count?: true | PatientMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMetricMaxAggregateInputType
  }

  export type GetPatientMetricAggregateType<T extends PatientMetricAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientMetric[P]>
      : GetScalarType<T[P], AggregatePatientMetric[P]>
  }




  export type PatientMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMetricWhereInput
    orderBy?: PatientMetricOrderByWithAggregationInput | PatientMetricOrderByWithAggregationInput[]
    by: PatientMetricScalarFieldEnum[] | PatientMetricScalarFieldEnum
    having?: PatientMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientMetricCountAggregateInputType | true
    _avg?: PatientMetricAvgAggregateInputType
    _sum?: PatientMetricSumAggregateInputType
    _min?: PatientMetricMinAggregateInputType
    _max?: PatientMetricMaxAggregateInputType
  }

  export type PatientMetricGroupByOutputType = {
    id: string
    clinicId: string
    date: Date
    activePatients: number
    newPatients: number
    reactivatedPatients: number
    lostPatients: number
    patientRetentionRate: Decimal
    averagePatientValue: Decimal | null
    recareComplianceRate: Decimal | null
    treatmentAcceptanceRate: Decimal | null
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: PatientMetricCountAggregateOutputType | null
    _avg: PatientMetricAvgAggregateOutputType | null
    _sum: PatientMetricSumAggregateOutputType | null
    _min: PatientMetricMinAggregateOutputType | null
    _max: PatientMetricMaxAggregateOutputType | null
  }

  type GetPatientMetricGroupByPayload<T extends PatientMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientMetricGroupByOutputType[P]>
            : GetScalarType<T[P], PatientMetricGroupByOutputType[P]>
        }
      >
    >


  export type PatientMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    activePatients?: boolean
    newPatients?: boolean
    reactivatedPatients?: boolean
    lostPatients?: boolean
    patientRetentionRate?: boolean
    averagePatientValue?: boolean
    recareComplianceRate?: boolean
    treatmentAcceptanceRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patientMetric"]>

  export type PatientMetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    activePatients?: boolean
    newPatients?: boolean
    reactivatedPatients?: boolean
    lostPatients?: boolean
    patientRetentionRate?: boolean
    averagePatientValue?: boolean
    recareComplianceRate?: boolean
    treatmentAcceptanceRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patientMetric"]>

  export type PatientMetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    date?: boolean
    activePatients?: boolean
    newPatients?: boolean
    reactivatedPatients?: boolean
    lostPatients?: boolean
    patientRetentionRate?: boolean
    averagePatientValue?: boolean
    recareComplianceRate?: boolean
    treatmentAcceptanceRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patientMetric"]>

  export type PatientMetricSelectScalar = {
    id?: boolean
    clinicId?: boolean
    date?: boolean
    activePatients?: boolean
    newPatients?: boolean
    reactivatedPatients?: boolean
    lostPatients?: boolean
    patientRetentionRate?: boolean
    averagePatientValue?: boolean
    recareComplianceRate?: boolean
    treatmentAcceptanceRate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientMetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "date" | "activePatients" | "newPatients" | "reactivatedPatients" | "lostPatients" | "patientRetentionRate" | "averagePatientValue" | "recareComplianceRate" | "treatmentAcceptanceRate" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["patientMetric"]>

  export type $PatientMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientMetric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      date: Date
      activePatients: number
      newPatients: number
      reactivatedPatients: number
      lostPatients: number
      patientRetentionRate: Prisma.Decimal
      averagePatientValue: Prisma.Decimal | null
      recareComplianceRate: Prisma.Decimal | null
      treatmentAcceptanceRate: Prisma.Decimal | null
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientMetric"]>
    composites: {}
  }

  type PatientMetricGetPayload<S extends boolean | null | undefined | PatientMetricDefaultArgs> = $Result.GetResult<Prisma.$PatientMetricPayload, S>

  type PatientMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientMetricCountAggregateInputType | true
    }

  export interface PatientMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientMetric'], meta: { name: 'PatientMetric' } }
    /**
     * Find zero or one PatientMetric that matches the filter.
     * @param {PatientMetricFindUniqueArgs} args - Arguments to find a PatientMetric
     * @example
     * // Get one PatientMetric
     * const patientMetric = await prisma.patientMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientMetricFindUniqueArgs>(args: SelectSubset<T, PatientMetricFindUniqueArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientMetric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientMetricFindUniqueOrThrowArgs} args - Arguments to find a PatientMetric
     * @example
     * // Get one PatientMetric
     * const patientMetric = await prisma.patientMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientMetricFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientMetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricFindFirstArgs} args - Arguments to find a PatientMetric
     * @example
     * // Get one PatientMetric
     * const patientMetric = await prisma.patientMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientMetricFindFirstArgs>(args?: SelectSubset<T, PatientMetricFindFirstArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricFindFirstOrThrowArgs} args - Arguments to find a PatientMetric
     * @example
     * // Get one PatientMetric
     * const patientMetric = await prisma.patientMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientMetricFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientMetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientMetrics
     * const patientMetrics = await prisma.patientMetric.findMany()
     * 
     * // Get first 10 PatientMetrics
     * const patientMetrics = await prisma.patientMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientMetricWithIdOnly = await prisma.patientMetric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientMetricFindManyArgs>(args?: SelectSubset<T, PatientMetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientMetric.
     * @param {PatientMetricCreateArgs} args - Arguments to create a PatientMetric.
     * @example
     * // Create one PatientMetric
     * const PatientMetric = await prisma.patientMetric.create({
     *   data: {
     *     // ... data to create a PatientMetric
     *   }
     * })
     * 
     */
    create<T extends PatientMetricCreateArgs>(args: SelectSubset<T, PatientMetricCreateArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientMetrics.
     * @param {PatientMetricCreateManyArgs} args - Arguments to create many PatientMetrics.
     * @example
     * // Create many PatientMetrics
     * const patientMetric = await prisma.patientMetric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientMetricCreateManyArgs>(args?: SelectSubset<T, PatientMetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientMetrics and returns the data saved in the database.
     * @param {PatientMetricCreateManyAndReturnArgs} args - Arguments to create many PatientMetrics.
     * @example
     * // Create many PatientMetrics
     * const patientMetric = await prisma.patientMetric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientMetrics and only return the `id`
     * const patientMetricWithIdOnly = await prisma.patientMetric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientMetricCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientMetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientMetric.
     * @param {PatientMetricDeleteArgs} args - Arguments to delete one PatientMetric.
     * @example
     * // Delete one PatientMetric
     * const PatientMetric = await prisma.patientMetric.delete({
     *   where: {
     *     // ... filter to delete one PatientMetric
     *   }
     * })
     * 
     */
    delete<T extends PatientMetricDeleteArgs>(args: SelectSubset<T, PatientMetricDeleteArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientMetric.
     * @param {PatientMetricUpdateArgs} args - Arguments to update one PatientMetric.
     * @example
     * // Update one PatientMetric
     * const patientMetric = await prisma.patientMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientMetricUpdateArgs>(args: SelectSubset<T, PatientMetricUpdateArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientMetrics.
     * @param {PatientMetricDeleteManyArgs} args - Arguments to filter PatientMetrics to delete.
     * @example
     * // Delete a few PatientMetrics
     * const { count } = await prisma.patientMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientMetricDeleteManyArgs>(args?: SelectSubset<T, PatientMetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientMetrics
     * const patientMetric = await prisma.patientMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientMetricUpdateManyArgs>(args: SelectSubset<T, PatientMetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientMetrics and returns the data updated in the database.
     * @param {PatientMetricUpdateManyAndReturnArgs} args - Arguments to update many PatientMetrics.
     * @example
     * // Update many PatientMetrics
     * const patientMetric = await prisma.patientMetric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientMetrics and only return the `id`
     * const patientMetricWithIdOnly = await prisma.patientMetric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientMetricUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientMetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientMetric.
     * @param {PatientMetricUpsertArgs} args - Arguments to update or create a PatientMetric.
     * @example
     * // Update or create a PatientMetric
     * const patientMetric = await prisma.patientMetric.upsert({
     *   create: {
     *     // ... data to create a PatientMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientMetric we want to update
     *   }
     * })
     */
    upsert<T extends PatientMetricUpsertArgs>(args: SelectSubset<T, PatientMetricUpsertArgs<ExtArgs>>): Prisma__PatientMetricClient<$Result.GetResult<Prisma.$PatientMetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricCountArgs} args - Arguments to filter PatientMetrics to count.
     * @example
     * // Count the number of PatientMetrics
     * const count = await prisma.patientMetric.count({
     *   where: {
     *     // ... the filter for the PatientMetrics we want to count
     *   }
     * })
    **/
    count<T extends PatientMetricCountArgs>(
      args?: Subset<T, PatientMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientMetricAggregateArgs>(args: Subset<T, PatientMetricAggregateArgs>): Prisma.PrismaPromise<GetPatientMetricAggregateType<T>>

    /**
     * Group by PatientMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientMetricGroupByArgs['orderBy'] }
        : { orderBy?: PatientMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientMetric model
   */
  readonly fields: PatientMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientMetric model
   */
  interface PatientMetricFieldRefs {
    readonly id: FieldRef<"PatientMetric", 'String'>
    readonly clinicId: FieldRef<"PatientMetric", 'String'>
    readonly date: FieldRef<"PatientMetric", 'DateTime'>
    readonly activePatients: FieldRef<"PatientMetric", 'Int'>
    readonly newPatients: FieldRef<"PatientMetric", 'Int'>
    readonly reactivatedPatients: FieldRef<"PatientMetric", 'Int'>
    readonly lostPatients: FieldRef<"PatientMetric", 'Int'>
    readonly patientRetentionRate: FieldRef<"PatientMetric", 'Decimal'>
    readonly averagePatientValue: FieldRef<"PatientMetric", 'Decimal'>
    readonly recareComplianceRate: FieldRef<"PatientMetric", 'Decimal'>
    readonly treatmentAcceptanceRate: FieldRef<"PatientMetric", 'Decimal'>
    readonly createdBy: FieldRef<"PatientMetric", 'String'>
    readonly createdAt: FieldRef<"PatientMetric", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientMetric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientMetric findUnique
   */
  export type PatientMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter, which PatientMetric to fetch.
     */
    where: PatientMetricWhereUniqueInput
  }

  /**
   * PatientMetric findUniqueOrThrow
   */
  export type PatientMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter, which PatientMetric to fetch.
     */
    where: PatientMetricWhereUniqueInput
  }

  /**
   * PatientMetric findFirst
   */
  export type PatientMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter, which PatientMetric to fetch.
     */
    where?: PatientMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMetrics to fetch.
     */
    orderBy?: PatientMetricOrderByWithRelationInput | PatientMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMetrics.
     */
    cursor?: PatientMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMetrics.
     */
    distinct?: PatientMetricScalarFieldEnum | PatientMetricScalarFieldEnum[]
  }

  /**
   * PatientMetric findFirstOrThrow
   */
  export type PatientMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter, which PatientMetric to fetch.
     */
    where?: PatientMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMetrics to fetch.
     */
    orderBy?: PatientMetricOrderByWithRelationInput | PatientMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMetrics.
     */
    cursor?: PatientMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMetrics.
     */
    distinct?: PatientMetricScalarFieldEnum | PatientMetricScalarFieldEnum[]
  }

  /**
   * PatientMetric findMany
   */
  export type PatientMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter, which PatientMetrics to fetch.
     */
    where?: PatientMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMetrics to fetch.
     */
    orderBy?: PatientMetricOrderByWithRelationInput | PatientMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientMetrics.
     */
    cursor?: PatientMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMetrics.
     */
    skip?: number
    distinct?: PatientMetricScalarFieldEnum | PatientMetricScalarFieldEnum[]
  }

  /**
   * PatientMetric create
   */
  export type PatientMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * The data needed to create a PatientMetric.
     */
    data: XOR<PatientMetricCreateInput, PatientMetricUncheckedCreateInput>
  }

  /**
   * PatientMetric createMany
   */
  export type PatientMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientMetrics.
     */
    data: PatientMetricCreateManyInput | PatientMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientMetric createManyAndReturn
   */
  export type PatientMetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * The data used to create many PatientMetrics.
     */
    data: PatientMetricCreateManyInput | PatientMetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientMetric update
   */
  export type PatientMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * The data needed to update a PatientMetric.
     */
    data: XOR<PatientMetricUpdateInput, PatientMetricUncheckedUpdateInput>
    /**
     * Choose, which PatientMetric to update.
     */
    where: PatientMetricWhereUniqueInput
  }

  /**
   * PatientMetric updateMany
   */
  export type PatientMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientMetrics.
     */
    data: XOR<PatientMetricUpdateManyMutationInput, PatientMetricUncheckedUpdateManyInput>
    /**
     * Filter which PatientMetrics to update
     */
    where?: PatientMetricWhereInput
    /**
     * Limit how many PatientMetrics to update.
     */
    limit?: number
  }

  /**
   * PatientMetric updateManyAndReturn
   */
  export type PatientMetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * The data used to update PatientMetrics.
     */
    data: XOR<PatientMetricUpdateManyMutationInput, PatientMetricUncheckedUpdateManyInput>
    /**
     * Filter which PatientMetrics to update
     */
    where?: PatientMetricWhereInput
    /**
     * Limit how many PatientMetrics to update.
     */
    limit?: number
  }

  /**
   * PatientMetric upsert
   */
  export type PatientMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * The filter to search for the PatientMetric to update in case it exists.
     */
    where: PatientMetricWhereUniqueInput
    /**
     * In case the PatientMetric found by the `where` argument doesn't exist, create a new PatientMetric with this data.
     */
    create: XOR<PatientMetricCreateInput, PatientMetricUncheckedCreateInput>
    /**
     * In case the PatientMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientMetricUpdateInput, PatientMetricUncheckedUpdateInput>
  }

  /**
   * PatientMetric delete
   */
  export type PatientMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
    /**
     * Filter which PatientMetric to delete.
     */
    where: PatientMetricWhereUniqueInput
  }

  /**
   * PatientMetric deleteMany
   */
  export type PatientMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMetrics to delete
     */
    where?: PatientMetricWhereInput
    /**
     * Limit how many PatientMetrics to delete.
     */
    limit?: number
  }

  /**
   * PatientMetric without action
   */
  export type PatientMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMetric
     */
    select?: PatientMetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMetric
     */
    omit?: PatientMetricOmit<ExtArgs> | null
  }


  /**
   * Model MetricAggregation
   */

  export type AggregateMetricAggregation = {
    _count: MetricAggregationCountAggregateOutputType | null
    _avg: MetricAggregationAvgAggregateOutputType | null
    _sum: MetricAggregationSumAggregateOutputType | null
    _min: MetricAggregationMinAggregateOutputType | null
    _max: MetricAggregationMaxAggregateOutputType | null
  }

  export type MetricAggregationAvgAggregateOutputType = {
    value: Decimal | null
    count: number | null
    minimum: Decimal | null
    maximum: Decimal | null
    average: Decimal | null
    standardDeviation: Decimal | null
  }

  export type MetricAggregationSumAggregateOutputType = {
    value: Decimal | null
    count: number | null
    minimum: Decimal | null
    maximum: Decimal | null
    average: Decimal | null
    standardDeviation: Decimal | null
  }

  export type MetricAggregationMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    metricDefinitionId: string | null
    aggregationType: string | null
    periodStart: Date | null
    periodEnd: Date | null
    value: Decimal | null
    count: number | null
    minimum: Decimal | null
    maximum: Decimal | null
    average: Decimal | null
    standardDeviation: Decimal | null
    providerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricAggregationMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    metricDefinitionId: string | null
    aggregationType: string | null
    periodStart: Date | null
    periodEnd: Date | null
    value: Decimal | null
    count: number | null
    minimum: Decimal | null
    maximum: Decimal | null
    average: Decimal | null
    standardDeviation: Decimal | null
    providerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricAggregationCountAggregateOutputType = {
    id: number
    clinicId: number
    metricDefinitionId: number
    aggregationType: number
    periodStart: number
    periodEnd: number
    value: number
    count: number
    minimum: number
    maximum: number
    average: number
    standardDeviation: number
    providerId: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MetricAggregationAvgAggregateInputType = {
    value?: true
    count?: true
    minimum?: true
    maximum?: true
    average?: true
    standardDeviation?: true
  }

  export type MetricAggregationSumAggregateInputType = {
    value?: true
    count?: true
    minimum?: true
    maximum?: true
    average?: true
    standardDeviation?: true
  }

  export type MetricAggregationMinAggregateInputType = {
    id?: true
    clinicId?: true
    metricDefinitionId?: true
    aggregationType?: true
    periodStart?: true
    periodEnd?: true
    value?: true
    count?: true
    minimum?: true
    maximum?: true
    average?: true
    standardDeviation?: true
    providerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricAggregationMaxAggregateInputType = {
    id?: true
    clinicId?: true
    metricDefinitionId?: true
    aggregationType?: true
    periodStart?: true
    periodEnd?: true
    value?: true
    count?: true
    minimum?: true
    maximum?: true
    average?: true
    standardDeviation?: true
    providerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricAggregationCountAggregateInputType = {
    id?: true
    clinicId?: true
    metricDefinitionId?: true
    aggregationType?: true
    periodStart?: true
    periodEnd?: true
    value?: true
    count?: true
    minimum?: true
    maximum?: true
    average?: true
    standardDeviation?: true
    providerId?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MetricAggregationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricAggregation to aggregate.
     */
    where?: MetricAggregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricAggregations to fetch.
     */
    orderBy?: MetricAggregationOrderByWithRelationInput | MetricAggregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricAggregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricAggregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricAggregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricAggregations
    **/
    _count?: true | MetricAggregationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetricAggregationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetricAggregationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricAggregationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricAggregationMaxAggregateInputType
  }

  export type GetMetricAggregationAggregateType<T extends MetricAggregationAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricAggregation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricAggregation[P]>
      : GetScalarType<T[P], AggregateMetricAggregation[P]>
  }




  export type MetricAggregationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricAggregationWhereInput
    orderBy?: MetricAggregationOrderByWithAggregationInput | MetricAggregationOrderByWithAggregationInput[]
    by: MetricAggregationScalarFieldEnum[] | MetricAggregationScalarFieldEnum
    having?: MetricAggregationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricAggregationCountAggregateInputType | true
    _avg?: MetricAggregationAvgAggregateInputType
    _sum?: MetricAggregationSumAggregateInputType
    _min?: MetricAggregationMinAggregateInputType
    _max?: MetricAggregationMaxAggregateInputType
  }

  export type MetricAggregationGroupByOutputType = {
    id: string
    clinicId: string
    metricDefinitionId: string
    aggregationType: string
    periodStart: Date
    periodEnd: Date
    value: Decimal
    count: number
    minimum: Decimal | null
    maximum: Decimal | null
    average: Decimal | null
    standardDeviation: Decimal | null
    providerId: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: MetricAggregationCountAggregateOutputType | null
    _avg: MetricAggregationAvgAggregateOutputType | null
    _sum: MetricAggregationSumAggregateOutputType | null
    _min: MetricAggregationMinAggregateOutputType | null
    _max: MetricAggregationMaxAggregateOutputType | null
  }

  type GetMetricAggregationGroupByPayload<T extends MetricAggregationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricAggregationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricAggregationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricAggregationGroupByOutputType[P]>
            : GetScalarType<T[P], MetricAggregationGroupByOutputType[P]>
        }
      >
    >


  export type MetricAggregationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    metricDefinitionId?: boolean
    aggregationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    value?: boolean
    count?: boolean
    minimum?: boolean
    maximum?: boolean
    average?: boolean
    standardDeviation?: boolean
    providerId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricAggregation"]>

  export type MetricAggregationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    metricDefinitionId?: boolean
    aggregationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    value?: boolean
    count?: boolean
    minimum?: boolean
    maximum?: boolean
    average?: boolean
    standardDeviation?: boolean
    providerId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricAggregation"]>

  export type MetricAggregationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    metricDefinitionId?: boolean
    aggregationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    value?: boolean
    count?: boolean
    minimum?: boolean
    maximum?: boolean
    average?: boolean
    standardDeviation?: boolean
    providerId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["metricAggregation"]>

  export type MetricAggregationSelectScalar = {
    id?: boolean
    clinicId?: boolean
    metricDefinitionId?: boolean
    aggregationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    value?: boolean
    count?: boolean
    minimum?: boolean
    maximum?: boolean
    average?: boolean
    standardDeviation?: boolean
    providerId?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MetricAggregationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "metricDefinitionId" | "aggregationType" | "periodStart" | "periodEnd" | "value" | "count" | "minimum" | "maximum" | "average" | "standardDeviation" | "providerId" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["metricAggregation"]>

  export type $MetricAggregationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricAggregation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      metricDefinitionId: string
      aggregationType: string
      periodStart: Date
      periodEnd: Date
      value: Prisma.Decimal
      count: number
      minimum: Prisma.Decimal | null
      maximum: Prisma.Decimal | null
      average: Prisma.Decimal | null
      standardDeviation: Prisma.Decimal | null
      providerId: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["metricAggregation"]>
    composites: {}
  }

  type MetricAggregationGetPayload<S extends boolean | null | undefined | MetricAggregationDefaultArgs> = $Result.GetResult<Prisma.$MetricAggregationPayload, S>

  type MetricAggregationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricAggregationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricAggregationCountAggregateInputType | true
    }

  export interface MetricAggregationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricAggregation'], meta: { name: 'MetricAggregation' } }
    /**
     * Find zero or one MetricAggregation that matches the filter.
     * @param {MetricAggregationFindUniqueArgs} args - Arguments to find a MetricAggregation
     * @example
     * // Get one MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricAggregationFindUniqueArgs>(args: SelectSubset<T, MetricAggregationFindUniqueArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetricAggregation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricAggregationFindUniqueOrThrowArgs} args - Arguments to find a MetricAggregation
     * @example
     * // Get one MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricAggregationFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricAggregationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricAggregation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationFindFirstArgs} args - Arguments to find a MetricAggregation
     * @example
     * // Get one MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricAggregationFindFirstArgs>(args?: SelectSubset<T, MetricAggregationFindFirstArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricAggregation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationFindFirstOrThrowArgs} args - Arguments to find a MetricAggregation
     * @example
     * // Get one MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricAggregationFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricAggregationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetricAggregations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricAggregations
     * const metricAggregations = await prisma.metricAggregation.findMany()
     * 
     * // Get first 10 MetricAggregations
     * const metricAggregations = await prisma.metricAggregation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricAggregationWithIdOnly = await prisma.metricAggregation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricAggregationFindManyArgs>(args?: SelectSubset<T, MetricAggregationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetricAggregation.
     * @param {MetricAggregationCreateArgs} args - Arguments to create a MetricAggregation.
     * @example
     * // Create one MetricAggregation
     * const MetricAggregation = await prisma.metricAggregation.create({
     *   data: {
     *     // ... data to create a MetricAggregation
     *   }
     * })
     * 
     */
    create<T extends MetricAggregationCreateArgs>(args: SelectSubset<T, MetricAggregationCreateArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetricAggregations.
     * @param {MetricAggregationCreateManyArgs} args - Arguments to create many MetricAggregations.
     * @example
     * // Create many MetricAggregations
     * const metricAggregation = await prisma.metricAggregation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricAggregationCreateManyArgs>(args?: SelectSubset<T, MetricAggregationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricAggregations and returns the data saved in the database.
     * @param {MetricAggregationCreateManyAndReturnArgs} args - Arguments to create many MetricAggregations.
     * @example
     * // Create many MetricAggregations
     * const metricAggregation = await prisma.metricAggregation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricAggregations and only return the `id`
     * const metricAggregationWithIdOnly = await prisma.metricAggregation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricAggregationCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricAggregationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetricAggregation.
     * @param {MetricAggregationDeleteArgs} args - Arguments to delete one MetricAggregation.
     * @example
     * // Delete one MetricAggregation
     * const MetricAggregation = await prisma.metricAggregation.delete({
     *   where: {
     *     // ... filter to delete one MetricAggregation
     *   }
     * })
     * 
     */
    delete<T extends MetricAggregationDeleteArgs>(args: SelectSubset<T, MetricAggregationDeleteArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetricAggregation.
     * @param {MetricAggregationUpdateArgs} args - Arguments to update one MetricAggregation.
     * @example
     * // Update one MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricAggregationUpdateArgs>(args: SelectSubset<T, MetricAggregationUpdateArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetricAggregations.
     * @param {MetricAggregationDeleteManyArgs} args - Arguments to filter MetricAggregations to delete.
     * @example
     * // Delete a few MetricAggregations
     * const { count } = await prisma.metricAggregation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricAggregationDeleteManyArgs>(args?: SelectSubset<T, MetricAggregationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricAggregations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricAggregations
     * const metricAggregation = await prisma.metricAggregation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricAggregationUpdateManyArgs>(args: SelectSubset<T, MetricAggregationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricAggregations and returns the data updated in the database.
     * @param {MetricAggregationUpdateManyAndReturnArgs} args - Arguments to update many MetricAggregations.
     * @example
     * // Update many MetricAggregations
     * const metricAggregation = await prisma.metricAggregation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetricAggregations and only return the `id`
     * const metricAggregationWithIdOnly = await prisma.metricAggregation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricAggregationUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricAggregationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetricAggregation.
     * @param {MetricAggregationUpsertArgs} args - Arguments to update or create a MetricAggregation.
     * @example
     * // Update or create a MetricAggregation
     * const metricAggregation = await prisma.metricAggregation.upsert({
     *   create: {
     *     // ... data to create a MetricAggregation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricAggregation we want to update
     *   }
     * })
     */
    upsert<T extends MetricAggregationUpsertArgs>(args: SelectSubset<T, MetricAggregationUpsertArgs<ExtArgs>>): Prisma__MetricAggregationClient<$Result.GetResult<Prisma.$MetricAggregationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetricAggregations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationCountArgs} args - Arguments to filter MetricAggregations to count.
     * @example
     * // Count the number of MetricAggregations
     * const count = await prisma.metricAggregation.count({
     *   where: {
     *     // ... the filter for the MetricAggregations we want to count
     *   }
     * })
    **/
    count<T extends MetricAggregationCountArgs>(
      args?: Subset<T, MetricAggregationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricAggregationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricAggregation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricAggregationAggregateArgs>(args: Subset<T, MetricAggregationAggregateArgs>): Prisma.PrismaPromise<GetMetricAggregationAggregateType<T>>

    /**
     * Group by MetricAggregation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricAggregationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricAggregationGroupByArgs['orderBy'] }
        : { orderBy?: MetricAggregationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricAggregationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricAggregationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricAggregation model
   */
  readonly fields: MetricAggregationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricAggregation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricAggregationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricAggregation model
   */
  interface MetricAggregationFieldRefs {
    readonly id: FieldRef<"MetricAggregation", 'String'>
    readonly clinicId: FieldRef<"MetricAggregation", 'String'>
    readonly metricDefinitionId: FieldRef<"MetricAggregation", 'String'>
    readonly aggregationType: FieldRef<"MetricAggregation", 'String'>
    readonly periodStart: FieldRef<"MetricAggregation", 'DateTime'>
    readonly periodEnd: FieldRef<"MetricAggregation", 'DateTime'>
    readonly value: FieldRef<"MetricAggregation", 'Decimal'>
    readonly count: FieldRef<"MetricAggregation", 'Int'>
    readonly minimum: FieldRef<"MetricAggregation", 'Decimal'>
    readonly maximum: FieldRef<"MetricAggregation", 'Decimal'>
    readonly average: FieldRef<"MetricAggregation", 'Decimal'>
    readonly standardDeviation: FieldRef<"MetricAggregation", 'Decimal'>
    readonly providerId: FieldRef<"MetricAggregation", 'String'>
    readonly metadata: FieldRef<"MetricAggregation", 'Json'>
    readonly createdAt: FieldRef<"MetricAggregation", 'DateTime'>
    readonly updatedAt: FieldRef<"MetricAggregation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MetricAggregation findUnique
   */
  export type MetricAggregationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter, which MetricAggregation to fetch.
     */
    where: MetricAggregationWhereUniqueInput
  }

  /**
   * MetricAggregation findUniqueOrThrow
   */
  export type MetricAggregationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter, which MetricAggregation to fetch.
     */
    where: MetricAggregationWhereUniqueInput
  }

  /**
   * MetricAggregation findFirst
   */
  export type MetricAggregationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter, which MetricAggregation to fetch.
     */
    where?: MetricAggregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricAggregations to fetch.
     */
    orderBy?: MetricAggregationOrderByWithRelationInput | MetricAggregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricAggregations.
     */
    cursor?: MetricAggregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricAggregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricAggregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricAggregations.
     */
    distinct?: MetricAggregationScalarFieldEnum | MetricAggregationScalarFieldEnum[]
  }

  /**
   * MetricAggregation findFirstOrThrow
   */
  export type MetricAggregationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter, which MetricAggregation to fetch.
     */
    where?: MetricAggregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricAggregations to fetch.
     */
    orderBy?: MetricAggregationOrderByWithRelationInput | MetricAggregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricAggregations.
     */
    cursor?: MetricAggregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricAggregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricAggregations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricAggregations.
     */
    distinct?: MetricAggregationScalarFieldEnum | MetricAggregationScalarFieldEnum[]
  }

  /**
   * MetricAggregation findMany
   */
  export type MetricAggregationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter, which MetricAggregations to fetch.
     */
    where?: MetricAggregationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricAggregations to fetch.
     */
    orderBy?: MetricAggregationOrderByWithRelationInput | MetricAggregationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricAggregations.
     */
    cursor?: MetricAggregationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricAggregations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricAggregations.
     */
    skip?: number
    distinct?: MetricAggregationScalarFieldEnum | MetricAggregationScalarFieldEnum[]
  }

  /**
   * MetricAggregation create
   */
  export type MetricAggregationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * The data needed to create a MetricAggregation.
     */
    data: XOR<MetricAggregationCreateInput, MetricAggregationUncheckedCreateInput>
  }

  /**
   * MetricAggregation createMany
   */
  export type MetricAggregationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricAggregations.
     */
    data: MetricAggregationCreateManyInput | MetricAggregationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricAggregation createManyAndReturn
   */
  export type MetricAggregationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * The data used to create many MetricAggregations.
     */
    data: MetricAggregationCreateManyInput | MetricAggregationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricAggregation update
   */
  export type MetricAggregationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * The data needed to update a MetricAggregation.
     */
    data: XOR<MetricAggregationUpdateInput, MetricAggregationUncheckedUpdateInput>
    /**
     * Choose, which MetricAggregation to update.
     */
    where: MetricAggregationWhereUniqueInput
  }

  /**
   * MetricAggregation updateMany
   */
  export type MetricAggregationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricAggregations.
     */
    data: XOR<MetricAggregationUpdateManyMutationInput, MetricAggregationUncheckedUpdateManyInput>
    /**
     * Filter which MetricAggregations to update
     */
    where?: MetricAggregationWhereInput
    /**
     * Limit how many MetricAggregations to update.
     */
    limit?: number
  }

  /**
   * MetricAggregation updateManyAndReturn
   */
  export type MetricAggregationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * The data used to update MetricAggregations.
     */
    data: XOR<MetricAggregationUpdateManyMutationInput, MetricAggregationUncheckedUpdateManyInput>
    /**
     * Filter which MetricAggregations to update
     */
    where?: MetricAggregationWhereInput
    /**
     * Limit how many MetricAggregations to update.
     */
    limit?: number
  }

  /**
   * MetricAggregation upsert
   */
  export type MetricAggregationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * The filter to search for the MetricAggregation to update in case it exists.
     */
    where: MetricAggregationWhereUniqueInput
    /**
     * In case the MetricAggregation found by the `where` argument doesn't exist, create a new MetricAggregation with this data.
     */
    create: XOR<MetricAggregationCreateInput, MetricAggregationUncheckedCreateInput>
    /**
     * In case the MetricAggregation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricAggregationUpdateInput, MetricAggregationUncheckedUpdateInput>
  }

  /**
   * MetricAggregation delete
   */
  export type MetricAggregationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
    /**
     * Filter which MetricAggregation to delete.
     */
    where: MetricAggregationWhereUniqueInput
  }

  /**
   * MetricAggregation deleteMany
   */
  export type MetricAggregationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricAggregations to delete
     */
    where?: MetricAggregationWhereInput
    /**
     * Limit how many MetricAggregations to delete.
     */
    limit?: number
  }

  /**
   * MetricAggregation without action
   */
  export type MetricAggregationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricAggregation
     */
    select?: MetricAggregationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricAggregation
     */
    omit?: MetricAggregationOmit<ExtArgs> | null
  }


  /**
   * Model GoogleCredential
   */

  export type AggregateGoogleCredential = {
    _count: GoogleCredentialCountAggregateOutputType | null
    _min: GoogleCredentialMinAggregateOutputType | null
    _max: GoogleCredentialMaxAggregateOutputType | null
  }

  export type GoogleCredentialMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoogleCredentialMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GoogleCredentialCountAggregateOutputType = {
    id: number
    clinicId: number
    userId: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    scope: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GoogleCredentialMinAggregateInputType = {
    id?: true
    clinicId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoogleCredentialMaxAggregateInputType = {
    id?: true
    clinicId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GoogleCredentialCountAggregateInputType = {
    id?: true
    clinicId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    scope?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GoogleCredentialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoogleCredential to aggregate.
     */
    where?: GoogleCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleCredentials to fetch.
     */
    orderBy?: GoogleCredentialOrderByWithRelationInput | GoogleCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoogleCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoogleCredentials
    **/
    _count?: true | GoogleCredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoogleCredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoogleCredentialMaxAggregateInputType
  }

  export type GetGoogleCredentialAggregateType<T extends GoogleCredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateGoogleCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoogleCredential[P]>
      : GetScalarType<T[P], AggregateGoogleCredential[P]>
  }




  export type GoogleCredentialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoogleCredentialWhereInput
    orderBy?: GoogleCredentialOrderByWithAggregationInput | GoogleCredentialOrderByWithAggregationInput[]
    by: GoogleCredentialScalarFieldEnum[] | GoogleCredentialScalarFieldEnum
    having?: GoogleCredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoogleCredentialCountAggregateInputType | true
    _min?: GoogleCredentialMinAggregateInputType
    _max?: GoogleCredentialMaxAggregateInputType
  }

  export type GoogleCredentialGroupByOutputType = {
    id: string
    clinicId: string
    userId: string
    accessToken: string
    refreshToken: string
    expiresAt: Date
    scope: string[]
    createdAt: Date
    updatedAt: Date
    _count: GoogleCredentialCountAggregateOutputType | null
    _min: GoogleCredentialMinAggregateOutputType | null
    _max: GoogleCredentialMaxAggregateOutputType | null
  }

  type GetGoogleCredentialGroupByPayload<T extends GoogleCredentialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoogleCredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoogleCredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoogleCredentialGroupByOutputType[P]>
            : GetScalarType<T[P], GoogleCredentialGroupByOutputType[P]>
        }
      >
    >


  export type GoogleCredentialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["googleCredential"]>

  export type GoogleCredentialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["googleCredential"]>

  export type GoogleCredentialSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["googleCredential"]>

  export type GoogleCredentialSelectScalar = {
    id?: boolean
    clinicId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GoogleCredentialOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "userId" | "accessToken" | "refreshToken" | "expiresAt" | "scope" | "createdAt" | "updatedAt", ExtArgs["result"]["googleCredential"]>

  export type $GoogleCredentialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GoogleCredential"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      userId: string
      accessToken: string
      refreshToken: string
      expiresAt: Date
      scope: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["googleCredential"]>
    composites: {}
  }

  type GoogleCredentialGetPayload<S extends boolean | null | undefined | GoogleCredentialDefaultArgs> = $Result.GetResult<Prisma.$GoogleCredentialPayload, S>

  type GoogleCredentialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoogleCredentialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoogleCredentialCountAggregateInputType | true
    }

  export interface GoogleCredentialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GoogleCredential'], meta: { name: 'GoogleCredential' } }
    /**
     * Find zero or one GoogleCredential that matches the filter.
     * @param {GoogleCredentialFindUniqueArgs} args - Arguments to find a GoogleCredential
     * @example
     * // Get one GoogleCredential
     * const googleCredential = await prisma.googleCredential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoogleCredentialFindUniqueArgs>(args: SelectSubset<T, GoogleCredentialFindUniqueArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GoogleCredential that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoogleCredentialFindUniqueOrThrowArgs} args - Arguments to find a GoogleCredential
     * @example
     * // Get one GoogleCredential
     * const googleCredential = await prisma.googleCredential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoogleCredentialFindUniqueOrThrowArgs>(args: SelectSubset<T, GoogleCredentialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoogleCredential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialFindFirstArgs} args - Arguments to find a GoogleCredential
     * @example
     * // Get one GoogleCredential
     * const googleCredential = await prisma.googleCredential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoogleCredentialFindFirstArgs>(args?: SelectSubset<T, GoogleCredentialFindFirstArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GoogleCredential that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialFindFirstOrThrowArgs} args - Arguments to find a GoogleCredential
     * @example
     * // Get one GoogleCredential
     * const googleCredential = await prisma.googleCredential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoogleCredentialFindFirstOrThrowArgs>(args?: SelectSubset<T, GoogleCredentialFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GoogleCredentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoogleCredentials
     * const googleCredentials = await prisma.googleCredential.findMany()
     * 
     * // Get first 10 GoogleCredentials
     * const googleCredentials = await prisma.googleCredential.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const googleCredentialWithIdOnly = await prisma.googleCredential.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoogleCredentialFindManyArgs>(args?: SelectSubset<T, GoogleCredentialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GoogleCredential.
     * @param {GoogleCredentialCreateArgs} args - Arguments to create a GoogleCredential.
     * @example
     * // Create one GoogleCredential
     * const GoogleCredential = await prisma.googleCredential.create({
     *   data: {
     *     // ... data to create a GoogleCredential
     *   }
     * })
     * 
     */
    create<T extends GoogleCredentialCreateArgs>(args: SelectSubset<T, GoogleCredentialCreateArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GoogleCredentials.
     * @param {GoogleCredentialCreateManyArgs} args - Arguments to create many GoogleCredentials.
     * @example
     * // Create many GoogleCredentials
     * const googleCredential = await prisma.googleCredential.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoogleCredentialCreateManyArgs>(args?: SelectSubset<T, GoogleCredentialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GoogleCredentials and returns the data saved in the database.
     * @param {GoogleCredentialCreateManyAndReturnArgs} args - Arguments to create many GoogleCredentials.
     * @example
     * // Create many GoogleCredentials
     * const googleCredential = await prisma.googleCredential.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GoogleCredentials and only return the `id`
     * const googleCredentialWithIdOnly = await prisma.googleCredential.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoogleCredentialCreateManyAndReturnArgs>(args?: SelectSubset<T, GoogleCredentialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GoogleCredential.
     * @param {GoogleCredentialDeleteArgs} args - Arguments to delete one GoogleCredential.
     * @example
     * // Delete one GoogleCredential
     * const GoogleCredential = await prisma.googleCredential.delete({
     *   where: {
     *     // ... filter to delete one GoogleCredential
     *   }
     * })
     * 
     */
    delete<T extends GoogleCredentialDeleteArgs>(args: SelectSubset<T, GoogleCredentialDeleteArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GoogleCredential.
     * @param {GoogleCredentialUpdateArgs} args - Arguments to update one GoogleCredential.
     * @example
     * // Update one GoogleCredential
     * const googleCredential = await prisma.googleCredential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoogleCredentialUpdateArgs>(args: SelectSubset<T, GoogleCredentialUpdateArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GoogleCredentials.
     * @param {GoogleCredentialDeleteManyArgs} args - Arguments to filter GoogleCredentials to delete.
     * @example
     * // Delete a few GoogleCredentials
     * const { count } = await prisma.googleCredential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoogleCredentialDeleteManyArgs>(args?: SelectSubset<T, GoogleCredentialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoogleCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoogleCredentials
     * const googleCredential = await prisma.googleCredential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoogleCredentialUpdateManyArgs>(args: SelectSubset<T, GoogleCredentialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoogleCredentials and returns the data updated in the database.
     * @param {GoogleCredentialUpdateManyAndReturnArgs} args - Arguments to update many GoogleCredentials.
     * @example
     * // Update many GoogleCredentials
     * const googleCredential = await prisma.googleCredential.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GoogleCredentials and only return the `id`
     * const googleCredentialWithIdOnly = await prisma.googleCredential.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoogleCredentialUpdateManyAndReturnArgs>(args: SelectSubset<T, GoogleCredentialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GoogleCredential.
     * @param {GoogleCredentialUpsertArgs} args - Arguments to update or create a GoogleCredential.
     * @example
     * // Update or create a GoogleCredential
     * const googleCredential = await prisma.googleCredential.upsert({
     *   create: {
     *     // ... data to create a GoogleCredential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoogleCredential we want to update
     *   }
     * })
     */
    upsert<T extends GoogleCredentialUpsertArgs>(args: SelectSubset<T, GoogleCredentialUpsertArgs<ExtArgs>>): Prisma__GoogleCredentialClient<$Result.GetResult<Prisma.$GoogleCredentialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GoogleCredentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialCountArgs} args - Arguments to filter GoogleCredentials to count.
     * @example
     * // Count the number of GoogleCredentials
     * const count = await prisma.googleCredential.count({
     *   where: {
     *     // ... the filter for the GoogleCredentials we want to count
     *   }
     * })
    **/
    count<T extends GoogleCredentialCountArgs>(
      args?: Subset<T, GoogleCredentialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoogleCredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoogleCredential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoogleCredentialAggregateArgs>(args: Subset<T, GoogleCredentialAggregateArgs>): Prisma.PrismaPromise<GetGoogleCredentialAggregateType<T>>

    /**
     * Group by GoogleCredential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoogleCredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoogleCredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoogleCredentialGroupByArgs['orderBy'] }
        : { orderBy?: GoogleCredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoogleCredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoogleCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GoogleCredential model
   */
  readonly fields: GoogleCredentialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GoogleCredential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoogleCredentialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GoogleCredential model
   */
  interface GoogleCredentialFieldRefs {
    readonly id: FieldRef<"GoogleCredential", 'String'>
    readonly clinicId: FieldRef<"GoogleCredential", 'String'>
    readonly userId: FieldRef<"GoogleCredential", 'String'>
    readonly accessToken: FieldRef<"GoogleCredential", 'String'>
    readonly refreshToken: FieldRef<"GoogleCredential", 'String'>
    readonly expiresAt: FieldRef<"GoogleCredential", 'DateTime'>
    readonly scope: FieldRef<"GoogleCredential", 'String[]'>
    readonly createdAt: FieldRef<"GoogleCredential", 'DateTime'>
    readonly updatedAt: FieldRef<"GoogleCredential", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GoogleCredential findUnique
   */
  export type GoogleCredentialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter, which GoogleCredential to fetch.
     */
    where: GoogleCredentialWhereUniqueInput
  }

  /**
   * GoogleCredential findUniqueOrThrow
   */
  export type GoogleCredentialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter, which GoogleCredential to fetch.
     */
    where: GoogleCredentialWhereUniqueInput
  }

  /**
   * GoogleCredential findFirst
   */
  export type GoogleCredentialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter, which GoogleCredential to fetch.
     */
    where?: GoogleCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleCredentials to fetch.
     */
    orderBy?: GoogleCredentialOrderByWithRelationInput | GoogleCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoogleCredentials.
     */
    cursor?: GoogleCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoogleCredentials.
     */
    distinct?: GoogleCredentialScalarFieldEnum | GoogleCredentialScalarFieldEnum[]
  }

  /**
   * GoogleCredential findFirstOrThrow
   */
  export type GoogleCredentialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter, which GoogleCredential to fetch.
     */
    where?: GoogleCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleCredentials to fetch.
     */
    orderBy?: GoogleCredentialOrderByWithRelationInput | GoogleCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoogleCredentials.
     */
    cursor?: GoogleCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleCredentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoogleCredentials.
     */
    distinct?: GoogleCredentialScalarFieldEnum | GoogleCredentialScalarFieldEnum[]
  }

  /**
   * GoogleCredential findMany
   */
  export type GoogleCredentialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter, which GoogleCredentials to fetch.
     */
    where?: GoogleCredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoogleCredentials to fetch.
     */
    orderBy?: GoogleCredentialOrderByWithRelationInput | GoogleCredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoogleCredentials.
     */
    cursor?: GoogleCredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoogleCredentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoogleCredentials.
     */
    skip?: number
    distinct?: GoogleCredentialScalarFieldEnum | GoogleCredentialScalarFieldEnum[]
  }

  /**
   * GoogleCredential create
   */
  export type GoogleCredentialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * The data needed to create a GoogleCredential.
     */
    data: XOR<GoogleCredentialCreateInput, GoogleCredentialUncheckedCreateInput>
  }

  /**
   * GoogleCredential createMany
   */
  export type GoogleCredentialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GoogleCredentials.
     */
    data: GoogleCredentialCreateManyInput | GoogleCredentialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoogleCredential createManyAndReturn
   */
  export type GoogleCredentialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * The data used to create many GoogleCredentials.
     */
    data: GoogleCredentialCreateManyInput | GoogleCredentialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GoogleCredential update
   */
  export type GoogleCredentialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * The data needed to update a GoogleCredential.
     */
    data: XOR<GoogleCredentialUpdateInput, GoogleCredentialUncheckedUpdateInput>
    /**
     * Choose, which GoogleCredential to update.
     */
    where: GoogleCredentialWhereUniqueInput
  }

  /**
   * GoogleCredential updateMany
   */
  export type GoogleCredentialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GoogleCredentials.
     */
    data: XOR<GoogleCredentialUpdateManyMutationInput, GoogleCredentialUncheckedUpdateManyInput>
    /**
     * Filter which GoogleCredentials to update
     */
    where?: GoogleCredentialWhereInput
    /**
     * Limit how many GoogleCredentials to update.
     */
    limit?: number
  }

  /**
   * GoogleCredential updateManyAndReturn
   */
  export type GoogleCredentialUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * The data used to update GoogleCredentials.
     */
    data: XOR<GoogleCredentialUpdateManyMutationInput, GoogleCredentialUncheckedUpdateManyInput>
    /**
     * Filter which GoogleCredentials to update
     */
    where?: GoogleCredentialWhereInput
    /**
     * Limit how many GoogleCredentials to update.
     */
    limit?: number
  }

  /**
   * GoogleCredential upsert
   */
  export type GoogleCredentialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * The filter to search for the GoogleCredential to update in case it exists.
     */
    where: GoogleCredentialWhereUniqueInput
    /**
     * In case the GoogleCredential found by the `where` argument doesn't exist, create a new GoogleCredential with this data.
     */
    create: XOR<GoogleCredentialCreateInput, GoogleCredentialUncheckedCreateInput>
    /**
     * In case the GoogleCredential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoogleCredentialUpdateInput, GoogleCredentialUncheckedUpdateInput>
  }

  /**
   * GoogleCredential delete
   */
  export type GoogleCredentialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
    /**
     * Filter which GoogleCredential to delete.
     */
    where: GoogleCredentialWhereUniqueInput
  }

  /**
   * GoogleCredential deleteMany
   */
  export type GoogleCredentialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GoogleCredentials to delete
     */
    where?: GoogleCredentialWhereInput
    /**
     * Limit how many GoogleCredentials to delete.
     */
    limit?: number
  }

  /**
   * GoogleCredential without action
   */
  export type GoogleCredentialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoogleCredential
     */
    select?: GoogleCredentialSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GoogleCredential
     */
    omit?: GoogleCredentialOmit<ExtArgs> | null
  }


  /**
   * Model SpreadsheetConnection
   */

  export type AggregateSpreadsheetConnection = {
    _count: SpreadsheetConnectionCountAggregateOutputType | null
    _min: SpreadsheetConnectionMinAggregateOutputType | null
    _max: SpreadsheetConnectionMaxAggregateOutputType | null
  }

  export type SpreadsheetConnectionMinAggregateOutputType = {
    id: string | null
    clinicId: string | null
    credentialId: string | null
    spreadsheetId: string | null
    spreadsheetName: string | null
    lastSyncAt: Date | null
    syncStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpreadsheetConnectionMaxAggregateOutputType = {
    id: string | null
    clinicId: string | null
    credentialId: string | null
    spreadsheetId: string | null
    spreadsheetName: string | null
    lastSyncAt: Date | null
    syncStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpreadsheetConnectionCountAggregateOutputType = {
    id: number
    clinicId: number
    credentialId: number
    spreadsheetId: number
    spreadsheetName: number
    sheetNames: number
    lastSyncAt: number
    syncStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SpreadsheetConnectionMinAggregateInputType = {
    id?: true
    clinicId?: true
    credentialId?: true
    spreadsheetId?: true
    spreadsheetName?: true
    lastSyncAt?: true
    syncStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpreadsheetConnectionMaxAggregateInputType = {
    id?: true
    clinicId?: true
    credentialId?: true
    spreadsheetId?: true
    spreadsheetName?: true
    lastSyncAt?: true
    syncStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpreadsheetConnectionCountAggregateInputType = {
    id?: true
    clinicId?: true
    credentialId?: true
    spreadsheetId?: true
    spreadsheetName?: true
    sheetNames?: true
    lastSyncAt?: true
    syncStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SpreadsheetConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpreadsheetConnection to aggregate.
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpreadsheetConnections to fetch.
     */
    orderBy?: SpreadsheetConnectionOrderByWithRelationInput | SpreadsheetConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpreadsheetConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpreadsheetConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpreadsheetConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpreadsheetConnections
    **/
    _count?: true | SpreadsheetConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpreadsheetConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpreadsheetConnectionMaxAggregateInputType
  }

  export type GetSpreadsheetConnectionAggregateType<T extends SpreadsheetConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSpreadsheetConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpreadsheetConnection[P]>
      : GetScalarType<T[P], AggregateSpreadsheetConnection[P]>
  }




  export type SpreadsheetConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpreadsheetConnectionWhereInput
    orderBy?: SpreadsheetConnectionOrderByWithAggregationInput | SpreadsheetConnectionOrderByWithAggregationInput[]
    by: SpreadsheetConnectionScalarFieldEnum[] | SpreadsheetConnectionScalarFieldEnum
    having?: SpreadsheetConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpreadsheetConnectionCountAggregateInputType | true
    _min?: SpreadsheetConnectionMinAggregateInputType
    _max?: SpreadsheetConnectionMaxAggregateInputType
  }

  export type SpreadsheetConnectionGroupByOutputType = {
    id: string
    clinicId: string
    credentialId: string
    spreadsheetId: string
    spreadsheetName: string
    sheetNames: string[]
    lastSyncAt: Date | null
    syncStatus: string
    createdAt: Date
    updatedAt: Date
    _count: SpreadsheetConnectionCountAggregateOutputType | null
    _min: SpreadsheetConnectionMinAggregateOutputType | null
    _max: SpreadsheetConnectionMaxAggregateOutputType | null
  }

  type GetSpreadsheetConnectionGroupByPayload<T extends SpreadsheetConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpreadsheetConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpreadsheetConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpreadsheetConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], SpreadsheetConnectionGroupByOutputType[P]>
        }
      >
    >


  export type SpreadsheetConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    credentialId?: boolean
    spreadsheetId?: boolean
    spreadsheetName?: boolean
    sheetNames?: boolean
    lastSyncAt?: boolean
    syncStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["spreadsheetConnection"]>

  export type SpreadsheetConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    credentialId?: boolean
    spreadsheetId?: boolean
    spreadsheetName?: boolean
    sheetNames?: boolean
    lastSyncAt?: boolean
    syncStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["spreadsheetConnection"]>

  export type SpreadsheetConnectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clinicId?: boolean
    credentialId?: boolean
    spreadsheetId?: boolean
    spreadsheetName?: boolean
    sheetNames?: boolean
    lastSyncAt?: boolean
    syncStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["spreadsheetConnection"]>

  export type SpreadsheetConnectionSelectScalar = {
    id?: boolean
    clinicId?: boolean
    credentialId?: boolean
    spreadsheetId?: boolean
    spreadsheetName?: boolean
    sheetNames?: boolean
    lastSyncAt?: boolean
    syncStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SpreadsheetConnectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clinicId" | "credentialId" | "spreadsheetId" | "spreadsheetName" | "sheetNames" | "lastSyncAt" | "syncStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["spreadsheetConnection"]>

  export type $SpreadsheetConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpreadsheetConnection"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clinicId: string
      credentialId: string
      spreadsheetId: string
      spreadsheetName: string
      sheetNames: string[]
      lastSyncAt: Date | null
      syncStatus: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["spreadsheetConnection"]>
    composites: {}
  }

  type SpreadsheetConnectionGetPayload<S extends boolean | null | undefined | SpreadsheetConnectionDefaultArgs> = $Result.GetResult<Prisma.$SpreadsheetConnectionPayload, S>

  type SpreadsheetConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpreadsheetConnectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpreadsheetConnectionCountAggregateInputType | true
    }

  export interface SpreadsheetConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpreadsheetConnection'], meta: { name: 'SpreadsheetConnection' } }
    /**
     * Find zero or one SpreadsheetConnection that matches the filter.
     * @param {SpreadsheetConnectionFindUniqueArgs} args - Arguments to find a SpreadsheetConnection
     * @example
     * // Get one SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpreadsheetConnectionFindUniqueArgs>(args: SelectSubset<T, SpreadsheetConnectionFindUniqueArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpreadsheetConnection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpreadsheetConnectionFindUniqueOrThrowArgs} args - Arguments to find a SpreadsheetConnection
     * @example
     * // Get one SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpreadsheetConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SpreadsheetConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpreadsheetConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionFindFirstArgs} args - Arguments to find a SpreadsheetConnection
     * @example
     * // Get one SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpreadsheetConnectionFindFirstArgs>(args?: SelectSubset<T, SpreadsheetConnectionFindFirstArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpreadsheetConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionFindFirstOrThrowArgs} args - Arguments to find a SpreadsheetConnection
     * @example
     * // Get one SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpreadsheetConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SpreadsheetConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpreadsheetConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpreadsheetConnections
     * const spreadsheetConnections = await prisma.spreadsheetConnection.findMany()
     * 
     * // Get first 10 SpreadsheetConnections
     * const spreadsheetConnections = await prisma.spreadsheetConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spreadsheetConnectionWithIdOnly = await prisma.spreadsheetConnection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpreadsheetConnectionFindManyArgs>(args?: SelectSubset<T, SpreadsheetConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpreadsheetConnection.
     * @param {SpreadsheetConnectionCreateArgs} args - Arguments to create a SpreadsheetConnection.
     * @example
     * // Create one SpreadsheetConnection
     * const SpreadsheetConnection = await prisma.spreadsheetConnection.create({
     *   data: {
     *     // ... data to create a SpreadsheetConnection
     *   }
     * })
     * 
     */
    create<T extends SpreadsheetConnectionCreateArgs>(args: SelectSubset<T, SpreadsheetConnectionCreateArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpreadsheetConnections.
     * @param {SpreadsheetConnectionCreateManyArgs} args - Arguments to create many SpreadsheetConnections.
     * @example
     * // Create many SpreadsheetConnections
     * const spreadsheetConnection = await prisma.spreadsheetConnection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpreadsheetConnectionCreateManyArgs>(args?: SelectSubset<T, SpreadsheetConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpreadsheetConnections and returns the data saved in the database.
     * @param {SpreadsheetConnectionCreateManyAndReturnArgs} args - Arguments to create many SpreadsheetConnections.
     * @example
     * // Create many SpreadsheetConnections
     * const spreadsheetConnection = await prisma.spreadsheetConnection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpreadsheetConnections and only return the `id`
     * const spreadsheetConnectionWithIdOnly = await prisma.spreadsheetConnection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpreadsheetConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SpreadsheetConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpreadsheetConnection.
     * @param {SpreadsheetConnectionDeleteArgs} args - Arguments to delete one SpreadsheetConnection.
     * @example
     * // Delete one SpreadsheetConnection
     * const SpreadsheetConnection = await prisma.spreadsheetConnection.delete({
     *   where: {
     *     // ... filter to delete one SpreadsheetConnection
     *   }
     * })
     * 
     */
    delete<T extends SpreadsheetConnectionDeleteArgs>(args: SelectSubset<T, SpreadsheetConnectionDeleteArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpreadsheetConnection.
     * @param {SpreadsheetConnectionUpdateArgs} args - Arguments to update one SpreadsheetConnection.
     * @example
     * // Update one SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpreadsheetConnectionUpdateArgs>(args: SelectSubset<T, SpreadsheetConnectionUpdateArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpreadsheetConnections.
     * @param {SpreadsheetConnectionDeleteManyArgs} args - Arguments to filter SpreadsheetConnections to delete.
     * @example
     * // Delete a few SpreadsheetConnections
     * const { count } = await prisma.spreadsheetConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpreadsheetConnectionDeleteManyArgs>(args?: SelectSubset<T, SpreadsheetConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpreadsheetConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpreadsheetConnections
     * const spreadsheetConnection = await prisma.spreadsheetConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpreadsheetConnectionUpdateManyArgs>(args: SelectSubset<T, SpreadsheetConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpreadsheetConnections and returns the data updated in the database.
     * @param {SpreadsheetConnectionUpdateManyAndReturnArgs} args - Arguments to update many SpreadsheetConnections.
     * @example
     * // Update many SpreadsheetConnections
     * const spreadsheetConnection = await prisma.spreadsheetConnection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpreadsheetConnections and only return the `id`
     * const spreadsheetConnectionWithIdOnly = await prisma.spreadsheetConnection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpreadsheetConnectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SpreadsheetConnectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpreadsheetConnection.
     * @param {SpreadsheetConnectionUpsertArgs} args - Arguments to update or create a SpreadsheetConnection.
     * @example
     * // Update or create a SpreadsheetConnection
     * const spreadsheetConnection = await prisma.spreadsheetConnection.upsert({
     *   create: {
     *     // ... data to create a SpreadsheetConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpreadsheetConnection we want to update
     *   }
     * })
     */
    upsert<T extends SpreadsheetConnectionUpsertArgs>(args: SelectSubset<T, SpreadsheetConnectionUpsertArgs<ExtArgs>>): Prisma__SpreadsheetConnectionClient<$Result.GetResult<Prisma.$SpreadsheetConnectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpreadsheetConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionCountArgs} args - Arguments to filter SpreadsheetConnections to count.
     * @example
     * // Count the number of SpreadsheetConnections
     * const count = await prisma.spreadsheetConnection.count({
     *   where: {
     *     // ... the filter for the SpreadsheetConnections we want to count
     *   }
     * })
    **/
    count<T extends SpreadsheetConnectionCountArgs>(
      args?: Subset<T, SpreadsheetConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpreadsheetConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpreadsheetConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpreadsheetConnectionAggregateArgs>(args: Subset<T, SpreadsheetConnectionAggregateArgs>): Prisma.PrismaPromise<GetSpreadsheetConnectionAggregateType<T>>

    /**
     * Group by SpreadsheetConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpreadsheetConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpreadsheetConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpreadsheetConnectionGroupByArgs['orderBy'] }
        : { orderBy?: SpreadsheetConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpreadsheetConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpreadsheetConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpreadsheetConnection model
   */
  readonly fields: SpreadsheetConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpreadsheetConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpreadsheetConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpreadsheetConnection model
   */
  interface SpreadsheetConnectionFieldRefs {
    readonly id: FieldRef<"SpreadsheetConnection", 'String'>
    readonly clinicId: FieldRef<"SpreadsheetConnection", 'String'>
    readonly credentialId: FieldRef<"SpreadsheetConnection", 'String'>
    readonly spreadsheetId: FieldRef<"SpreadsheetConnection", 'String'>
    readonly spreadsheetName: FieldRef<"SpreadsheetConnection", 'String'>
    readonly sheetNames: FieldRef<"SpreadsheetConnection", 'String[]'>
    readonly lastSyncAt: FieldRef<"SpreadsheetConnection", 'DateTime'>
    readonly syncStatus: FieldRef<"SpreadsheetConnection", 'String'>
    readonly createdAt: FieldRef<"SpreadsheetConnection", 'DateTime'>
    readonly updatedAt: FieldRef<"SpreadsheetConnection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SpreadsheetConnection findUnique
   */
  export type SpreadsheetConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SpreadsheetConnection to fetch.
     */
    where: SpreadsheetConnectionWhereUniqueInput
  }

  /**
   * SpreadsheetConnection findUniqueOrThrow
   */
  export type SpreadsheetConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SpreadsheetConnection to fetch.
     */
    where: SpreadsheetConnectionWhereUniqueInput
  }

  /**
   * SpreadsheetConnection findFirst
   */
  export type SpreadsheetConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SpreadsheetConnection to fetch.
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpreadsheetConnections to fetch.
     */
    orderBy?: SpreadsheetConnectionOrderByWithRelationInput | SpreadsheetConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpreadsheetConnections.
     */
    cursor?: SpreadsheetConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpreadsheetConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpreadsheetConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpreadsheetConnections.
     */
    distinct?: SpreadsheetConnectionScalarFieldEnum | SpreadsheetConnectionScalarFieldEnum[]
  }

  /**
   * SpreadsheetConnection findFirstOrThrow
   */
  export type SpreadsheetConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SpreadsheetConnection to fetch.
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpreadsheetConnections to fetch.
     */
    orderBy?: SpreadsheetConnectionOrderByWithRelationInput | SpreadsheetConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpreadsheetConnections.
     */
    cursor?: SpreadsheetConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpreadsheetConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpreadsheetConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpreadsheetConnections.
     */
    distinct?: SpreadsheetConnectionScalarFieldEnum | SpreadsheetConnectionScalarFieldEnum[]
  }

  /**
   * SpreadsheetConnection findMany
   */
  export type SpreadsheetConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter, which SpreadsheetConnections to fetch.
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpreadsheetConnections to fetch.
     */
    orderBy?: SpreadsheetConnectionOrderByWithRelationInput | SpreadsheetConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpreadsheetConnections.
     */
    cursor?: SpreadsheetConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpreadsheetConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpreadsheetConnections.
     */
    skip?: number
    distinct?: SpreadsheetConnectionScalarFieldEnum | SpreadsheetConnectionScalarFieldEnum[]
  }

  /**
   * SpreadsheetConnection create
   */
  export type SpreadsheetConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * The data needed to create a SpreadsheetConnection.
     */
    data: XOR<SpreadsheetConnectionCreateInput, SpreadsheetConnectionUncheckedCreateInput>
  }

  /**
   * SpreadsheetConnection createMany
   */
  export type SpreadsheetConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpreadsheetConnections.
     */
    data: SpreadsheetConnectionCreateManyInput | SpreadsheetConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpreadsheetConnection createManyAndReturn
   */
  export type SpreadsheetConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * The data used to create many SpreadsheetConnections.
     */
    data: SpreadsheetConnectionCreateManyInput | SpreadsheetConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SpreadsheetConnection update
   */
  export type SpreadsheetConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * The data needed to update a SpreadsheetConnection.
     */
    data: XOR<SpreadsheetConnectionUpdateInput, SpreadsheetConnectionUncheckedUpdateInput>
    /**
     * Choose, which SpreadsheetConnection to update.
     */
    where: SpreadsheetConnectionWhereUniqueInput
  }

  /**
   * SpreadsheetConnection updateMany
   */
  export type SpreadsheetConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpreadsheetConnections.
     */
    data: XOR<SpreadsheetConnectionUpdateManyMutationInput, SpreadsheetConnectionUncheckedUpdateManyInput>
    /**
     * Filter which SpreadsheetConnections to update
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * Limit how many SpreadsheetConnections to update.
     */
    limit?: number
  }

  /**
   * SpreadsheetConnection updateManyAndReturn
   */
  export type SpreadsheetConnectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * The data used to update SpreadsheetConnections.
     */
    data: XOR<SpreadsheetConnectionUpdateManyMutationInput, SpreadsheetConnectionUncheckedUpdateManyInput>
    /**
     * Filter which SpreadsheetConnections to update
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * Limit how many SpreadsheetConnections to update.
     */
    limit?: number
  }

  /**
   * SpreadsheetConnection upsert
   */
  export type SpreadsheetConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * The filter to search for the SpreadsheetConnection to update in case it exists.
     */
    where: SpreadsheetConnectionWhereUniqueInput
    /**
     * In case the SpreadsheetConnection found by the `where` argument doesn't exist, create a new SpreadsheetConnection with this data.
     */
    create: XOR<SpreadsheetConnectionCreateInput, SpreadsheetConnectionUncheckedCreateInput>
    /**
     * In case the SpreadsheetConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpreadsheetConnectionUpdateInput, SpreadsheetConnectionUncheckedUpdateInput>
  }

  /**
   * SpreadsheetConnection delete
   */
  export type SpreadsheetConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
    /**
     * Filter which SpreadsheetConnection to delete.
     */
    where: SpreadsheetConnectionWhereUniqueInput
  }

  /**
   * SpreadsheetConnection deleteMany
   */
  export type SpreadsheetConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpreadsheetConnections to delete
     */
    where?: SpreadsheetConnectionWhereInput
    /**
     * Limit how many SpreadsheetConnections to delete.
     */
    limit?: number
  }

  /**
   * SpreadsheetConnection without action
   */
  export type SpreadsheetConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpreadsheetConnection
     */
    select?: SpreadsheetConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpreadsheetConnection
     */
    omit?: SpreadsheetConnectionOmit<ExtArgs> | null
  }


  /**
   * Model ColumnMappingV2
   */

  export type AggregateColumnMappingV2 = {
    _count: ColumnMappingV2CountAggregateOutputType | null
    _avg: ColumnMappingV2AvgAggregateOutputType | null
    _sum: ColumnMappingV2SumAggregateOutputType | null
    _min: ColumnMappingV2MinAggregateOutputType | null
    _max: ColumnMappingV2MaxAggregateOutputType | null
  }

  export type ColumnMappingV2AvgAggregateOutputType = {
    version: number | null
  }

  export type ColumnMappingV2SumAggregateOutputType = {
    version: number | null
  }

  export type ColumnMappingV2MinAggregateOutputType = {
    id: string | null
    connectionId: string | null
    sheetName: string | null
    templateName: string | null
    version: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColumnMappingV2MaxAggregateOutputType = {
    id: string | null
    connectionId: string | null
    sheetName: string | null
    templateName: string | null
    version: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ColumnMappingV2CountAggregateOutputType = {
    id: number
    connectionId: number
    sheetName: number
    mappingConfig: number
    templateName: number
    version: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ColumnMappingV2AvgAggregateInputType = {
    version?: true
  }

  export type ColumnMappingV2SumAggregateInputType = {
    version?: true
  }

  export type ColumnMappingV2MinAggregateInputType = {
    id?: true
    connectionId?: true
    sheetName?: true
    templateName?: true
    version?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColumnMappingV2MaxAggregateInputType = {
    id?: true
    connectionId?: true
    sheetName?: true
    templateName?: true
    version?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ColumnMappingV2CountAggregateInputType = {
    id?: true
    connectionId?: true
    sheetName?: true
    mappingConfig?: true
    templateName?: true
    version?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ColumnMappingV2AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColumnMappingV2 to aggregate.
     */
    where?: ColumnMappingV2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappingV2s to fetch.
     */
    orderBy?: ColumnMappingV2OrderByWithRelationInput | ColumnMappingV2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColumnMappingV2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappingV2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappingV2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ColumnMappingV2s
    **/
    _count?: true | ColumnMappingV2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColumnMappingV2AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColumnMappingV2SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColumnMappingV2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColumnMappingV2MaxAggregateInputType
  }

  export type GetColumnMappingV2AggregateType<T extends ColumnMappingV2AggregateArgs> = {
        [P in keyof T & keyof AggregateColumnMappingV2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColumnMappingV2[P]>
      : GetScalarType<T[P], AggregateColumnMappingV2[P]>
  }




  export type ColumnMappingV2GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnMappingV2WhereInput
    orderBy?: ColumnMappingV2OrderByWithAggregationInput | ColumnMappingV2OrderByWithAggregationInput[]
    by: ColumnMappingV2ScalarFieldEnum[] | ColumnMappingV2ScalarFieldEnum
    having?: ColumnMappingV2ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColumnMappingV2CountAggregateInputType | true
    _avg?: ColumnMappingV2AvgAggregateInputType
    _sum?: ColumnMappingV2SumAggregateInputType
    _min?: ColumnMappingV2MinAggregateInputType
    _max?: ColumnMappingV2MaxAggregateInputType
  }

  export type ColumnMappingV2GroupByOutputType = {
    id: string
    connectionId: string
    sheetName: string
    mappingConfig: JsonValue
    templateName: string | null
    version: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ColumnMappingV2CountAggregateOutputType | null
    _avg: ColumnMappingV2AvgAggregateOutputType | null
    _sum: ColumnMappingV2SumAggregateOutputType | null
    _min: ColumnMappingV2MinAggregateOutputType | null
    _max: ColumnMappingV2MaxAggregateOutputType | null
  }

  type GetColumnMappingV2GroupByPayload<T extends ColumnMappingV2GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColumnMappingV2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColumnMappingV2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColumnMappingV2GroupByOutputType[P]>
            : GetScalarType<T[P], ColumnMappingV2GroupByOutputType[P]>
        }
      >
    >


  export type ColumnMappingV2Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    connectionId?: boolean
    sheetName?: boolean
    mappingConfig?: boolean
    templateName?: boolean
    version?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["columnMappingV2"]>

  export type ColumnMappingV2SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    connectionId?: boolean
    sheetName?: boolean
    mappingConfig?: boolean
    templateName?: boolean
    version?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["columnMappingV2"]>

  export type ColumnMappingV2SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    connectionId?: boolean
    sheetName?: boolean
    mappingConfig?: boolean
    templateName?: boolean
    version?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["columnMappingV2"]>

  export type ColumnMappingV2SelectScalar = {
    id?: boolean
    connectionId?: boolean
    sheetName?: boolean
    mappingConfig?: boolean
    templateName?: boolean
    version?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ColumnMappingV2Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "connectionId" | "sheetName" | "mappingConfig" | "templateName" | "version" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["columnMappingV2"]>

  export type $ColumnMappingV2Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ColumnMappingV2"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      connectionId: string
      sheetName: string
      mappingConfig: Prisma.JsonValue
      templateName: string | null
      version: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["columnMappingV2"]>
    composites: {}
  }

  type ColumnMappingV2GetPayload<S extends boolean | null | undefined | ColumnMappingV2DefaultArgs> = $Result.GetResult<Prisma.$ColumnMappingV2Payload, S>

  type ColumnMappingV2CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ColumnMappingV2FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ColumnMappingV2CountAggregateInputType | true
    }

  export interface ColumnMappingV2Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ColumnMappingV2'], meta: { name: 'ColumnMappingV2' } }
    /**
     * Find zero or one ColumnMappingV2 that matches the filter.
     * @param {ColumnMappingV2FindUniqueArgs} args - Arguments to find a ColumnMappingV2
     * @example
     * // Get one ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColumnMappingV2FindUniqueArgs>(args: SelectSubset<T, ColumnMappingV2FindUniqueArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ColumnMappingV2 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ColumnMappingV2FindUniqueOrThrowArgs} args - Arguments to find a ColumnMappingV2
     * @example
     * // Get one ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColumnMappingV2FindUniqueOrThrowArgs>(args: SelectSubset<T, ColumnMappingV2FindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColumnMappingV2 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2FindFirstArgs} args - Arguments to find a ColumnMappingV2
     * @example
     * // Get one ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColumnMappingV2FindFirstArgs>(args?: SelectSubset<T, ColumnMappingV2FindFirstArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ColumnMappingV2 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2FindFirstOrThrowArgs} args - Arguments to find a ColumnMappingV2
     * @example
     * // Get one ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColumnMappingV2FindFirstOrThrowArgs>(args?: SelectSubset<T, ColumnMappingV2FindFirstOrThrowArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ColumnMappingV2s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ColumnMappingV2s
     * const columnMappingV2s = await prisma.columnMappingV2.findMany()
     * 
     * // Get first 10 ColumnMappingV2s
     * const columnMappingV2s = await prisma.columnMappingV2.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const columnMappingV2WithIdOnly = await prisma.columnMappingV2.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColumnMappingV2FindManyArgs>(args?: SelectSubset<T, ColumnMappingV2FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ColumnMappingV2.
     * @param {ColumnMappingV2CreateArgs} args - Arguments to create a ColumnMappingV2.
     * @example
     * // Create one ColumnMappingV2
     * const ColumnMappingV2 = await prisma.columnMappingV2.create({
     *   data: {
     *     // ... data to create a ColumnMappingV2
     *   }
     * })
     * 
     */
    create<T extends ColumnMappingV2CreateArgs>(args: SelectSubset<T, ColumnMappingV2CreateArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ColumnMappingV2s.
     * @param {ColumnMappingV2CreateManyArgs} args - Arguments to create many ColumnMappingV2s.
     * @example
     * // Create many ColumnMappingV2s
     * const columnMappingV2 = await prisma.columnMappingV2.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColumnMappingV2CreateManyArgs>(args?: SelectSubset<T, ColumnMappingV2CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ColumnMappingV2s and returns the data saved in the database.
     * @param {ColumnMappingV2CreateManyAndReturnArgs} args - Arguments to create many ColumnMappingV2s.
     * @example
     * // Create many ColumnMappingV2s
     * const columnMappingV2 = await prisma.columnMappingV2.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ColumnMappingV2s and only return the `id`
     * const columnMappingV2WithIdOnly = await prisma.columnMappingV2.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ColumnMappingV2CreateManyAndReturnArgs>(args?: SelectSubset<T, ColumnMappingV2CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ColumnMappingV2.
     * @param {ColumnMappingV2DeleteArgs} args - Arguments to delete one ColumnMappingV2.
     * @example
     * // Delete one ColumnMappingV2
     * const ColumnMappingV2 = await prisma.columnMappingV2.delete({
     *   where: {
     *     // ... filter to delete one ColumnMappingV2
     *   }
     * })
     * 
     */
    delete<T extends ColumnMappingV2DeleteArgs>(args: SelectSubset<T, ColumnMappingV2DeleteArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ColumnMappingV2.
     * @param {ColumnMappingV2UpdateArgs} args - Arguments to update one ColumnMappingV2.
     * @example
     * // Update one ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColumnMappingV2UpdateArgs>(args: SelectSubset<T, ColumnMappingV2UpdateArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ColumnMappingV2s.
     * @param {ColumnMappingV2DeleteManyArgs} args - Arguments to filter ColumnMappingV2s to delete.
     * @example
     * // Delete a few ColumnMappingV2s
     * const { count } = await prisma.columnMappingV2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColumnMappingV2DeleteManyArgs>(args?: SelectSubset<T, ColumnMappingV2DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColumnMappingV2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ColumnMappingV2s
     * const columnMappingV2 = await prisma.columnMappingV2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColumnMappingV2UpdateManyArgs>(args: SelectSubset<T, ColumnMappingV2UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ColumnMappingV2s and returns the data updated in the database.
     * @param {ColumnMappingV2UpdateManyAndReturnArgs} args - Arguments to update many ColumnMappingV2s.
     * @example
     * // Update many ColumnMappingV2s
     * const columnMappingV2 = await prisma.columnMappingV2.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ColumnMappingV2s and only return the `id`
     * const columnMappingV2WithIdOnly = await prisma.columnMappingV2.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ColumnMappingV2UpdateManyAndReturnArgs>(args: SelectSubset<T, ColumnMappingV2UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ColumnMappingV2.
     * @param {ColumnMappingV2UpsertArgs} args - Arguments to update or create a ColumnMappingV2.
     * @example
     * // Update or create a ColumnMappingV2
     * const columnMappingV2 = await prisma.columnMappingV2.upsert({
     *   create: {
     *     // ... data to create a ColumnMappingV2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ColumnMappingV2 we want to update
     *   }
     * })
     */
    upsert<T extends ColumnMappingV2UpsertArgs>(args: SelectSubset<T, ColumnMappingV2UpsertArgs<ExtArgs>>): Prisma__ColumnMappingV2Client<$Result.GetResult<Prisma.$ColumnMappingV2Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ColumnMappingV2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2CountArgs} args - Arguments to filter ColumnMappingV2s to count.
     * @example
     * // Count the number of ColumnMappingV2s
     * const count = await prisma.columnMappingV2.count({
     *   where: {
     *     // ... the filter for the ColumnMappingV2s we want to count
     *   }
     * })
    **/
    count<T extends ColumnMappingV2CountArgs>(
      args?: Subset<T, ColumnMappingV2CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColumnMappingV2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ColumnMappingV2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColumnMappingV2AggregateArgs>(args: Subset<T, ColumnMappingV2AggregateArgs>): Prisma.PrismaPromise<GetColumnMappingV2AggregateType<T>>

    /**
     * Group by ColumnMappingV2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnMappingV2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColumnMappingV2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColumnMappingV2GroupByArgs['orderBy'] }
        : { orderBy?: ColumnMappingV2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColumnMappingV2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColumnMappingV2GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ColumnMappingV2 model
   */
  readonly fields: ColumnMappingV2FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ColumnMappingV2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColumnMappingV2Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ColumnMappingV2 model
   */
  interface ColumnMappingV2FieldRefs {
    readonly id: FieldRef<"ColumnMappingV2", 'String'>
    readonly connectionId: FieldRef<"ColumnMappingV2", 'String'>
    readonly sheetName: FieldRef<"ColumnMappingV2", 'String'>
    readonly mappingConfig: FieldRef<"ColumnMappingV2", 'Json'>
    readonly templateName: FieldRef<"ColumnMappingV2", 'String'>
    readonly version: FieldRef<"ColumnMappingV2", 'Int'>
    readonly isActive: FieldRef<"ColumnMappingV2", 'Boolean'>
    readonly createdAt: FieldRef<"ColumnMappingV2", 'DateTime'>
    readonly updatedAt: FieldRef<"ColumnMappingV2", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ColumnMappingV2 findUnique
   */
  export type ColumnMappingV2FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter, which ColumnMappingV2 to fetch.
     */
    where: ColumnMappingV2WhereUniqueInput
  }

  /**
   * ColumnMappingV2 findUniqueOrThrow
   */
  export type ColumnMappingV2FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter, which ColumnMappingV2 to fetch.
     */
    where: ColumnMappingV2WhereUniqueInput
  }

  /**
   * ColumnMappingV2 findFirst
   */
  export type ColumnMappingV2FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter, which ColumnMappingV2 to fetch.
     */
    where?: ColumnMappingV2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappingV2s to fetch.
     */
    orderBy?: ColumnMappingV2OrderByWithRelationInput | ColumnMappingV2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColumnMappingV2s.
     */
    cursor?: ColumnMappingV2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappingV2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappingV2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColumnMappingV2s.
     */
    distinct?: ColumnMappingV2ScalarFieldEnum | ColumnMappingV2ScalarFieldEnum[]
  }

  /**
   * ColumnMappingV2 findFirstOrThrow
   */
  export type ColumnMappingV2FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter, which ColumnMappingV2 to fetch.
     */
    where?: ColumnMappingV2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappingV2s to fetch.
     */
    orderBy?: ColumnMappingV2OrderByWithRelationInput | ColumnMappingV2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ColumnMappingV2s.
     */
    cursor?: ColumnMappingV2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappingV2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappingV2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ColumnMappingV2s.
     */
    distinct?: ColumnMappingV2ScalarFieldEnum | ColumnMappingV2ScalarFieldEnum[]
  }

  /**
   * ColumnMappingV2 findMany
   */
  export type ColumnMappingV2FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter, which ColumnMappingV2s to fetch.
     */
    where?: ColumnMappingV2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ColumnMappingV2s to fetch.
     */
    orderBy?: ColumnMappingV2OrderByWithRelationInput | ColumnMappingV2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ColumnMappingV2s.
     */
    cursor?: ColumnMappingV2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ColumnMappingV2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ColumnMappingV2s.
     */
    skip?: number
    distinct?: ColumnMappingV2ScalarFieldEnum | ColumnMappingV2ScalarFieldEnum[]
  }

  /**
   * ColumnMappingV2 create
   */
  export type ColumnMappingV2CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * The data needed to create a ColumnMappingV2.
     */
    data: XOR<ColumnMappingV2CreateInput, ColumnMappingV2UncheckedCreateInput>
  }

  /**
   * ColumnMappingV2 createMany
   */
  export type ColumnMappingV2CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ColumnMappingV2s.
     */
    data: ColumnMappingV2CreateManyInput | ColumnMappingV2CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ColumnMappingV2 createManyAndReturn
   */
  export type ColumnMappingV2CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * The data used to create many ColumnMappingV2s.
     */
    data: ColumnMappingV2CreateManyInput | ColumnMappingV2CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ColumnMappingV2 update
   */
  export type ColumnMappingV2UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * The data needed to update a ColumnMappingV2.
     */
    data: XOR<ColumnMappingV2UpdateInput, ColumnMappingV2UncheckedUpdateInput>
    /**
     * Choose, which ColumnMappingV2 to update.
     */
    where: ColumnMappingV2WhereUniqueInput
  }

  /**
   * ColumnMappingV2 updateMany
   */
  export type ColumnMappingV2UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ColumnMappingV2s.
     */
    data: XOR<ColumnMappingV2UpdateManyMutationInput, ColumnMappingV2UncheckedUpdateManyInput>
    /**
     * Filter which ColumnMappingV2s to update
     */
    where?: ColumnMappingV2WhereInput
    /**
     * Limit how many ColumnMappingV2s to update.
     */
    limit?: number
  }

  /**
   * ColumnMappingV2 updateManyAndReturn
   */
  export type ColumnMappingV2UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * The data used to update ColumnMappingV2s.
     */
    data: XOR<ColumnMappingV2UpdateManyMutationInput, ColumnMappingV2UncheckedUpdateManyInput>
    /**
     * Filter which ColumnMappingV2s to update
     */
    where?: ColumnMappingV2WhereInput
    /**
     * Limit how many ColumnMappingV2s to update.
     */
    limit?: number
  }

  /**
   * ColumnMappingV2 upsert
   */
  export type ColumnMappingV2UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * The filter to search for the ColumnMappingV2 to update in case it exists.
     */
    where: ColumnMappingV2WhereUniqueInput
    /**
     * In case the ColumnMappingV2 found by the `where` argument doesn't exist, create a new ColumnMappingV2 with this data.
     */
    create: XOR<ColumnMappingV2CreateInput, ColumnMappingV2UncheckedCreateInput>
    /**
     * In case the ColumnMappingV2 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColumnMappingV2UpdateInput, ColumnMappingV2UncheckedUpdateInput>
  }

  /**
   * ColumnMappingV2 delete
   */
  export type ColumnMappingV2DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
    /**
     * Filter which ColumnMappingV2 to delete.
     */
    where: ColumnMappingV2WhereUniqueInput
  }

  /**
   * ColumnMappingV2 deleteMany
   */
  export type ColumnMappingV2DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ColumnMappingV2s to delete
     */
    where?: ColumnMappingV2WhereInput
    /**
     * Limit how many ColumnMappingV2s to delete.
     */
    limit?: number
  }

  /**
   * ColumnMappingV2 without action
   */
  export type ColumnMappingV2DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnMappingV2
     */
    select?: ColumnMappingV2Select<ExtArgs> | null
    /**
     * Omit specific fields from the ColumnMappingV2
     */
    omit?: ColumnMappingV2Omit<ExtArgs> | null
  }


  /**
   * Model HygieneProduction
   */

  export type AggregateHygieneProduction = {
    _count: HygieneProductionCountAggregateOutputType | null
    _avg: HygieneProductionAvgAggregateOutputType | null
    _sum: HygieneProductionSumAggregateOutputType | null
    _min: HygieneProductionMinAggregateOutputType | null
    _max: HygieneProductionMaxAggregateOutputType | null
  }

  export type HygieneProductionAvgAggregateOutputType = {
    hoursWorked: Decimal | null
    estimatedProduction: Decimal | null
    verifiedProduction: Decimal | null
    productionGoal: Decimal | null
    variancePercentage: Decimal | null
    bonusAmount: Decimal | null
  }

  export type HygieneProductionSumAggregateOutputType = {
    hoursWorked: Decimal | null
    estimatedProduction: Decimal | null
    verifiedProduction: Decimal | null
    productionGoal: Decimal | null
    variancePercentage: Decimal | null
    bonusAmount: Decimal | null
  }

  export type HygieneProductionMinAggregateOutputType = {
    id: string | null
    date: Date | null
    monthTab: string | null
    hoursWorked: Decimal | null
    estimatedProduction: Decimal | null
    verifiedProduction: Decimal | null
    productionGoal: Decimal | null
    variancePercentage: Decimal | null
    bonusAmount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type HygieneProductionMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    monthTab: string | null
    hoursWorked: Decimal | null
    estimatedProduction: Decimal | null
    verifiedProduction: Decimal | null
    productionGoal: Decimal | null
    variancePercentage: Decimal | null
    bonusAmount: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type HygieneProductionCountAggregateOutputType = {
    id: number
    date: number
    monthTab: number
    hoursWorked: number
    estimatedProduction: number
    verifiedProduction: number
    productionGoal: number
    variancePercentage: number
    bonusAmount: number
    createdAt: number
    updatedAt: number
    clinicId: number
    providerId: number
    dataSourceId: number
    _all: number
  }


  export type HygieneProductionAvgAggregateInputType = {
    hoursWorked?: true
    estimatedProduction?: true
    verifiedProduction?: true
    productionGoal?: true
    variancePercentage?: true
    bonusAmount?: true
  }

  export type HygieneProductionSumAggregateInputType = {
    hoursWorked?: true
    estimatedProduction?: true
    verifiedProduction?: true
    productionGoal?: true
    variancePercentage?: true
    bonusAmount?: true
  }

  export type HygieneProductionMinAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    hoursWorked?: true
    estimatedProduction?: true
    verifiedProduction?: true
    productionGoal?: true
    variancePercentage?: true
    bonusAmount?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type HygieneProductionMaxAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    hoursWorked?: true
    estimatedProduction?: true
    verifiedProduction?: true
    productionGoal?: true
    variancePercentage?: true
    bonusAmount?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type HygieneProductionCountAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    hoursWorked?: true
    estimatedProduction?: true
    verifiedProduction?: true
    productionGoal?: true
    variancePercentage?: true
    bonusAmount?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
    _all?: true
  }

  export type HygieneProductionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HygieneProduction to aggregate.
     */
    where?: HygieneProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HygieneProductions to fetch.
     */
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HygieneProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HygieneProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HygieneProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HygieneProductions
    **/
    _count?: true | HygieneProductionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HygieneProductionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HygieneProductionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HygieneProductionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HygieneProductionMaxAggregateInputType
  }

  export type GetHygieneProductionAggregateType<T extends HygieneProductionAggregateArgs> = {
        [P in keyof T & keyof AggregateHygieneProduction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHygieneProduction[P]>
      : GetScalarType<T[P], AggregateHygieneProduction[P]>
  }




  export type HygieneProductionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HygieneProductionWhereInput
    orderBy?: HygieneProductionOrderByWithAggregationInput | HygieneProductionOrderByWithAggregationInput[]
    by: HygieneProductionScalarFieldEnum[] | HygieneProductionScalarFieldEnum
    having?: HygieneProductionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HygieneProductionCountAggregateInputType | true
    _avg?: HygieneProductionAvgAggregateInputType
    _sum?: HygieneProductionSumAggregateInputType
    _min?: HygieneProductionMinAggregateInputType
    _max?: HygieneProductionMaxAggregateInputType
  }

  export type HygieneProductionGroupByOutputType = {
    id: string
    date: Date
    monthTab: string
    hoursWorked: Decimal | null
    estimatedProduction: Decimal | null
    verifiedProduction: Decimal | null
    productionGoal: Decimal | null
    variancePercentage: Decimal | null
    bonusAmount: Decimal | null
    createdAt: Date
    updatedAt: Date
    clinicId: string
    providerId: string | null
    dataSourceId: string | null
    _count: HygieneProductionCountAggregateOutputType | null
    _avg: HygieneProductionAvgAggregateOutputType | null
    _sum: HygieneProductionSumAggregateOutputType | null
    _min: HygieneProductionMinAggregateOutputType | null
    _max: HygieneProductionMaxAggregateOutputType | null
  }

  type GetHygieneProductionGroupByPayload<T extends HygieneProductionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HygieneProductionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HygieneProductionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HygieneProductionGroupByOutputType[P]>
            : GetScalarType<T[P], HygieneProductionGroupByOutputType[P]>
        }
      >
    >


  export type HygieneProductionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    hoursWorked?: boolean
    estimatedProduction?: boolean
    verifiedProduction?: boolean
    productionGoal?: boolean
    variancePercentage?: boolean
    bonusAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["hygieneProduction"]>

  export type HygieneProductionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    hoursWorked?: boolean
    estimatedProduction?: boolean
    verifiedProduction?: boolean
    productionGoal?: boolean
    variancePercentage?: boolean
    bonusAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["hygieneProduction"]>

  export type HygieneProductionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    hoursWorked?: boolean
    estimatedProduction?: boolean
    verifiedProduction?: boolean
    productionGoal?: boolean
    variancePercentage?: boolean
    bonusAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["hygieneProduction"]>

  export type HygieneProductionSelectScalar = {
    id?: boolean
    date?: boolean
    monthTab?: boolean
    hoursWorked?: boolean
    estimatedProduction?: boolean
    verifiedProduction?: boolean
    productionGoal?: boolean
    variancePercentage?: boolean
    bonusAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
  }

  export type HygieneProductionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "monthTab" | "hoursWorked" | "estimatedProduction" | "verifiedProduction" | "productionGoal" | "variancePercentage" | "bonusAmount" | "createdAt" | "updatedAt" | "clinicId" | "providerId" | "dataSourceId", ExtArgs["result"]["hygieneProduction"]>
  export type HygieneProductionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }
  export type HygieneProductionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }
  export type HygieneProductionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | HygieneProduction$providerArgs<ExtArgs>
    dataSource?: boolean | HygieneProduction$dataSourceArgs<ExtArgs>
  }

  export type $HygieneProductionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HygieneProduction"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      dataSource: Prisma.$DataSourcePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      monthTab: string
      hoursWorked: Prisma.Decimal | null
      estimatedProduction: Prisma.Decimal | null
      verifiedProduction: Prisma.Decimal | null
      productionGoal: Prisma.Decimal | null
      variancePercentage: Prisma.Decimal | null
      bonusAmount: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      clinicId: string
      providerId: string | null
      dataSourceId: string | null
    }, ExtArgs["result"]["hygieneProduction"]>
    composites: {}
  }

  type HygieneProductionGetPayload<S extends boolean | null | undefined | HygieneProductionDefaultArgs> = $Result.GetResult<Prisma.$HygieneProductionPayload, S>

  type HygieneProductionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HygieneProductionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HygieneProductionCountAggregateInputType | true
    }

  export interface HygieneProductionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HygieneProduction'], meta: { name: 'HygieneProduction' } }
    /**
     * Find zero or one HygieneProduction that matches the filter.
     * @param {HygieneProductionFindUniqueArgs} args - Arguments to find a HygieneProduction
     * @example
     * // Get one HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HygieneProductionFindUniqueArgs>(args: SelectSubset<T, HygieneProductionFindUniqueArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HygieneProduction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HygieneProductionFindUniqueOrThrowArgs} args - Arguments to find a HygieneProduction
     * @example
     * // Get one HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HygieneProductionFindUniqueOrThrowArgs>(args: SelectSubset<T, HygieneProductionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HygieneProduction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionFindFirstArgs} args - Arguments to find a HygieneProduction
     * @example
     * // Get one HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HygieneProductionFindFirstArgs>(args?: SelectSubset<T, HygieneProductionFindFirstArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HygieneProduction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionFindFirstOrThrowArgs} args - Arguments to find a HygieneProduction
     * @example
     * // Get one HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HygieneProductionFindFirstOrThrowArgs>(args?: SelectSubset<T, HygieneProductionFindFirstOrThrowArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HygieneProductions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HygieneProductions
     * const hygieneProductions = await prisma.hygieneProduction.findMany()
     * 
     * // Get first 10 HygieneProductions
     * const hygieneProductions = await prisma.hygieneProduction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hygieneProductionWithIdOnly = await prisma.hygieneProduction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HygieneProductionFindManyArgs>(args?: SelectSubset<T, HygieneProductionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HygieneProduction.
     * @param {HygieneProductionCreateArgs} args - Arguments to create a HygieneProduction.
     * @example
     * // Create one HygieneProduction
     * const HygieneProduction = await prisma.hygieneProduction.create({
     *   data: {
     *     // ... data to create a HygieneProduction
     *   }
     * })
     * 
     */
    create<T extends HygieneProductionCreateArgs>(args: SelectSubset<T, HygieneProductionCreateArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HygieneProductions.
     * @param {HygieneProductionCreateManyArgs} args - Arguments to create many HygieneProductions.
     * @example
     * // Create many HygieneProductions
     * const hygieneProduction = await prisma.hygieneProduction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HygieneProductionCreateManyArgs>(args?: SelectSubset<T, HygieneProductionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HygieneProductions and returns the data saved in the database.
     * @param {HygieneProductionCreateManyAndReturnArgs} args - Arguments to create many HygieneProductions.
     * @example
     * // Create many HygieneProductions
     * const hygieneProduction = await prisma.hygieneProduction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HygieneProductions and only return the `id`
     * const hygieneProductionWithIdOnly = await prisma.hygieneProduction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HygieneProductionCreateManyAndReturnArgs>(args?: SelectSubset<T, HygieneProductionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HygieneProduction.
     * @param {HygieneProductionDeleteArgs} args - Arguments to delete one HygieneProduction.
     * @example
     * // Delete one HygieneProduction
     * const HygieneProduction = await prisma.hygieneProduction.delete({
     *   where: {
     *     // ... filter to delete one HygieneProduction
     *   }
     * })
     * 
     */
    delete<T extends HygieneProductionDeleteArgs>(args: SelectSubset<T, HygieneProductionDeleteArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HygieneProduction.
     * @param {HygieneProductionUpdateArgs} args - Arguments to update one HygieneProduction.
     * @example
     * // Update one HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HygieneProductionUpdateArgs>(args: SelectSubset<T, HygieneProductionUpdateArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HygieneProductions.
     * @param {HygieneProductionDeleteManyArgs} args - Arguments to filter HygieneProductions to delete.
     * @example
     * // Delete a few HygieneProductions
     * const { count } = await prisma.hygieneProduction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HygieneProductionDeleteManyArgs>(args?: SelectSubset<T, HygieneProductionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HygieneProductions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HygieneProductions
     * const hygieneProduction = await prisma.hygieneProduction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HygieneProductionUpdateManyArgs>(args: SelectSubset<T, HygieneProductionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HygieneProductions and returns the data updated in the database.
     * @param {HygieneProductionUpdateManyAndReturnArgs} args - Arguments to update many HygieneProductions.
     * @example
     * // Update many HygieneProductions
     * const hygieneProduction = await prisma.hygieneProduction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HygieneProductions and only return the `id`
     * const hygieneProductionWithIdOnly = await prisma.hygieneProduction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HygieneProductionUpdateManyAndReturnArgs>(args: SelectSubset<T, HygieneProductionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HygieneProduction.
     * @param {HygieneProductionUpsertArgs} args - Arguments to update or create a HygieneProduction.
     * @example
     * // Update or create a HygieneProduction
     * const hygieneProduction = await prisma.hygieneProduction.upsert({
     *   create: {
     *     // ... data to create a HygieneProduction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HygieneProduction we want to update
     *   }
     * })
     */
    upsert<T extends HygieneProductionUpsertArgs>(args: SelectSubset<T, HygieneProductionUpsertArgs<ExtArgs>>): Prisma__HygieneProductionClient<$Result.GetResult<Prisma.$HygieneProductionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HygieneProductions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionCountArgs} args - Arguments to filter HygieneProductions to count.
     * @example
     * // Count the number of HygieneProductions
     * const count = await prisma.hygieneProduction.count({
     *   where: {
     *     // ... the filter for the HygieneProductions we want to count
     *   }
     * })
    **/
    count<T extends HygieneProductionCountArgs>(
      args?: Subset<T, HygieneProductionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HygieneProductionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HygieneProduction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HygieneProductionAggregateArgs>(args: Subset<T, HygieneProductionAggregateArgs>): Prisma.PrismaPromise<GetHygieneProductionAggregateType<T>>

    /**
     * Group by HygieneProduction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HygieneProductionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HygieneProductionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HygieneProductionGroupByArgs['orderBy'] }
        : { orderBy?: HygieneProductionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HygieneProductionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHygieneProductionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HygieneProduction model
   */
  readonly fields: HygieneProductionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HygieneProduction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HygieneProductionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends HygieneProduction$providerArgs<ExtArgs> = {}>(args?: Subset<T, HygieneProduction$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dataSource<T extends HygieneProduction$dataSourceArgs<ExtArgs> = {}>(args?: Subset<T, HygieneProduction$dataSourceArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HygieneProduction model
   */
  interface HygieneProductionFieldRefs {
    readonly id: FieldRef<"HygieneProduction", 'String'>
    readonly date: FieldRef<"HygieneProduction", 'DateTime'>
    readonly monthTab: FieldRef<"HygieneProduction", 'String'>
    readonly hoursWorked: FieldRef<"HygieneProduction", 'Decimal'>
    readonly estimatedProduction: FieldRef<"HygieneProduction", 'Decimal'>
    readonly verifiedProduction: FieldRef<"HygieneProduction", 'Decimal'>
    readonly productionGoal: FieldRef<"HygieneProduction", 'Decimal'>
    readonly variancePercentage: FieldRef<"HygieneProduction", 'Decimal'>
    readonly bonusAmount: FieldRef<"HygieneProduction", 'Decimal'>
    readonly createdAt: FieldRef<"HygieneProduction", 'DateTime'>
    readonly updatedAt: FieldRef<"HygieneProduction", 'DateTime'>
    readonly clinicId: FieldRef<"HygieneProduction", 'String'>
    readonly providerId: FieldRef<"HygieneProduction", 'String'>
    readonly dataSourceId: FieldRef<"HygieneProduction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HygieneProduction findUnique
   */
  export type HygieneProductionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter, which HygieneProduction to fetch.
     */
    where: HygieneProductionWhereUniqueInput
  }

  /**
   * HygieneProduction findUniqueOrThrow
   */
  export type HygieneProductionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter, which HygieneProduction to fetch.
     */
    where: HygieneProductionWhereUniqueInput
  }

  /**
   * HygieneProduction findFirst
   */
  export type HygieneProductionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter, which HygieneProduction to fetch.
     */
    where?: HygieneProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HygieneProductions to fetch.
     */
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HygieneProductions.
     */
    cursor?: HygieneProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HygieneProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HygieneProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HygieneProductions.
     */
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * HygieneProduction findFirstOrThrow
   */
  export type HygieneProductionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter, which HygieneProduction to fetch.
     */
    where?: HygieneProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HygieneProductions to fetch.
     */
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HygieneProductions.
     */
    cursor?: HygieneProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HygieneProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HygieneProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HygieneProductions.
     */
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * HygieneProduction findMany
   */
  export type HygieneProductionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter, which HygieneProductions to fetch.
     */
    where?: HygieneProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HygieneProductions to fetch.
     */
    orderBy?: HygieneProductionOrderByWithRelationInput | HygieneProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HygieneProductions.
     */
    cursor?: HygieneProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HygieneProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HygieneProductions.
     */
    skip?: number
    distinct?: HygieneProductionScalarFieldEnum | HygieneProductionScalarFieldEnum[]
  }

  /**
   * HygieneProduction create
   */
  export type HygieneProductionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * The data needed to create a HygieneProduction.
     */
    data: XOR<HygieneProductionCreateInput, HygieneProductionUncheckedCreateInput>
  }

  /**
   * HygieneProduction createMany
   */
  export type HygieneProductionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HygieneProductions.
     */
    data: HygieneProductionCreateManyInput | HygieneProductionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HygieneProduction createManyAndReturn
   */
  export type HygieneProductionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * The data used to create many HygieneProductions.
     */
    data: HygieneProductionCreateManyInput | HygieneProductionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HygieneProduction update
   */
  export type HygieneProductionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * The data needed to update a HygieneProduction.
     */
    data: XOR<HygieneProductionUpdateInput, HygieneProductionUncheckedUpdateInput>
    /**
     * Choose, which HygieneProduction to update.
     */
    where: HygieneProductionWhereUniqueInput
  }

  /**
   * HygieneProduction updateMany
   */
  export type HygieneProductionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HygieneProductions.
     */
    data: XOR<HygieneProductionUpdateManyMutationInput, HygieneProductionUncheckedUpdateManyInput>
    /**
     * Filter which HygieneProductions to update
     */
    where?: HygieneProductionWhereInput
    /**
     * Limit how many HygieneProductions to update.
     */
    limit?: number
  }

  /**
   * HygieneProduction updateManyAndReturn
   */
  export type HygieneProductionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * The data used to update HygieneProductions.
     */
    data: XOR<HygieneProductionUpdateManyMutationInput, HygieneProductionUncheckedUpdateManyInput>
    /**
     * Filter which HygieneProductions to update
     */
    where?: HygieneProductionWhereInput
    /**
     * Limit how many HygieneProductions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HygieneProduction upsert
   */
  export type HygieneProductionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * The filter to search for the HygieneProduction to update in case it exists.
     */
    where: HygieneProductionWhereUniqueInput
    /**
     * In case the HygieneProduction found by the `where` argument doesn't exist, create a new HygieneProduction with this data.
     */
    create: XOR<HygieneProductionCreateInput, HygieneProductionUncheckedCreateInput>
    /**
     * In case the HygieneProduction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HygieneProductionUpdateInput, HygieneProductionUncheckedUpdateInput>
  }

  /**
   * HygieneProduction delete
   */
  export type HygieneProductionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
    /**
     * Filter which HygieneProduction to delete.
     */
    where: HygieneProductionWhereUniqueInput
  }

  /**
   * HygieneProduction deleteMany
   */
  export type HygieneProductionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HygieneProductions to delete
     */
    where?: HygieneProductionWhereInput
    /**
     * Limit how many HygieneProductions to delete.
     */
    limit?: number
  }

  /**
   * HygieneProduction.provider
   */
  export type HygieneProduction$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * HygieneProduction.dataSource
   */
  export type HygieneProduction$dataSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
  }

  /**
   * HygieneProduction without action
   */
  export type HygieneProductionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HygieneProduction
     */
    select?: HygieneProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HygieneProduction
     */
    omit?: HygieneProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HygieneProductionInclude<ExtArgs> | null
  }


  /**
   * Model DentistProduction
   */

  export type AggregateDentistProduction = {
    _count: DentistProductionCountAggregateOutputType | null
    _avg: DentistProductionAvgAggregateOutputType | null
    _sum: DentistProductionSumAggregateOutputType | null
    _min: DentistProductionMinAggregateOutputType | null
    _max: DentistProductionMaxAggregateOutputType | null
  }

  export type DentistProductionAvgAggregateOutputType = {
    verifiedProductionHumble: Decimal | null
    verifiedProductionBaytown: Decimal | null
    totalProduction: Decimal | null
    monthlyGoal: Decimal | null
    productionPerHour: Decimal | null
    avgDailyProduction: Decimal | null
  }

  export type DentistProductionSumAggregateOutputType = {
    verifiedProductionHumble: Decimal | null
    verifiedProductionBaytown: Decimal | null
    totalProduction: Decimal | null
    monthlyGoal: Decimal | null
    productionPerHour: Decimal | null
    avgDailyProduction: Decimal | null
  }

  export type DentistProductionMinAggregateOutputType = {
    id: string | null
    date: Date | null
    monthTab: string | null
    verifiedProductionHumble: Decimal | null
    verifiedProductionBaytown: Decimal | null
    totalProduction: Decimal | null
    monthlyGoal: Decimal | null
    productionPerHour: Decimal | null
    avgDailyProduction: Decimal | null
    providerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type DentistProductionMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    monthTab: string | null
    verifiedProductionHumble: Decimal | null
    verifiedProductionBaytown: Decimal | null
    totalProduction: Decimal | null
    monthlyGoal: Decimal | null
    productionPerHour: Decimal | null
    avgDailyProduction: Decimal | null
    providerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    clinicId: string | null
    providerId: string | null
    dataSourceId: string | null
  }

  export type DentistProductionCountAggregateOutputType = {
    id: number
    date: number
    monthTab: number
    verifiedProductionHumble: number
    verifiedProductionBaytown: number
    totalProduction: number
    monthlyGoal: number
    productionPerHour: number
    avgDailyProduction: number
    providerName: number
    createdAt: number
    updatedAt: number
    clinicId: number
    providerId: number
    dataSourceId: number
    _all: number
  }


  export type DentistProductionAvgAggregateInputType = {
    verifiedProductionHumble?: true
    verifiedProductionBaytown?: true
    totalProduction?: true
    monthlyGoal?: true
    productionPerHour?: true
    avgDailyProduction?: true
  }

  export type DentistProductionSumAggregateInputType = {
    verifiedProductionHumble?: true
    verifiedProductionBaytown?: true
    totalProduction?: true
    monthlyGoal?: true
    productionPerHour?: true
    avgDailyProduction?: true
  }

  export type DentistProductionMinAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    verifiedProductionHumble?: true
    verifiedProductionBaytown?: true
    totalProduction?: true
    monthlyGoal?: true
    productionPerHour?: true
    avgDailyProduction?: true
    providerName?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type DentistProductionMaxAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    verifiedProductionHumble?: true
    verifiedProductionBaytown?: true
    totalProduction?: true
    monthlyGoal?: true
    productionPerHour?: true
    avgDailyProduction?: true
    providerName?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
  }

  export type DentistProductionCountAggregateInputType = {
    id?: true
    date?: true
    monthTab?: true
    verifiedProductionHumble?: true
    verifiedProductionBaytown?: true
    totalProduction?: true
    monthlyGoal?: true
    productionPerHour?: true
    avgDailyProduction?: true
    providerName?: true
    createdAt?: true
    updatedAt?: true
    clinicId?: true
    providerId?: true
    dataSourceId?: true
    _all?: true
  }

  export type DentistProductionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DentistProduction to aggregate.
     */
    where?: DentistProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DentistProductions to fetch.
     */
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DentistProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DentistProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DentistProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DentistProductions
    **/
    _count?: true | DentistProductionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DentistProductionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DentistProductionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DentistProductionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DentistProductionMaxAggregateInputType
  }

  export type GetDentistProductionAggregateType<T extends DentistProductionAggregateArgs> = {
        [P in keyof T & keyof AggregateDentistProduction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDentistProduction[P]>
      : GetScalarType<T[P], AggregateDentistProduction[P]>
  }




  export type DentistProductionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DentistProductionWhereInput
    orderBy?: DentistProductionOrderByWithAggregationInput | DentistProductionOrderByWithAggregationInput[]
    by: DentistProductionScalarFieldEnum[] | DentistProductionScalarFieldEnum
    having?: DentistProductionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DentistProductionCountAggregateInputType | true
    _avg?: DentistProductionAvgAggregateInputType
    _sum?: DentistProductionSumAggregateInputType
    _min?: DentistProductionMinAggregateInputType
    _max?: DentistProductionMaxAggregateInputType
  }

  export type DentistProductionGroupByOutputType = {
    id: string
    date: Date
    monthTab: string
    verifiedProductionHumble: Decimal | null
    verifiedProductionBaytown: Decimal | null
    totalProduction: Decimal | null
    monthlyGoal: Decimal | null
    productionPerHour: Decimal | null
    avgDailyProduction: Decimal | null
    providerName: string | null
    createdAt: Date
    updatedAt: Date
    clinicId: string
    providerId: string | null
    dataSourceId: string | null
    _count: DentistProductionCountAggregateOutputType | null
    _avg: DentistProductionAvgAggregateOutputType | null
    _sum: DentistProductionSumAggregateOutputType | null
    _min: DentistProductionMinAggregateOutputType | null
    _max: DentistProductionMaxAggregateOutputType | null
  }

  type GetDentistProductionGroupByPayload<T extends DentistProductionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DentistProductionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DentistProductionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DentistProductionGroupByOutputType[P]>
            : GetScalarType<T[P], DentistProductionGroupByOutputType[P]>
        }
      >
    >


  export type DentistProductionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    verifiedProductionHumble?: boolean
    verifiedProductionBaytown?: boolean
    totalProduction?: boolean
    monthlyGoal?: boolean
    productionPerHour?: boolean
    avgDailyProduction?: boolean
    providerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["dentistProduction"]>

  export type DentistProductionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    verifiedProductionHumble?: boolean
    verifiedProductionBaytown?: boolean
    totalProduction?: boolean
    monthlyGoal?: boolean
    productionPerHour?: boolean
    avgDailyProduction?: boolean
    providerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["dentistProduction"]>

  export type DentistProductionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    monthTab?: boolean
    verifiedProductionHumble?: boolean
    verifiedProductionBaytown?: boolean
    totalProduction?: boolean
    monthlyGoal?: boolean
    productionPerHour?: boolean
    avgDailyProduction?: boolean
    providerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }, ExtArgs["result"]["dentistProduction"]>

  export type DentistProductionSelectScalar = {
    id?: boolean
    date?: boolean
    monthTab?: boolean
    verifiedProductionHumble?: boolean
    verifiedProductionBaytown?: boolean
    totalProduction?: boolean
    monthlyGoal?: boolean
    productionPerHour?: boolean
    avgDailyProduction?: boolean
    providerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clinicId?: boolean
    providerId?: boolean
    dataSourceId?: boolean
  }

  export type DentistProductionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "monthTab" | "verifiedProductionHumble" | "verifiedProductionBaytown" | "totalProduction" | "monthlyGoal" | "productionPerHour" | "avgDailyProduction" | "providerName" | "createdAt" | "updatedAt" | "clinicId" | "providerId" | "dataSourceId", ExtArgs["result"]["dentistProduction"]>
  export type DentistProductionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }
  export type DentistProductionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }
  export type DentistProductionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clinic?: boolean | ClinicDefaultArgs<ExtArgs>
    provider?: boolean | DentistProduction$providerArgs<ExtArgs>
    dataSource?: boolean | DentistProduction$dataSourceArgs<ExtArgs>
  }

  export type $DentistProductionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DentistProduction"
    objects: {
      clinic: Prisma.$ClinicPayload<ExtArgs>
      provider: Prisma.$ProviderPayload<ExtArgs> | null
      dataSource: Prisma.$DataSourcePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      monthTab: string
      verifiedProductionHumble: Prisma.Decimal | null
      verifiedProductionBaytown: Prisma.Decimal | null
      totalProduction: Prisma.Decimal | null
      monthlyGoal: Prisma.Decimal | null
      productionPerHour: Prisma.Decimal | null
      avgDailyProduction: Prisma.Decimal | null
      providerName: string | null
      createdAt: Date
      updatedAt: Date
      clinicId: string
      providerId: string | null
      dataSourceId: string | null
    }, ExtArgs["result"]["dentistProduction"]>
    composites: {}
  }

  type DentistProductionGetPayload<S extends boolean | null | undefined | DentistProductionDefaultArgs> = $Result.GetResult<Prisma.$DentistProductionPayload, S>

  type DentistProductionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DentistProductionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DentistProductionCountAggregateInputType | true
    }

  export interface DentistProductionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DentistProduction'], meta: { name: 'DentistProduction' } }
    /**
     * Find zero or one DentistProduction that matches the filter.
     * @param {DentistProductionFindUniqueArgs} args - Arguments to find a DentistProduction
     * @example
     * // Get one DentistProduction
     * const dentistProduction = await prisma.dentistProduction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DentistProductionFindUniqueArgs>(args: SelectSubset<T, DentistProductionFindUniqueArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DentistProduction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DentistProductionFindUniqueOrThrowArgs} args - Arguments to find a DentistProduction
     * @example
     * // Get one DentistProduction
     * const dentistProduction = await prisma.dentistProduction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DentistProductionFindUniqueOrThrowArgs>(args: SelectSubset<T, DentistProductionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DentistProduction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionFindFirstArgs} args - Arguments to find a DentistProduction
     * @example
     * // Get one DentistProduction
     * const dentistProduction = await prisma.dentistProduction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DentistProductionFindFirstArgs>(args?: SelectSubset<T, DentistProductionFindFirstArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DentistProduction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionFindFirstOrThrowArgs} args - Arguments to find a DentistProduction
     * @example
     * // Get one DentistProduction
     * const dentistProduction = await prisma.dentistProduction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DentistProductionFindFirstOrThrowArgs>(args?: SelectSubset<T, DentistProductionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DentistProductions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DentistProductions
     * const dentistProductions = await prisma.dentistProduction.findMany()
     * 
     * // Get first 10 DentistProductions
     * const dentistProductions = await prisma.dentistProduction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dentistProductionWithIdOnly = await prisma.dentistProduction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DentistProductionFindManyArgs>(args?: SelectSubset<T, DentistProductionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DentistProduction.
     * @param {DentistProductionCreateArgs} args - Arguments to create a DentistProduction.
     * @example
     * // Create one DentistProduction
     * const DentistProduction = await prisma.dentistProduction.create({
     *   data: {
     *     // ... data to create a DentistProduction
     *   }
     * })
     * 
     */
    create<T extends DentistProductionCreateArgs>(args: SelectSubset<T, DentistProductionCreateArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DentistProductions.
     * @param {DentistProductionCreateManyArgs} args - Arguments to create many DentistProductions.
     * @example
     * // Create many DentistProductions
     * const dentistProduction = await prisma.dentistProduction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DentistProductionCreateManyArgs>(args?: SelectSubset<T, DentistProductionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DentistProductions and returns the data saved in the database.
     * @param {DentistProductionCreateManyAndReturnArgs} args - Arguments to create many DentistProductions.
     * @example
     * // Create many DentistProductions
     * const dentistProduction = await prisma.dentistProduction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DentistProductions and only return the `id`
     * const dentistProductionWithIdOnly = await prisma.dentistProduction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DentistProductionCreateManyAndReturnArgs>(args?: SelectSubset<T, DentistProductionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DentistProduction.
     * @param {DentistProductionDeleteArgs} args - Arguments to delete one DentistProduction.
     * @example
     * // Delete one DentistProduction
     * const DentistProduction = await prisma.dentistProduction.delete({
     *   where: {
     *     // ... filter to delete one DentistProduction
     *   }
     * })
     * 
     */
    delete<T extends DentistProductionDeleteArgs>(args: SelectSubset<T, DentistProductionDeleteArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DentistProduction.
     * @param {DentistProductionUpdateArgs} args - Arguments to update one DentistProduction.
     * @example
     * // Update one DentistProduction
     * const dentistProduction = await prisma.dentistProduction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DentistProductionUpdateArgs>(args: SelectSubset<T, DentistProductionUpdateArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DentistProductions.
     * @param {DentistProductionDeleteManyArgs} args - Arguments to filter DentistProductions to delete.
     * @example
     * // Delete a few DentistProductions
     * const { count } = await prisma.dentistProduction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DentistProductionDeleteManyArgs>(args?: SelectSubset<T, DentistProductionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DentistProductions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DentistProductions
     * const dentistProduction = await prisma.dentistProduction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DentistProductionUpdateManyArgs>(args: SelectSubset<T, DentistProductionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DentistProductions and returns the data updated in the database.
     * @param {DentistProductionUpdateManyAndReturnArgs} args - Arguments to update many DentistProductions.
     * @example
     * // Update many DentistProductions
     * const dentistProduction = await prisma.dentistProduction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DentistProductions and only return the `id`
     * const dentistProductionWithIdOnly = await prisma.dentistProduction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DentistProductionUpdateManyAndReturnArgs>(args: SelectSubset<T, DentistProductionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DentistProduction.
     * @param {DentistProductionUpsertArgs} args - Arguments to update or create a DentistProduction.
     * @example
     * // Update or create a DentistProduction
     * const dentistProduction = await prisma.dentistProduction.upsert({
     *   create: {
     *     // ... data to create a DentistProduction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DentistProduction we want to update
     *   }
     * })
     */
    upsert<T extends DentistProductionUpsertArgs>(args: SelectSubset<T, DentistProductionUpsertArgs<ExtArgs>>): Prisma__DentistProductionClient<$Result.GetResult<Prisma.$DentistProductionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DentistProductions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionCountArgs} args - Arguments to filter DentistProductions to count.
     * @example
     * // Count the number of DentistProductions
     * const count = await prisma.dentistProduction.count({
     *   where: {
     *     // ... the filter for the DentistProductions we want to count
     *   }
     * })
    **/
    count<T extends DentistProductionCountArgs>(
      args?: Subset<T, DentistProductionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DentistProductionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DentistProduction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DentistProductionAggregateArgs>(args: Subset<T, DentistProductionAggregateArgs>): Prisma.PrismaPromise<GetDentistProductionAggregateType<T>>

    /**
     * Group by DentistProduction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DentistProductionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DentistProductionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DentistProductionGroupByArgs['orderBy'] }
        : { orderBy?: DentistProductionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DentistProductionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDentistProductionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DentistProduction model
   */
  readonly fields: DentistProductionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DentistProduction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DentistProductionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clinic<T extends ClinicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicDefaultArgs<ExtArgs>>): Prisma__ClinicClient<$Result.GetResult<Prisma.$ClinicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends DentistProduction$providerArgs<ExtArgs> = {}>(args?: Subset<T, DentistProduction$providerArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dataSource<T extends DentistProduction$dataSourceArgs<ExtArgs> = {}>(args?: Subset<T, DentistProduction$dataSourceArgs<ExtArgs>>): Prisma__DataSourceClient<$Result.GetResult<Prisma.$DataSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DentistProduction model
   */
  interface DentistProductionFieldRefs {
    readonly id: FieldRef<"DentistProduction", 'String'>
    readonly date: FieldRef<"DentistProduction", 'DateTime'>
    readonly monthTab: FieldRef<"DentistProduction", 'String'>
    readonly verifiedProductionHumble: FieldRef<"DentistProduction", 'Decimal'>
    readonly verifiedProductionBaytown: FieldRef<"DentistProduction", 'Decimal'>
    readonly totalProduction: FieldRef<"DentistProduction", 'Decimal'>
    readonly monthlyGoal: FieldRef<"DentistProduction", 'Decimal'>
    readonly productionPerHour: FieldRef<"DentistProduction", 'Decimal'>
    readonly avgDailyProduction: FieldRef<"DentistProduction", 'Decimal'>
    readonly providerName: FieldRef<"DentistProduction", 'String'>
    readonly createdAt: FieldRef<"DentistProduction", 'DateTime'>
    readonly updatedAt: FieldRef<"DentistProduction", 'DateTime'>
    readonly clinicId: FieldRef<"DentistProduction", 'String'>
    readonly providerId: FieldRef<"DentistProduction", 'String'>
    readonly dataSourceId: FieldRef<"DentistProduction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DentistProduction findUnique
   */
  export type DentistProductionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter, which DentistProduction to fetch.
     */
    where: DentistProductionWhereUniqueInput
  }

  /**
   * DentistProduction findUniqueOrThrow
   */
  export type DentistProductionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter, which DentistProduction to fetch.
     */
    where: DentistProductionWhereUniqueInput
  }

  /**
   * DentistProduction findFirst
   */
  export type DentistProductionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter, which DentistProduction to fetch.
     */
    where?: DentistProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DentistProductions to fetch.
     */
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DentistProductions.
     */
    cursor?: DentistProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DentistProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DentistProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DentistProductions.
     */
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * DentistProduction findFirstOrThrow
   */
  export type DentistProductionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter, which DentistProduction to fetch.
     */
    where?: DentistProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DentistProductions to fetch.
     */
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DentistProductions.
     */
    cursor?: DentistProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DentistProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DentistProductions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DentistProductions.
     */
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * DentistProduction findMany
   */
  export type DentistProductionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter, which DentistProductions to fetch.
     */
    where?: DentistProductionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DentistProductions to fetch.
     */
    orderBy?: DentistProductionOrderByWithRelationInput | DentistProductionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DentistProductions.
     */
    cursor?: DentistProductionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DentistProductions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DentistProductions.
     */
    skip?: number
    distinct?: DentistProductionScalarFieldEnum | DentistProductionScalarFieldEnum[]
  }

  /**
   * DentistProduction create
   */
  export type DentistProductionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * The data needed to create a DentistProduction.
     */
    data: XOR<DentistProductionCreateInput, DentistProductionUncheckedCreateInput>
  }

  /**
   * DentistProduction createMany
   */
  export type DentistProductionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DentistProductions.
     */
    data: DentistProductionCreateManyInput | DentistProductionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DentistProduction createManyAndReturn
   */
  export type DentistProductionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * The data used to create many DentistProductions.
     */
    data: DentistProductionCreateManyInput | DentistProductionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DentistProduction update
   */
  export type DentistProductionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * The data needed to update a DentistProduction.
     */
    data: XOR<DentistProductionUpdateInput, DentistProductionUncheckedUpdateInput>
    /**
     * Choose, which DentistProduction to update.
     */
    where: DentistProductionWhereUniqueInput
  }

  /**
   * DentistProduction updateMany
   */
  export type DentistProductionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DentistProductions.
     */
    data: XOR<DentistProductionUpdateManyMutationInput, DentistProductionUncheckedUpdateManyInput>
    /**
     * Filter which DentistProductions to update
     */
    where?: DentistProductionWhereInput
    /**
     * Limit how many DentistProductions to update.
     */
    limit?: number
  }

  /**
   * DentistProduction updateManyAndReturn
   */
  export type DentistProductionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * The data used to update DentistProductions.
     */
    data: XOR<DentistProductionUpdateManyMutationInput, DentistProductionUncheckedUpdateManyInput>
    /**
     * Filter which DentistProductions to update
     */
    where?: DentistProductionWhereInput
    /**
     * Limit how many DentistProductions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DentistProduction upsert
   */
  export type DentistProductionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * The filter to search for the DentistProduction to update in case it exists.
     */
    where: DentistProductionWhereUniqueInput
    /**
     * In case the DentistProduction found by the `where` argument doesn't exist, create a new DentistProduction with this data.
     */
    create: XOR<DentistProductionCreateInput, DentistProductionUncheckedCreateInput>
    /**
     * In case the DentistProduction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DentistProductionUpdateInput, DentistProductionUncheckedUpdateInput>
  }

  /**
   * DentistProduction delete
   */
  export type DentistProductionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
    /**
     * Filter which DentistProduction to delete.
     */
    where: DentistProductionWhereUniqueInput
  }

  /**
   * DentistProduction deleteMany
   */
  export type DentistProductionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DentistProductions to delete
     */
    where?: DentistProductionWhereInput
    /**
     * Limit how many DentistProductions to delete.
     */
    limit?: number
  }

  /**
   * DentistProduction.provider
   */
  export type DentistProduction$providerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    where?: ProviderWhereInput
  }

  /**
   * DentistProduction.dataSource
   */
  export type DentistProduction$dataSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataSource
     */
    select?: DataSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataSource
     */
    omit?: DataSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataSourceInclude<ExtArgs> | null
    where?: DataSourceWhereInput
  }

  /**
   * DentistProduction without action
   */
  export type DentistProductionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DentistProduction
     */
    select?: DentistProductionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DentistProduction
     */
    omit?: DentistProductionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DentistProductionInclude<ExtArgs> | null
  }


  /**
   * Model IdMapping
   */

  export type AggregateIdMapping = {
    _count: IdMappingCountAggregateOutputType | null
    _min: IdMappingMinAggregateOutputType | null
    _max: IdMappingMaxAggregateOutputType | null
  }

  export type IdMappingMinAggregateOutputType = {
    id: string | null
    tableName: string | null
    oldId: string | null
    newId: string | null
    createdAt: Date | null
  }

  export type IdMappingMaxAggregateOutputType = {
    id: string | null
    tableName: string | null
    oldId: string | null
    newId: string | null
    createdAt: Date | null
  }

  export type IdMappingCountAggregateOutputType = {
    id: number
    tableName: number
    oldId: number
    newId: number
    createdAt: number
    _all: number
  }


  export type IdMappingMinAggregateInputType = {
    id?: true
    tableName?: true
    oldId?: true
    newId?: true
    createdAt?: true
  }

  export type IdMappingMaxAggregateInputType = {
    id?: true
    tableName?: true
    oldId?: true
    newId?: true
    createdAt?: true
  }

  export type IdMappingCountAggregateInputType = {
    id?: true
    tableName?: true
    oldId?: true
    newId?: true
    createdAt?: true
    _all?: true
  }

  export type IdMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdMapping to aggregate.
     */
    where?: IdMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdMappings to fetch.
     */
    orderBy?: IdMappingOrderByWithRelationInput | IdMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IdMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IdMappings
    **/
    _count?: true | IdMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdMappingMaxAggregateInputType
  }

  export type GetIdMappingAggregateType<T extends IdMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateIdMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdMapping[P]>
      : GetScalarType<T[P], AggregateIdMapping[P]>
  }




  export type IdMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdMappingWhereInput
    orderBy?: IdMappingOrderByWithAggregationInput | IdMappingOrderByWithAggregationInput[]
    by: IdMappingScalarFieldEnum[] | IdMappingScalarFieldEnum
    having?: IdMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdMappingCountAggregateInputType | true
    _min?: IdMappingMinAggregateInputType
    _max?: IdMappingMaxAggregateInputType
  }

  export type IdMappingGroupByOutputType = {
    id: string
    tableName: string
    oldId: string
    newId: string
    createdAt: Date
    _count: IdMappingCountAggregateOutputType | null
    _min: IdMappingMinAggregateOutputType | null
    _max: IdMappingMaxAggregateOutputType | null
  }

  type GetIdMappingGroupByPayload<T extends IdMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IdMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdMappingGroupByOutputType[P]>
            : GetScalarType<T[P], IdMappingGroupByOutputType[P]>
        }
      >
    >


  export type IdMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    oldId?: boolean
    newId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["idMapping"]>

  export type IdMappingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    oldId?: boolean
    newId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["idMapping"]>

  export type IdMappingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    oldId?: boolean
    newId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["idMapping"]>

  export type IdMappingSelectScalar = {
    id?: boolean
    tableName?: boolean
    oldId?: boolean
    newId?: boolean
    createdAt?: boolean
  }

  export type IdMappingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tableName" | "oldId" | "newId" | "createdAt", ExtArgs["result"]["idMapping"]>

  export type $IdMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IdMapping"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tableName: string
      oldId: string
      newId: string
      createdAt: Date
    }, ExtArgs["result"]["idMapping"]>
    composites: {}
  }

  type IdMappingGetPayload<S extends boolean | null | undefined | IdMappingDefaultArgs> = $Result.GetResult<Prisma.$IdMappingPayload, S>

  type IdMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IdMappingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IdMappingCountAggregateInputType | true
    }

  export interface IdMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IdMapping'], meta: { name: 'IdMapping' } }
    /**
     * Find zero or one IdMapping that matches the filter.
     * @param {IdMappingFindUniqueArgs} args - Arguments to find a IdMapping
     * @example
     * // Get one IdMapping
     * const idMapping = await prisma.idMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IdMappingFindUniqueArgs>(args: SelectSubset<T, IdMappingFindUniqueArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IdMapping that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IdMappingFindUniqueOrThrowArgs} args - Arguments to find a IdMapping
     * @example
     * // Get one IdMapping
     * const idMapping = await prisma.idMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IdMappingFindUniqueOrThrowArgs>(args: SelectSubset<T, IdMappingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IdMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingFindFirstArgs} args - Arguments to find a IdMapping
     * @example
     * // Get one IdMapping
     * const idMapping = await prisma.idMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IdMappingFindFirstArgs>(args?: SelectSubset<T, IdMappingFindFirstArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IdMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingFindFirstOrThrowArgs} args - Arguments to find a IdMapping
     * @example
     * // Get one IdMapping
     * const idMapping = await prisma.idMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IdMappingFindFirstOrThrowArgs>(args?: SelectSubset<T, IdMappingFindFirstOrThrowArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IdMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IdMappings
     * const idMappings = await prisma.idMapping.findMany()
     * 
     * // Get first 10 IdMappings
     * const idMappings = await prisma.idMapping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const idMappingWithIdOnly = await prisma.idMapping.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IdMappingFindManyArgs>(args?: SelectSubset<T, IdMappingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IdMapping.
     * @param {IdMappingCreateArgs} args - Arguments to create a IdMapping.
     * @example
     * // Create one IdMapping
     * const IdMapping = await prisma.idMapping.create({
     *   data: {
     *     // ... data to create a IdMapping
     *   }
     * })
     * 
     */
    create<T extends IdMappingCreateArgs>(args: SelectSubset<T, IdMappingCreateArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IdMappings.
     * @param {IdMappingCreateManyArgs} args - Arguments to create many IdMappings.
     * @example
     * // Create many IdMappings
     * const idMapping = await prisma.idMapping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IdMappingCreateManyArgs>(args?: SelectSubset<T, IdMappingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IdMappings and returns the data saved in the database.
     * @param {IdMappingCreateManyAndReturnArgs} args - Arguments to create many IdMappings.
     * @example
     * // Create many IdMappings
     * const idMapping = await prisma.idMapping.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IdMappings and only return the `id`
     * const idMappingWithIdOnly = await prisma.idMapping.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IdMappingCreateManyAndReturnArgs>(args?: SelectSubset<T, IdMappingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IdMapping.
     * @param {IdMappingDeleteArgs} args - Arguments to delete one IdMapping.
     * @example
     * // Delete one IdMapping
     * const IdMapping = await prisma.idMapping.delete({
     *   where: {
     *     // ... filter to delete one IdMapping
     *   }
     * })
     * 
     */
    delete<T extends IdMappingDeleteArgs>(args: SelectSubset<T, IdMappingDeleteArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IdMapping.
     * @param {IdMappingUpdateArgs} args - Arguments to update one IdMapping.
     * @example
     * // Update one IdMapping
     * const idMapping = await prisma.idMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IdMappingUpdateArgs>(args: SelectSubset<T, IdMappingUpdateArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IdMappings.
     * @param {IdMappingDeleteManyArgs} args - Arguments to filter IdMappings to delete.
     * @example
     * // Delete a few IdMappings
     * const { count } = await prisma.idMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IdMappingDeleteManyArgs>(args?: SelectSubset<T, IdMappingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IdMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IdMappings
     * const idMapping = await prisma.idMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IdMappingUpdateManyArgs>(args: SelectSubset<T, IdMappingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IdMappings and returns the data updated in the database.
     * @param {IdMappingUpdateManyAndReturnArgs} args - Arguments to update many IdMappings.
     * @example
     * // Update many IdMappings
     * const idMapping = await prisma.idMapping.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IdMappings and only return the `id`
     * const idMappingWithIdOnly = await prisma.idMapping.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IdMappingUpdateManyAndReturnArgs>(args: SelectSubset<T, IdMappingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IdMapping.
     * @param {IdMappingUpsertArgs} args - Arguments to update or create a IdMapping.
     * @example
     * // Update or create a IdMapping
     * const idMapping = await prisma.idMapping.upsert({
     *   create: {
     *     // ... data to create a IdMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IdMapping we want to update
     *   }
     * })
     */
    upsert<T extends IdMappingUpsertArgs>(args: SelectSubset<T, IdMappingUpsertArgs<ExtArgs>>): Prisma__IdMappingClient<$Result.GetResult<Prisma.$IdMappingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IdMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingCountArgs} args - Arguments to filter IdMappings to count.
     * @example
     * // Count the number of IdMappings
     * const count = await prisma.idMapping.count({
     *   where: {
     *     // ... the filter for the IdMappings we want to count
     *   }
     * })
    **/
    count<T extends IdMappingCountArgs>(
      args?: Subset<T, IdMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IdMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdMappingAggregateArgs>(args: Subset<T, IdMappingAggregateArgs>): Prisma.PrismaPromise<GetIdMappingAggregateType<T>>

    /**
     * Group by IdMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdMappingGroupByArgs['orderBy'] }
        : { orderBy?: IdMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IdMapping model
   */
  readonly fields: IdMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IdMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IdMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IdMapping model
   */
  interface IdMappingFieldRefs {
    readonly id: FieldRef<"IdMapping", 'String'>
    readonly tableName: FieldRef<"IdMapping", 'String'>
    readonly oldId: FieldRef<"IdMapping", 'String'>
    readonly newId: FieldRef<"IdMapping", 'String'>
    readonly createdAt: FieldRef<"IdMapping", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IdMapping findUnique
   */
  export type IdMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter, which IdMapping to fetch.
     */
    where: IdMappingWhereUniqueInput
  }

  /**
   * IdMapping findUniqueOrThrow
   */
  export type IdMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter, which IdMapping to fetch.
     */
    where: IdMappingWhereUniqueInput
  }

  /**
   * IdMapping findFirst
   */
  export type IdMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter, which IdMapping to fetch.
     */
    where?: IdMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdMappings to fetch.
     */
    orderBy?: IdMappingOrderByWithRelationInput | IdMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdMappings.
     */
    cursor?: IdMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdMappings.
     */
    distinct?: IdMappingScalarFieldEnum | IdMappingScalarFieldEnum[]
  }

  /**
   * IdMapping findFirstOrThrow
   */
  export type IdMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter, which IdMapping to fetch.
     */
    where?: IdMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdMappings to fetch.
     */
    orderBy?: IdMappingOrderByWithRelationInput | IdMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdMappings.
     */
    cursor?: IdMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdMappings.
     */
    distinct?: IdMappingScalarFieldEnum | IdMappingScalarFieldEnum[]
  }

  /**
   * IdMapping findMany
   */
  export type IdMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter, which IdMappings to fetch.
     */
    where?: IdMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdMappings to fetch.
     */
    orderBy?: IdMappingOrderByWithRelationInput | IdMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IdMappings.
     */
    cursor?: IdMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdMappings.
     */
    skip?: number
    distinct?: IdMappingScalarFieldEnum | IdMappingScalarFieldEnum[]
  }

  /**
   * IdMapping create
   */
  export type IdMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * The data needed to create a IdMapping.
     */
    data: XOR<IdMappingCreateInput, IdMappingUncheckedCreateInput>
  }

  /**
   * IdMapping createMany
   */
  export type IdMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IdMappings.
     */
    data: IdMappingCreateManyInput | IdMappingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IdMapping createManyAndReturn
   */
  export type IdMappingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * The data used to create many IdMappings.
     */
    data: IdMappingCreateManyInput | IdMappingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IdMapping update
   */
  export type IdMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * The data needed to update a IdMapping.
     */
    data: XOR<IdMappingUpdateInput, IdMappingUncheckedUpdateInput>
    /**
     * Choose, which IdMapping to update.
     */
    where: IdMappingWhereUniqueInput
  }

  /**
   * IdMapping updateMany
   */
  export type IdMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IdMappings.
     */
    data: XOR<IdMappingUpdateManyMutationInput, IdMappingUncheckedUpdateManyInput>
    /**
     * Filter which IdMappings to update
     */
    where?: IdMappingWhereInput
    /**
     * Limit how many IdMappings to update.
     */
    limit?: number
  }

  /**
   * IdMapping updateManyAndReturn
   */
  export type IdMappingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * The data used to update IdMappings.
     */
    data: XOR<IdMappingUpdateManyMutationInput, IdMappingUncheckedUpdateManyInput>
    /**
     * Filter which IdMappings to update
     */
    where?: IdMappingWhereInput
    /**
     * Limit how many IdMappings to update.
     */
    limit?: number
  }

  /**
   * IdMapping upsert
   */
  export type IdMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * The filter to search for the IdMapping to update in case it exists.
     */
    where: IdMappingWhereUniqueInput
    /**
     * In case the IdMapping found by the `where` argument doesn't exist, create a new IdMapping with this data.
     */
    create: XOR<IdMappingCreateInput, IdMappingUncheckedCreateInput>
    /**
     * In case the IdMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IdMappingUpdateInput, IdMappingUncheckedUpdateInput>
  }

  /**
   * IdMapping delete
   */
  export type IdMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
    /**
     * Filter which IdMapping to delete.
     */
    where: IdMappingWhereUniqueInput
  }

  /**
   * IdMapping deleteMany
   */
  export type IdMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdMappings to delete
     */
    where?: IdMappingWhereInput
    /**
     * Limit how many IdMappings to delete.
     */
    limit?: number
  }

  /**
   * IdMapping without action
   */
  export type IdMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdMapping
     */
    select?: IdMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdMapping
     */
    omit?: IdMappingOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClinicScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    status: 'status',
    registrationCode: 'registrationCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    uuidId: 'uuidId'
  };

  export type ClinicScalarFieldEnum = (typeof ClinicScalarFieldEnum)[keyof typeof ClinicScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authId: 'authId',
    uuidId: 'uuidId',
    clinicId: 'clinicId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    providerType: 'providerType',
    position: 'position',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clinicId: 'clinicId'
  };

  export type ProviderScalarFieldEnum = (typeof ProviderScalarFieldEnum)[keyof typeof ProviderScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    name: 'name',
    address: 'address',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const ProviderLocationScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    locationId: 'locationId',
    isActive: 'isActive',
    startDate: 'startDate',
    endDate: 'endDate',
    isPrimary: 'isPrimary'
  };

  export type ProviderLocationScalarFieldEnum = (typeof ProviderLocationScalarFieldEnum)[keyof typeof ProviderLocationScalarFieldEnum]


  export const LocationFinancialScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    locationId: 'locationId',
    date: 'date',
    production: 'production',
    adjustments: 'adjustments',
    writeOffs: 'writeOffs',
    netProduction: 'netProduction',
    patientIncome: 'patientIncome',
    insuranceIncome: 'insuranceIncome',
    totalCollections: 'totalCollections',
    unearned: 'unearned',
    dataSourceId: 'dataSourceId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationFinancialScalarFieldEnum = (typeof LocationFinancialScalarFieldEnum)[keyof typeof LocationFinancialScalarFieldEnum]


  export const MetricDefinitionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    dataType: 'dataType',
    calculationFormula: 'calculationFormula',
    category: 'category',
    isComposite: 'isComposite',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MetricDefinitionScalarFieldEnum = (typeof MetricDefinitionScalarFieldEnum)[keyof typeof MetricDefinitionScalarFieldEnum]


  export const DataSourceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    spreadsheetId: 'spreadsheetId',
    sheetName: 'sheetName',
    lastSyncedAt: 'lastSyncedAt',
    syncFrequency: 'syncFrequency',
    connectionStatus: 'connectionStatus',
    appScriptId: 'appScriptId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiryDate: 'expiryDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clinicId: 'clinicId',
    providerId: 'providerId'
  };

  export type DataSourceScalarFieldEnum = (typeof DataSourceScalarFieldEnum)[keyof typeof DataSourceScalarFieldEnum]


  export const ColumnMappingScalarFieldEnum: {
    id: 'id',
    columnName: 'columnName',
    transformationRule: 'transformationRule',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dataSourceId: 'dataSourceId',
    metricDefinitionId: 'metricDefinitionId'
  };

  export type ColumnMappingScalarFieldEnum = (typeof ColumnMappingScalarFieldEnum)[keyof typeof ColumnMappingScalarFieldEnum]


  export const MetricValueScalarFieldEnum: {
    id: 'id',
    date: 'date',
    value: 'value',
    sourceType: 'sourceType',
    sourceSheet: 'sourceSheet',
    externalId: 'externalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    metricDefinitionId: 'metricDefinitionId',
    clinicId: 'clinicId',
    providerId: 'providerId',
    dataSourceId: 'dataSourceId'
  };

  export type MetricValueScalarFieldEnum = (typeof MetricValueScalarFieldEnum)[keyof typeof MetricValueScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    timePeriod: 'timePeriod',
    startDate: 'startDate',
    endDate: 'endDate',
    targetValue: 'targetValue',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    metricDefinitionId: 'metricDefinitionId',
    clinicId: 'clinicId',
    providerId: 'providerId'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const DashboardScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isDefault: 'isDefault',
    layoutConfig: 'layoutConfig',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    uuidId: 'uuidId',
    userUuidId: 'userUuidId',
    userId: 'userId'
  };

  export type DashboardScalarFieldEnum = (typeof DashboardScalarFieldEnum)[keyof typeof DashboardScalarFieldEnum]


  export const WidgetScalarFieldEnum: {
    id: 'id',
    widgetType: 'widgetType',
    chartType: 'chartType',
    positionX: 'positionX',
    positionY: 'positionY',
    width: 'width',
    height: 'height',
    config: 'config',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dashboardId: 'dashboardId',
    metricDefinitionId: 'metricDefinitionId'
  };

  export type WidgetScalarFieldEnum = (typeof WidgetScalarFieldEnum)[keyof typeof WidgetScalarFieldEnum]


  export const UserClinicRoleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clinicId: 'clinicId',
    role: 'role',
    isActive: 'isActive',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserClinicRoleScalarFieldEnum = (typeof UserClinicRoleScalarFieldEnum)[keyof typeof UserClinicRoleScalarFieldEnum]


  export const GoalTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    metricDefinitionId: 'metricDefinitionId',
    targetFormula: 'targetFormula',
    timePeriod: 'timePeriod',
    isSystemTemplate: 'isSystemTemplate',
    clinicId: 'clinicId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoalTemplateScalarFieldEnum = (typeof GoalTemplateScalarFieldEnum)[keyof typeof GoalTemplateScalarFieldEnum]


  export const FinancialMetricScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    date: 'date',
    metricType: 'metricType',
    category: 'category',
    amount: 'amount',
    providerId: 'providerId',
    insuranceCarrier: 'insuranceCarrier',
    paymentMethod: 'paymentMethod',
    procedureCode: 'procedureCode',
    notes: 'notes',
    sourceReference: 'sourceReference',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FinancialMetricScalarFieldEnum = (typeof FinancialMetricScalarFieldEnum)[keyof typeof FinancialMetricScalarFieldEnum]


  export const AppointmentMetricScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    date: 'date',
    providerId: 'providerId',
    appointmentType: 'appointmentType',
    scheduledCount: 'scheduledCount',
    completedCount: 'completedCount',
    cancelledCount: 'cancelledCount',
    noShowCount: 'noShowCount',
    averageDuration: 'averageDuration',
    productionAmount: 'productionAmount',
    utilizationRate: 'utilizationRate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentMetricScalarFieldEnum = (typeof AppointmentMetricScalarFieldEnum)[keyof typeof AppointmentMetricScalarFieldEnum]


  export const CallMetricScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    date: 'date',
    callType: 'callType',
    totalCalls: 'totalCalls',
    connectedCalls: 'connectedCalls',
    voicemails: 'voicemails',
    appointmentsScheduled: 'appointmentsScheduled',
    conversionRate: 'conversionRate',
    averageCallDuration: 'averageCallDuration',
    staffMemberId: 'staffMemberId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CallMetricScalarFieldEnum = (typeof CallMetricScalarFieldEnum)[keyof typeof CallMetricScalarFieldEnum]


  export const PatientMetricScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    date: 'date',
    activePatients: 'activePatients',
    newPatients: 'newPatients',
    reactivatedPatients: 'reactivatedPatients',
    lostPatients: 'lostPatients',
    patientRetentionRate: 'patientRetentionRate',
    averagePatientValue: 'averagePatientValue',
    recareComplianceRate: 'recareComplianceRate',
    treatmentAcceptanceRate: 'treatmentAcceptanceRate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientMetricScalarFieldEnum = (typeof PatientMetricScalarFieldEnum)[keyof typeof PatientMetricScalarFieldEnum]


  export const MetricAggregationScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    metricDefinitionId: 'metricDefinitionId',
    aggregationType: 'aggregationType',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    value: 'value',
    count: 'count',
    minimum: 'minimum',
    maximum: 'maximum',
    average: 'average',
    standardDeviation: 'standardDeviation',
    providerId: 'providerId',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MetricAggregationScalarFieldEnum = (typeof MetricAggregationScalarFieldEnum)[keyof typeof MetricAggregationScalarFieldEnum]


  export const GoogleCredentialScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    scope: 'scope',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GoogleCredentialScalarFieldEnum = (typeof GoogleCredentialScalarFieldEnum)[keyof typeof GoogleCredentialScalarFieldEnum]


  export const SpreadsheetConnectionScalarFieldEnum: {
    id: 'id',
    clinicId: 'clinicId',
    credentialId: 'credentialId',
    spreadsheetId: 'spreadsheetId',
    spreadsheetName: 'spreadsheetName',
    sheetNames: 'sheetNames',
    lastSyncAt: 'lastSyncAt',
    syncStatus: 'syncStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SpreadsheetConnectionScalarFieldEnum = (typeof SpreadsheetConnectionScalarFieldEnum)[keyof typeof SpreadsheetConnectionScalarFieldEnum]


  export const ColumnMappingV2ScalarFieldEnum: {
    id: 'id',
    connectionId: 'connectionId',
    sheetName: 'sheetName',
    mappingConfig: 'mappingConfig',
    templateName: 'templateName',
    version: 'version',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ColumnMappingV2ScalarFieldEnum = (typeof ColumnMappingV2ScalarFieldEnum)[keyof typeof ColumnMappingV2ScalarFieldEnum]


  export const HygieneProductionScalarFieldEnum: {
    id: 'id',
    date: 'date',
    monthTab: 'monthTab',
    hoursWorked: 'hoursWorked',
    estimatedProduction: 'estimatedProduction',
    verifiedProduction: 'verifiedProduction',
    productionGoal: 'productionGoal',
    variancePercentage: 'variancePercentage',
    bonusAmount: 'bonusAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clinicId: 'clinicId',
    providerId: 'providerId',
    dataSourceId: 'dataSourceId'
  };

  export type HygieneProductionScalarFieldEnum = (typeof HygieneProductionScalarFieldEnum)[keyof typeof HygieneProductionScalarFieldEnum]


  export const DentistProductionScalarFieldEnum: {
    id: 'id',
    date: 'date',
    monthTab: 'monthTab',
    verifiedProductionHumble: 'verifiedProductionHumble',
    verifiedProductionBaytown: 'verifiedProductionBaytown',
    totalProduction: 'totalProduction',
    monthlyGoal: 'monthlyGoal',
    productionPerHour: 'productionPerHour',
    avgDailyProduction: 'avgDailyProduction',
    providerName: 'providerName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clinicId: 'clinicId',
    providerId: 'providerId',
    dataSourceId: 'dataSourceId'
  };

  export type DentistProductionScalarFieldEnum = (typeof DentistProductionScalarFieldEnum)[keyof typeof DentistProductionScalarFieldEnum]


  export const IdMappingScalarFieldEnum: {
    id: 'id',
    tableName: 'tableName',
    oldId: 'oldId',
    newId: 'newId',
    createdAt: 'createdAt'
  };

  export type IdMappingScalarFieldEnum = (typeof IdMappingScalarFieldEnum)[keyof typeof IdMappingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ClinicWhereInput = {
    AND?: ClinicWhereInput | ClinicWhereInput[]
    OR?: ClinicWhereInput[]
    NOT?: ClinicWhereInput | ClinicWhereInput[]
    id?: StringFilter<"Clinic"> | string
    name?: StringFilter<"Clinic"> | string
    location?: StringFilter<"Clinic"> | string
    status?: StringFilter<"Clinic"> | string
    registrationCode?: StringNullableFilter<"Clinic"> | string | null
    createdAt?: DateTimeFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeFilter<"Clinic"> | Date | string
    uuidId?: UuidNullableFilter<"Clinic"> | string | null
    users?: UserListRelationFilter
    providers?: ProviderListRelationFilter
    metrics?: MetricValueListRelationFilter
    goals?: GoalListRelationFilter
    dataSources?: DataSourceListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    locations?: LocationListRelationFilter
    locationFinancials?: LocationFinancialListRelationFilter
  }

  export type ClinicOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    registrationCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    providers?: ProviderOrderByRelationAggregateInput
    metrics?: MetricValueOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    dataSources?: DataSourceOrderByRelationAggregateInput
    hygieneProduction?: HygieneProductionOrderByRelationAggregateInput
    dentistProduction?: DentistProductionOrderByRelationAggregateInput
    locations?: LocationOrderByRelationAggregateInput
    locationFinancials?: LocationFinancialOrderByRelationAggregateInput
  }

  export type ClinicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registrationCode?: string
    uuidId?: string
    AND?: ClinicWhereInput | ClinicWhereInput[]
    OR?: ClinicWhereInput[]
    NOT?: ClinicWhereInput | ClinicWhereInput[]
    name?: StringFilter<"Clinic"> | string
    location?: StringFilter<"Clinic"> | string
    status?: StringFilter<"Clinic"> | string
    createdAt?: DateTimeFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeFilter<"Clinic"> | Date | string
    users?: UserListRelationFilter
    providers?: ProviderListRelationFilter
    metrics?: MetricValueListRelationFilter
    goals?: GoalListRelationFilter
    dataSources?: DataSourceListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    locations?: LocationListRelationFilter
    locationFinancials?: LocationFinancialListRelationFilter
  }, "id" | "registrationCode" | "uuidId">

  export type ClinicOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    registrationCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrderInput | SortOrder
    _count?: ClinicCountOrderByAggregateInput
    _max?: ClinicMaxOrderByAggregateInput
    _min?: ClinicMinOrderByAggregateInput
  }

  export type ClinicScalarWhereWithAggregatesInput = {
    AND?: ClinicScalarWhereWithAggregatesInput | ClinicScalarWhereWithAggregatesInput[]
    OR?: ClinicScalarWhereWithAggregatesInput[]
    NOT?: ClinicScalarWhereWithAggregatesInput | ClinicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Clinic"> | string
    name?: StringWithAggregatesFilter<"Clinic"> | string
    location?: StringWithAggregatesFilter<"Clinic"> | string
    status?: StringWithAggregatesFilter<"Clinic"> | string
    registrationCode?: StringNullableWithAggregatesFilter<"Clinic"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Clinic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Clinic"> | Date | string
    uuidId?: UuidNullableWithAggregatesFilter<"Clinic"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    authId?: StringNullableFilter<"User"> | string | null
    uuidId?: UuidNullableFilter<"User"> | string | null
    clinicId?: StringNullableFilter<"User"> | string | null
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    dashboards?: DashboardListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authId?: SortOrderInput | SortOrder
    uuidId?: SortOrderInput | SortOrder
    clinicId?: SortOrderInput | SortOrder
    clinic?: ClinicOrderByWithRelationInput
    dashboards?: DashboardOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    authId?: string
    uuidId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    clinicId?: StringNullableFilter<"User"> | string | null
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    dashboards?: DashboardListRelationFilter
  }, "id" | "email" | "authId" | "uuidId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authId?: SortOrderInput | SortOrder
    uuidId?: SortOrderInput | SortOrder
    clinicId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    authId?: StringNullableWithAggregatesFilter<"User"> | string | null
    uuidId?: UuidNullableWithAggregatesFilter<"User"> | string | null
    clinicId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ProviderWhereInput = {
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    id?: StringFilter<"Provider"> | string
    name?: StringFilter<"Provider"> | string
    firstName?: StringNullableFilter<"Provider"> | string | null
    lastName?: StringNullableFilter<"Provider"> | string | null
    email?: StringNullableFilter<"Provider"> | string | null
    providerType?: StringFilter<"Provider"> | string
    position?: StringNullableFilter<"Provider"> | string | null
    status?: StringFilter<"Provider"> | string
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    clinicId?: StringFilter<"Provider"> | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    metrics?: MetricValueListRelationFilter
    goals?: GoalListRelationFilter
    dataSources?: DataSourceListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    providerLocations?: ProviderLocationListRelationFilter
  }

  export type ProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    providerType?: SortOrder
    position?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    clinic?: ClinicOrderByWithRelationInput
    metrics?: MetricValueOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    dataSources?: DataSourceOrderByRelationAggregateInput
    hygieneProduction?: HygieneProductionOrderByRelationAggregateInput
    dentistProduction?: DentistProductionOrderByRelationAggregateInput
    providerLocations?: ProviderLocationOrderByRelationAggregateInput
  }

  export type ProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    name?: StringFilter<"Provider"> | string
    firstName?: StringNullableFilter<"Provider"> | string | null
    lastName?: StringNullableFilter<"Provider"> | string | null
    providerType?: StringFilter<"Provider"> | string
    position?: StringNullableFilter<"Provider"> | string | null
    status?: StringFilter<"Provider"> | string
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    clinicId?: StringFilter<"Provider"> | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    metrics?: MetricValueListRelationFilter
    goals?: GoalListRelationFilter
    dataSources?: DataSourceListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    providerLocations?: ProviderLocationListRelationFilter
  }, "id" | "email">

  export type ProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    providerType?: SortOrder
    position?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    _count?: ProviderCountOrderByAggregateInput
    _max?: ProviderMaxOrderByAggregateInput
    _min?: ProviderMinOrderByAggregateInput
  }

  export type ProviderScalarWhereWithAggregatesInput = {
    AND?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    OR?: ProviderScalarWhereWithAggregatesInput[]
    NOT?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Provider"> | string
    name?: StringWithAggregatesFilter<"Provider"> | string
    firstName?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    email?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    providerType?: StringWithAggregatesFilter<"Provider"> | string
    position?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    status?: StringWithAggregatesFilter<"Provider"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    clinicId?: StringWithAggregatesFilter<"Provider"> | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    clinicId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    financials?: LocationFinancialListRelationFilter
    providers?: ProviderLocationListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinic?: ClinicOrderByWithRelationInput
    financials?: LocationFinancialOrderByRelationAggregateInput
    providers?: ProviderLocationOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clinicId_name?: LocationClinicIdNameCompoundUniqueInput
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    clinicId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    financials?: LocationFinancialListRelationFilter
    providers?: ProviderLocationListRelationFilter
  }, "id" | "clinicId_name">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    clinicId?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringNullableWithAggregatesFilter<"Location"> | string | null
    isActive?: BoolWithAggregatesFilter<"Location"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type ProviderLocationWhereInput = {
    AND?: ProviderLocationWhereInput | ProviderLocationWhereInput[]
    OR?: ProviderLocationWhereInput[]
    NOT?: ProviderLocationWhereInput | ProviderLocationWhereInput[]
    id?: StringFilter<"ProviderLocation"> | string
    providerId?: StringFilter<"ProviderLocation"> | string
    locationId?: StringFilter<"ProviderLocation"> | string
    isActive?: BoolFilter<"ProviderLocation"> | boolean
    startDate?: DateTimeFilter<"ProviderLocation"> | Date | string
    endDate?: DateTimeNullableFilter<"ProviderLocation"> | Date | string | null
    isPrimary?: BoolFilter<"ProviderLocation"> | boolean
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }

  export type ProviderLocationOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    locationId?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    provider?: ProviderOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
  }

  export type ProviderLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    providerId_locationId?: ProviderLocationProviderIdLocationIdCompoundUniqueInput
    AND?: ProviderLocationWhereInput | ProviderLocationWhereInput[]
    OR?: ProviderLocationWhereInput[]
    NOT?: ProviderLocationWhereInput | ProviderLocationWhereInput[]
    providerId?: StringFilter<"ProviderLocation"> | string
    locationId?: StringFilter<"ProviderLocation"> | string
    isActive?: BoolFilter<"ProviderLocation"> | boolean
    startDate?: DateTimeFilter<"ProviderLocation"> | Date | string
    endDate?: DateTimeNullableFilter<"ProviderLocation"> | Date | string | null
    isPrimary?: BoolFilter<"ProviderLocation"> | boolean
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
  }, "id" | "providerId_locationId">

  export type ProviderLocationOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    locationId?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isPrimary?: SortOrder
    _count?: ProviderLocationCountOrderByAggregateInput
    _max?: ProviderLocationMaxOrderByAggregateInput
    _min?: ProviderLocationMinOrderByAggregateInput
  }

  export type ProviderLocationScalarWhereWithAggregatesInput = {
    AND?: ProviderLocationScalarWhereWithAggregatesInput | ProviderLocationScalarWhereWithAggregatesInput[]
    OR?: ProviderLocationScalarWhereWithAggregatesInput[]
    NOT?: ProviderLocationScalarWhereWithAggregatesInput | ProviderLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProviderLocation"> | string
    providerId?: StringWithAggregatesFilter<"ProviderLocation"> | string
    locationId?: StringWithAggregatesFilter<"ProviderLocation"> | string
    isActive?: BoolWithAggregatesFilter<"ProviderLocation"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"ProviderLocation"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ProviderLocation"> | Date | string | null
    isPrimary?: BoolWithAggregatesFilter<"ProviderLocation"> | boolean
  }

  export type LocationFinancialWhereInput = {
    AND?: LocationFinancialWhereInput | LocationFinancialWhereInput[]
    OR?: LocationFinancialWhereInput[]
    NOT?: LocationFinancialWhereInput | LocationFinancialWhereInput[]
    id?: StringFilter<"LocationFinancial"> | string
    clinicId?: StringFilter<"LocationFinancial"> | string
    locationId?: StringFilter<"LocationFinancial"> | string
    date?: DateTimeFilter<"LocationFinancial"> | Date | string
    production?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    unearned?: DecimalNullableFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: StringNullableFilter<"LocationFinancial"> | string | null
    createdBy?: StringNullableFilter<"LocationFinancial"> | string | null
    createdAt?: DateTimeFilter<"LocationFinancial"> | Date | string
    updatedAt?: DateTimeFilter<"LocationFinancial"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }

  export type LocationFinancialOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinic?: ClinicOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    dataSource?: DataSourceOrderByWithRelationInput
  }

  export type LocationFinancialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clinicId_locationId_date?: LocationFinancialClinicIdLocationIdDateCompoundUniqueInput
    AND?: LocationFinancialWhereInput | LocationFinancialWhereInput[]
    OR?: LocationFinancialWhereInput[]
    NOT?: LocationFinancialWhereInput | LocationFinancialWhereInput[]
    clinicId?: StringFilter<"LocationFinancial"> | string
    locationId?: StringFilter<"LocationFinancial"> | string
    date?: DateTimeFilter<"LocationFinancial"> | Date | string
    production?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    unearned?: DecimalNullableFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: StringNullableFilter<"LocationFinancial"> | string | null
    createdBy?: StringNullableFilter<"LocationFinancial"> | string | null
    createdAt?: DateTimeFilter<"LocationFinancial"> | Date | string
    updatedAt?: DateTimeFilter<"LocationFinancial"> | Date | string
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }, "id" | "clinicId_locationId_date">

  export type LocationFinancialOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationFinancialCountOrderByAggregateInput
    _avg?: LocationFinancialAvgOrderByAggregateInput
    _max?: LocationFinancialMaxOrderByAggregateInput
    _min?: LocationFinancialMinOrderByAggregateInput
    _sum?: LocationFinancialSumOrderByAggregateInput
  }

  export type LocationFinancialScalarWhereWithAggregatesInput = {
    AND?: LocationFinancialScalarWhereWithAggregatesInput | LocationFinancialScalarWhereWithAggregatesInput[]
    OR?: LocationFinancialScalarWhereWithAggregatesInput[]
    NOT?: LocationFinancialScalarWhereWithAggregatesInput | LocationFinancialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationFinancial"> | string
    clinicId?: StringWithAggregatesFilter<"LocationFinancial"> | string
    locationId?: StringWithAggregatesFilter<"LocationFinancial"> | string
    date?: DateTimeWithAggregatesFilter<"LocationFinancial"> | Date | string
    production?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    unearned?: DecimalNullableWithAggregatesFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: StringNullableWithAggregatesFilter<"LocationFinancial"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"LocationFinancial"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LocationFinancial"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LocationFinancial"> | Date | string
  }

  export type MetricDefinitionWhereInput = {
    AND?: MetricDefinitionWhereInput | MetricDefinitionWhereInput[]
    OR?: MetricDefinitionWhereInput[]
    NOT?: MetricDefinitionWhereInput | MetricDefinitionWhereInput[]
    id?: StringFilter<"MetricDefinition"> | string
    name?: StringFilter<"MetricDefinition"> | string
    description?: StringFilter<"MetricDefinition"> | string
    dataType?: StringFilter<"MetricDefinition"> | string
    calculationFormula?: StringNullableFilter<"MetricDefinition"> | string | null
    category?: StringFilter<"MetricDefinition"> | string
    isComposite?: BoolFilter<"MetricDefinition"> | boolean
    createdAt?: DateTimeFilter<"MetricDefinition"> | Date | string
    updatedAt?: DateTimeFilter<"MetricDefinition"> | Date | string
    metrics?: MetricValueListRelationFilter
    columnMappings?: ColumnMappingListRelationFilter
    goals?: GoalListRelationFilter
    widgets?: WidgetListRelationFilter
  }

  export type MetricDefinitionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dataType?: SortOrder
    calculationFormula?: SortOrderInput | SortOrder
    category?: SortOrder
    isComposite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metrics?: MetricValueOrderByRelationAggregateInput
    columnMappings?: ColumnMappingOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    widgets?: WidgetOrderByRelationAggregateInput
  }

  export type MetricDefinitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetricDefinitionWhereInput | MetricDefinitionWhereInput[]
    OR?: MetricDefinitionWhereInput[]
    NOT?: MetricDefinitionWhereInput | MetricDefinitionWhereInput[]
    name?: StringFilter<"MetricDefinition"> | string
    description?: StringFilter<"MetricDefinition"> | string
    dataType?: StringFilter<"MetricDefinition"> | string
    calculationFormula?: StringNullableFilter<"MetricDefinition"> | string | null
    category?: StringFilter<"MetricDefinition"> | string
    isComposite?: BoolFilter<"MetricDefinition"> | boolean
    createdAt?: DateTimeFilter<"MetricDefinition"> | Date | string
    updatedAt?: DateTimeFilter<"MetricDefinition"> | Date | string
    metrics?: MetricValueListRelationFilter
    columnMappings?: ColumnMappingListRelationFilter
    goals?: GoalListRelationFilter
    widgets?: WidgetListRelationFilter
  }, "id">

  export type MetricDefinitionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dataType?: SortOrder
    calculationFormula?: SortOrderInput | SortOrder
    category?: SortOrder
    isComposite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MetricDefinitionCountOrderByAggregateInput
    _max?: MetricDefinitionMaxOrderByAggregateInput
    _min?: MetricDefinitionMinOrderByAggregateInput
  }

  export type MetricDefinitionScalarWhereWithAggregatesInput = {
    AND?: MetricDefinitionScalarWhereWithAggregatesInput | MetricDefinitionScalarWhereWithAggregatesInput[]
    OR?: MetricDefinitionScalarWhereWithAggregatesInput[]
    NOT?: MetricDefinitionScalarWhereWithAggregatesInput | MetricDefinitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetricDefinition"> | string
    name?: StringWithAggregatesFilter<"MetricDefinition"> | string
    description?: StringWithAggregatesFilter<"MetricDefinition"> | string
    dataType?: StringWithAggregatesFilter<"MetricDefinition"> | string
    calculationFormula?: StringNullableWithAggregatesFilter<"MetricDefinition"> | string | null
    category?: StringWithAggregatesFilter<"MetricDefinition"> | string
    isComposite?: BoolWithAggregatesFilter<"MetricDefinition"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MetricDefinition"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetricDefinition"> | Date | string
  }

  export type DataSourceWhereInput = {
    AND?: DataSourceWhereInput | DataSourceWhereInput[]
    OR?: DataSourceWhereInput[]
    NOT?: DataSourceWhereInput | DataSourceWhereInput[]
    id?: StringFilter<"DataSource"> | string
    name?: StringFilter<"DataSource"> | string
    spreadsheetId?: StringFilter<"DataSource"> | string
    sheetName?: StringFilter<"DataSource"> | string
    lastSyncedAt?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    syncFrequency?: StringFilter<"DataSource"> | string
    connectionStatus?: StringFilter<"DataSource"> | string
    appScriptId?: StringNullableFilter<"DataSource"> | string | null
    accessToken?: StringFilter<"DataSource"> | string
    refreshToken?: StringNullableFilter<"DataSource"> | string | null
    expiryDate?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    createdAt?: DateTimeFilter<"DataSource"> | Date | string
    updatedAt?: DateTimeFilter<"DataSource"> | Date | string
    clinicId?: StringFilter<"DataSource"> | string
    providerId?: StringNullableFilter<"DataSource"> | string | null
    columnMappings?: ColumnMappingListRelationFilter
    metrics?: MetricValueListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    locationFinancials?: LocationFinancialListRelationFilter
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
  }

  export type DataSourceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    spreadsheetId?: SortOrder
    sheetName?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    syncFrequency?: SortOrder
    connectionStatus?: SortOrder
    appScriptId?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    columnMappings?: ColumnMappingOrderByRelationAggregateInput
    metrics?: MetricValueOrderByRelationAggregateInput
    hygieneProduction?: HygieneProductionOrderByRelationAggregateInput
    dentistProduction?: DentistProductionOrderByRelationAggregateInput
    locationFinancials?: LocationFinancialOrderByRelationAggregateInput
    clinic?: ClinicOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
  }

  export type DataSourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DataSourceWhereInput | DataSourceWhereInput[]
    OR?: DataSourceWhereInput[]
    NOT?: DataSourceWhereInput | DataSourceWhereInput[]
    name?: StringFilter<"DataSource"> | string
    spreadsheetId?: StringFilter<"DataSource"> | string
    sheetName?: StringFilter<"DataSource"> | string
    lastSyncedAt?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    syncFrequency?: StringFilter<"DataSource"> | string
    connectionStatus?: StringFilter<"DataSource"> | string
    appScriptId?: StringNullableFilter<"DataSource"> | string | null
    accessToken?: StringFilter<"DataSource"> | string
    refreshToken?: StringNullableFilter<"DataSource"> | string | null
    expiryDate?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    createdAt?: DateTimeFilter<"DataSource"> | Date | string
    updatedAt?: DateTimeFilter<"DataSource"> | Date | string
    clinicId?: StringFilter<"DataSource"> | string
    providerId?: StringNullableFilter<"DataSource"> | string | null
    columnMappings?: ColumnMappingListRelationFilter
    metrics?: MetricValueListRelationFilter
    hygieneProduction?: HygieneProductionListRelationFilter
    dentistProduction?: DentistProductionListRelationFilter
    locationFinancials?: LocationFinancialListRelationFilter
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
  }, "id">

  export type DataSourceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    spreadsheetId?: SortOrder
    sheetName?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    syncFrequency?: SortOrder
    connectionStatus?: SortOrder
    appScriptId?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    _count?: DataSourceCountOrderByAggregateInput
    _max?: DataSourceMaxOrderByAggregateInput
    _min?: DataSourceMinOrderByAggregateInput
  }

  export type DataSourceScalarWhereWithAggregatesInput = {
    AND?: DataSourceScalarWhereWithAggregatesInput | DataSourceScalarWhereWithAggregatesInput[]
    OR?: DataSourceScalarWhereWithAggregatesInput[]
    NOT?: DataSourceScalarWhereWithAggregatesInput | DataSourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DataSource"> | string
    name?: StringWithAggregatesFilter<"DataSource"> | string
    spreadsheetId?: StringWithAggregatesFilter<"DataSource"> | string
    sheetName?: StringWithAggregatesFilter<"DataSource"> | string
    lastSyncedAt?: DateTimeNullableWithAggregatesFilter<"DataSource"> | Date | string | null
    syncFrequency?: StringWithAggregatesFilter<"DataSource"> | string
    connectionStatus?: StringWithAggregatesFilter<"DataSource"> | string
    appScriptId?: StringNullableWithAggregatesFilter<"DataSource"> | string | null
    accessToken?: StringWithAggregatesFilter<"DataSource"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"DataSource"> | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"DataSource"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DataSource"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DataSource"> | Date | string
    clinicId?: StringWithAggregatesFilter<"DataSource"> | string
    providerId?: StringNullableWithAggregatesFilter<"DataSource"> | string | null
  }

  export type ColumnMappingWhereInput = {
    AND?: ColumnMappingWhereInput | ColumnMappingWhereInput[]
    OR?: ColumnMappingWhereInput[]
    NOT?: ColumnMappingWhereInput | ColumnMappingWhereInput[]
    id?: StringFilter<"ColumnMapping"> | string
    columnName?: StringFilter<"ColumnMapping"> | string
    transformationRule?: StringNullableFilter<"ColumnMapping"> | string | null
    createdAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    updatedAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    dataSourceId?: StringFilter<"ColumnMapping"> | string
    metricDefinitionId?: StringFilter<"ColumnMapping"> | string
    dataSource?: XOR<DataSourceScalarRelationFilter, DataSourceWhereInput>
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
  }

  export type ColumnMappingOrderByWithRelationInput = {
    id?: SortOrder
    columnName?: SortOrder
    transformationRule?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataSourceId?: SortOrder
    metricDefinitionId?: SortOrder
    dataSource?: DataSourceOrderByWithRelationInput
    metricDefinition?: MetricDefinitionOrderByWithRelationInput
  }

  export type ColumnMappingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ColumnMappingWhereInput | ColumnMappingWhereInput[]
    OR?: ColumnMappingWhereInput[]
    NOT?: ColumnMappingWhereInput | ColumnMappingWhereInput[]
    columnName?: StringFilter<"ColumnMapping"> | string
    transformationRule?: StringNullableFilter<"ColumnMapping"> | string | null
    createdAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    updatedAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    dataSourceId?: StringFilter<"ColumnMapping"> | string
    metricDefinitionId?: StringFilter<"ColumnMapping"> | string
    dataSource?: XOR<DataSourceScalarRelationFilter, DataSourceWhereInput>
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
  }, "id">

  export type ColumnMappingOrderByWithAggregationInput = {
    id?: SortOrder
    columnName?: SortOrder
    transformationRule?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataSourceId?: SortOrder
    metricDefinitionId?: SortOrder
    _count?: ColumnMappingCountOrderByAggregateInput
    _max?: ColumnMappingMaxOrderByAggregateInput
    _min?: ColumnMappingMinOrderByAggregateInput
  }

  export type ColumnMappingScalarWhereWithAggregatesInput = {
    AND?: ColumnMappingScalarWhereWithAggregatesInput | ColumnMappingScalarWhereWithAggregatesInput[]
    OR?: ColumnMappingScalarWhereWithAggregatesInput[]
    NOT?: ColumnMappingScalarWhereWithAggregatesInput | ColumnMappingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ColumnMapping"> | string
    columnName?: StringWithAggregatesFilter<"ColumnMapping"> | string
    transformationRule?: StringNullableWithAggregatesFilter<"ColumnMapping"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ColumnMapping"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ColumnMapping"> | Date | string
    dataSourceId?: StringWithAggregatesFilter<"ColumnMapping"> | string
    metricDefinitionId?: StringWithAggregatesFilter<"ColumnMapping"> | string
  }

  export type MetricValueWhereInput = {
    AND?: MetricValueWhereInput | MetricValueWhereInput[]
    OR?: MetricValueWhereInput[]
    NOT?: MetricValueWhereInput | MetricValueWhereInput[]
    id?: StringFilter<"MetricValue"> | string
    date?: DateTimeFilter<"MetricValue"> | Date | string
    value?: StringFilter<"MetricValue"> | string
    sourceType?: StringFilter<"MetricValue"> | string
    sourceSheet?: StringNullableFilter<"MetricValue"> | string | null
    externalId?: StringNullableFilter<"MetricValue"> | string | null
    createdAt?: DateTimeFilter<"MetricValue"> | Date | string
    updatedAt?: DateTimeFilter<"MetricValue"> | Date | string
    metricDefinitionId?: StringFilter<"MetricValue"> | string
    clinicId?: StringNullableFilter<"MetricValue"> | string | null
    providerId?: StringNullableFilter<"MetricValue"> | string | null
    dataSourceId?: StringNullableFilter<"MetricValue"> | string | null
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }

  export type MetricValueOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    value?: SortOrder
    sourceType?: SortOrder
    sourceSheet?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    metricDefinition?: MetricDefinitionOrderByWithRelationInput
    clinic?: ClinicOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    dataSource?: DataSourceOrderByWithRelationInput
  }

  export type MetricValueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetricValueWhereInput | MetricValueWhereInput[]
    OR?: MetricValueWhereInput[]
    NOT?: MetricValueWhereInput | MetricValueWhereInput[]
    date?: DateTimeFilter<"MetricValue"> | Date | string
    value?: StringFilter<"MetricValue"> | string
    sourceType?: StringFilter<"MetricValue"> | string
    sourceSheet?: StringNullableFilter<"MetricValue"> | string | null
    externalId?: StringNullableFilter<"MetricValue"> | string | null
    createdAt?: DateTimeFilter<"MetricValue"> | Date | string
    updatedAt?: DateTimeFilter<"MetricValue"> | Date | string
    metricDefinitionId?: StringFilter<"MetricValue"> | string
    clinicId?: StringNullableFilter<"MetricValue"> | string | null
    providerId?: StringNullableFilter<"MetricValue"> | string | null
    dataSourceId?: StringNullableFilter<"MetricValue"> | string | null
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }, "id">

  export type MetricValueOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    value?: SortOrder
    sourceType?: SortOrder
    sourceSheet?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    _count?: MetricValueCountOrderByAggregateInput
    _max?: MetricValueMaxOrderByAggregateInput
    _min?: MetricValueMinOrderByAggregateInput
  }

  export type MetricValueScalarWhereWithAggregatesInput = {
    AND?: MetricValueScalarWhereWithAggregatesInput | MetricValueScalarWhereWithAggregatesInput[]
    OR?: MetricValueScalarWhereWithAggregatesInput[]
    NOT?: MetricValueScalarWhereWithAggregatesInput | MetricValueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetricValue"> | string
    date?: DateTimeWithAggregatesFilter<"MetricValue"> | Date | string
    value?: StringWithAggregatesFilter<"MetricValue"> | string
    sourceType?: StringWithAggregatesFilter<"MetricValue"> | string
    sourceSheet?: StringNullableWithAggregatesFilter<"MetricValue"> | string | null
    externalId?: StringNullableWithAggregatesFilter<"MetricValue"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MetricValue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetricValue"> | Date | string
    metricDefinitionId?: StringWithAggregatesFilter<"MetricValue"> | string
    clinicId?: StringNullableWithAggregatesFilter<"MetricValue"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"MetricValue"> | string | null
    dataSourceId?: StringNullableWithAggregatesFilter<"MetricValue"> | string | null
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    timePeriod?: StringFilter<"Goal"> | string
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    targetValue?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    metricDefinitionId?: StringFilter<"Goal"> | string
    clinicId?: StringNullableFilter<"Goal"> | string | null
    providerId?: StringNullableFilter<"Goal"> | string | null
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    timePeriod?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    metricDefinition?: MetricDefinitionOrderByWithRelationInput
    clinic?: ClinicOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    timePeriod?: StringFilter<"Goal"> | string
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    targetValue?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    metricDefinitionId?: StringFilter<"Goal"> | string
    clinicId?: StringNullableFilter<"Goal"> | string | null
    providerId?: StringNullableFilter<"Goal"> | string | null
    metricDefinition?: XOR<MetricDefinitionScalarRelationFilter, MetricDefinitionWhereInput>
    clinic?: XOR<ClinicNullableScalarRelationFilter, ClinicWhereInput> | null
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    timePeriod?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    _count?: GoalCountOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    timePeriod?: StringWithAggregatesFilter<"Goal"> | string
    startDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    targetValue?: StringWithAggregatesFilter<"Goal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    metricDefinitionId?: StringWithAggregatesFilter<"Goal"> | string
    clinicId?: StringNullableWithAggregatesFilter<"Goal"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"Goal"> | string | null
  }

  export type DashboardWhereInput = {
    AND?: DashboardWhereInput | DashboardWhereInput[]
    OR?: DashboardWhereInput[]
    NOT?: DashboardWhereInput | DashboardWhereInput[]
    id?: StringFilter<"Dashboard"> | string
    name?: StringFilter<"Dashboard"> | string
    isDefault?: BoolFilter<"Dashboard"> | boolean
    layoutConfig?: JsonNullableFilter<"Dashboard">
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    uuidId?: UuidNullableFilter<"Dashboard"> | string | null
    userUuidId?: StringNullableFilter<"Dashboard"> | string | null
    userId?: StringFilter<"Dashboard"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    widgets?: WidgetListRelationFilter
  }

  export type DashboardOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    layoutConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrderInput | SortOrder
    userUuidId?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    widgets?: WidgetOrderByRelationAggregateInput
  }

  export type DashboardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uuidId?: string
    AND?: DashboardWhereInput | DashboardWhereInput[]
    OR?: DashboardWhereInput[]
    NOT?: DashboardWhereInput | DashboardWhereInput[]
    name?: StringFilter<"Dashboard"> | string
    isDefault?: BoolFilter<"Dashboard"> | boolean
    layoutConfig?: JsonNullableFilter<"Dashboard">
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    userUuidId?: StringNullableFilter<"Dashboard"> | string | null
    userId?: StringFilter<"Dashboard"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    widgets?: WidgetListRelationFilter
  }, "id" | "uuidId">

  export type DashboardOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    layoutConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrderInput | SortOrder
    userUuidId?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: DashboardCountOrderByAggregateInput
    _max?: DashboardMaxOrderByAggregateInput
    _min?: DashboardMinOrderByAggregateInput
  }

  export type DashboardScalarWhereWithAggregatesInput = {
    AND?: DashboardScalarWhereWithAggregatesInput | DashboardScalarWhereWithAggregatesInput[]
    OR?: DashboardScalarWhereWithAggregatesInput[]
    NOT?: DashboardScalarWhereWithAggregatesInput | DashboardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dashboard"> | string
    name?: StringWithAggregatesFilter<"Dashboard"> | string
    isDefault?: BoolWithAggregatesFilter<"Dashboard"> | boolean
    layoutConfig?: JsonNullableWithAggregatesFilter<"Dashboard">
    createdAt?: DateTimeWithAggregatesFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dashboard"> | Date | string
    uuidId?: UuidNullableWithAggregatesFilter<"Dashboard"> | string | null
    userUuidId?: StringNullableWithAggregatesFilter<"Dashboard"> | string | null
    userId?: StringWithAggregatesFilter<"Dashboard"> | string
  }

  export type WidgetWhereInput = {
    AND?: WidgetWhereInput | WidgetWhereInput[]
    OR?: WidgetWhereInput[]
    NOT?: WidgetWhereInput | WidgetWhereInput[]
    id?: StringFilter<"Widget"> | string
    widgetType?: StringFilter<"Widget"> | string
    chartType?: StringNullableFilter<"Widget"> | string | null
    positionX?: IntFilter<"Widget"> | number
    positionY?: IntFilter<"Widget"> | number
    width?: IntFilter<"Widget"> | number
    height?: IntFilter<"Widget"> | number
    config?: JsonNullableFilter<"Widget">
    createdAt?: DateTimeFilter<"Widget"> | Date | string
    updatedAt?: DateTimeFilter<"Widget"> | Date | string
    dashboardId?: StringFilter<"Widget"> | string
    metricDefinitionId?: StringNullableFilter<"Widget"> | string | null
    dashboard?: XOR<DashboardScalarRelationFilter, DashboardWhereInput>
    metricDefinition?: XOR<MetricDefinitionNullableScalarRelationFilter, MetricDefinitionWhereInput> | null
  }

  export type WidgetOrderByWithRelationInput = {
    id?: SortOrder
    widgetType?: SortOrder
    chartType?: SortOrderInput | SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dashboardId?: SortOrder
    metricDefinitionId?: SortOrderInput | SortOrder
    dashboard?: DashboardOrderByWithRelationInput
    metricDefinition?: MetricDefinitionOrderByWithRelationInput
  }

  export type WidgetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WidgetWhereInput | WidgetWhereInput[]
    OR?: WidgetWhereInput[]
    NOT?: WidgetWhereInput | WidgetWhereInput[]
    widgetType?: StringFilter<"Widget"> | string
    chartType?: StringNullableFilter<"Widget"> | string | null
    positionX?: IntFilter<"Widget"> | number
    positionY?: IntFilter<"Widget"> | number
    width?: IntFilter<"Widget"> | number
    height?: IntFilter<"Widget"> | number
    config?: JsonNullableFilter<"Widget">
    createdAt?: DateTimeFilter<"Widget"> | Date | string
    updatedAt?: DateTimeFilter<"Widget"> | Date | string
    dashboardId?: StringFilter<"Widget"> | string
    metricDefinitionId?: StringNullableFilter<"Widget"> | string | null
    dashboard?: XOR<DashboardScalarRelationFilter, DashboardWhereInput>
    metricDefinition?: XOR<MetricDefinitionNullableScalarRelationFilter, MetricDefinitionWhereInput> | null
  }, "id">

  export type WidgetOrderByWithAggregationInput = {
    id?: SortOrder
    widgetType?: SortOrder
    chartType?: SortOrderInput | SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    config?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dashboardId?: SortOrder
    metricDefinitionId?: SortOrderInput | SortOrder
    _count?: WidgetCountOrderByAggregateInput
    _avg?: WidgetAvgOrderByAggregateInput
    _max?: WidgetMaxOrderByAggregateInput
    _min?: WidgetMinOrderByAggregateInput
    _sum?: WidgetSumOrderByAggregateInput
  }

  export type WidgetScalarWhereWithAggregatesInput = {
    AND?: WidgetScalarWhereWithAggregatesInput | WidgetScalarWhereWithAggregatesInput[]
    OR?: WidgetScalarWhereWithAggregatesInput[]
    NOT?: WidgetScalarWhereWithAggregatesInput | WidgetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Widget"> | string
    widgetType?: StringWithAggregatesFilter<"Widget"> | string
    chartType?: StringNullableWithAggregatesFilter<"Widget"> | string | null
    positionX?: IntWithAggregatesFilter<"Widget"> | number
    positionY?: IntWithAggregatesFilter<"Widget"> | number
    width?: IntWithAggregatesFilter<"Widget"> | number
    height?: IntWithAggregatesFilter<"Widget"> | number
    config?: JsonNullableWithAggregatesFilter<"Widget">
    createdAt?: DateTimeWithAggregatesFilter<"Widget"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Widget"> | Date | string
    dashboardId?: StringWithAggregatesFilter<"Widget"> | string
    metricDefinitionId?: StringNullableWithAggregatesFilter<"Widget"> | string | null
  }

  export type UserClinicRoleWhereInput = {
    AND?: UserClinicRoleWhereInput | UserClinicRoleWhereInput[]
    OR?: UserClinicRoleWhereInput[]
    NOT?: UserClinicRoleWhereInput | UserClinicRoleWhereInput[]
    id?: StringFilter<"UserClinicRole"> | string
    userId?: StringFilter<"UserClinicRole"> | string
    clinicId?: StringFilter<"UserClinicRole"> | string
    role?: StringFilter<"UserClinicRole"> | string
    isActive?: BoolFilter<"UserClinicRole"> | boolean
    createdBy?: StringNullableFilter<"UserClinicRole"> | string | null
    createdAt?: DateTimeFilter<"UserClinicRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserClinicRole"> | Date | string
  }

  export type UserClinicRoleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserClinicRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_clinicId?: UserClinicRoleUserIdClinicIdCompoundUniqueInput
    AND?: UserClinicRoleWhereInput | UserClinicRoleWhereInput[]
    OR?: UserClinicRoleWhereInput[]
    NOT?: UserClinicRoleWhereInput | UserClinicRoleWhereInput[]
    userId?: StringFilter<"UserClinicRole"> | string
    clinicId?: StringFilter<"UserClinicRole"> | string
    role?: StringFilter<"UserClinicRole"> | string
    isActive?: BoolFilter<"UserClinicRole"> | boolean
    createdBy?: StringNullableFilter<"UserClinicRole"> | string | null
    createdAt?: DateTimeFilter<"UserClinicRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserClinicRole"> | Date | string
  }, "id" | "userId_clinicId">

  export type UserClinicRoleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserClinicRoleCountOrderByAggregateInput
    _max?: UserClinicRoleMaxOrderByAggregateInput
    _min?: UserClinicRoleMinOrderByAggregateInput
  }

  export type UserClinicRoleScalarWhereWithAggregatesInput = {
    AND?: UserClinicRoleScalarWhereWithAggregatesInput | UserClinicRoleScalarWhereWithAggregatesInput[]
    OR?: UserClinicRoleScalarWhereWithAggregatesInput[]
    NOT?: UserClinicRoleScalarWhereWithAggregatesInput | UserClinicRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserClinicRole"> | string
    userId?: StringWithAggregatesFilter<"UserClinicRole"> | string
    clinicId?: StringWithAggregatesFilter<"UserClinicRole"> | string
    role?: StringWithAggregatesFilter<"UserClinicRole"> | string
    isActive?: BoolWithAggregatesFilter<"UserClinicRole"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"UserClinicRole"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserClinicRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserClinicRole"> | Date | string
  }

  export type GoalTemplateWhereInput = {
    AND?: GoalTemplateWhereInput | GoalTemplateWhereInput[]
    OR?: GoalTemplateWhereInput[]
    NOT?: GoalTemplateWhereInput | GoalTemplateWhereInput[]
    id?: StringFilter<"GoalTemplate"> | string
    name?: StringFilter<"GoalTemplate"> | string
    description?: StringNullableFilter<"GoalTemplate"> | string | null
    category?: StringFilter<"GoalTemplate"> | string
    metricDefinitionId?: StringFilter<"GoalTemplate"> | string
    targetFormula?: StringNullableFilter<"GoalTemplate"> | string | null
    timePeriod?: StringFilter<"GoalTemplate"> | string
    isSystemTemplate?: BoolFilter<"GoalTemplate"> | boolean
    clinicId?: StringNullableFilter<"GoalTemplate"> | string | null
    createdBy?: StringNullableFilter<"GoalTemplate"> | string | null
    createdAt?: DateTimeFilter<"GoalTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"GoalTemplate"> | Date | string
  }

  export type GoalTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    metricDefinitionId?: SortOrder
    targetFormula?: SortOrderInput | SortOrder
    timePeriod?: SortOrder
    isSystemTemplate?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalTemplateWhereInput | GoalTemplateWhereInput[]
    OR?: GoalTemplateWhereInput[]
    NOT?: GoalTemplateWhereInput | GoalTemplateWhereInput[]
    name?: StringFilter<"GoalTemplate"> | string
    description?: StringNullableFilter<"GoalTemplate"> | string | null
    category?: StringFilter<"GoalTemplate"> | string
    metricDefinitionId?: StringFilter<"GoalTemplate"> | string
    targetFormula?: StringNullableFilter<"GoalTemplate"> | string | null
    timePeriod?: StringFilter<"GoalTemplate"> | string
    isSystemTemplate?: BoolFilter<"GoalTemplate"> | boolean
    clinicId?: StringNullableFilter<"GoalTemplate"> | string | null
    createdBy?: StringNullableFilter<"GoalTemplate"> | string | null
    createdAt?: DateTimeFilter<"GoalTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"GoalTemplate"> | Date | string
  }, "id">

  export type GoalTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    metricDefinitionId?: SortOrder
    targetFormula?: SortOrderInput | SortOrder
    timePeriod?: SortOrder
    isSystemTemplate?: SortOrder
    clinicId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoalTemplateCountOrderByAggregateInput
    _max?: GoalTemplateMaxOrderByAggregateInput
    _min?: GoalTemplateMinOrderByAggregateInput
  }

  export type GoalTemplateScalarWhereWithAggregatesInput = {
    AND?: GoalTemplateScalarWhereWithAggregatesInput | GoalTemplateScalarWhereWithAggregatesInput[]
    OR?: GoalTemplateScalarWhereWithAggregatesInput[]
    NOT?: GoalTemplateScalarWhereWithAggregatesInput | GoalTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoalTemplate"> | string
    name?: StringWithAggregatesFilter<"GoalTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"GoalTemplate"> | string | null
    category?: StringWithAggregatesFilter<"GoalTemplate"> | string
    metricDefinitionId?: StringWithAggregatesFilter<"GoalTemplate"> | string
    targetFormula?: StringNullableWithAggregatesFilter<"GoalTemplate"> | string | null
    timePeriod?: StringWithAggregatesFilter<"GoalTemplate"> | string
    isSystemTemplate?: BoolWithAggregatesFilter<"GoalTemplate"> | boolean
    clinicId?: StringNullableWithAggregatesFilter<"GoalTemplate"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"GoalTemplate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GoalTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GoalTemplate"> | Date | string
  }

  export type FinancialMetricWhereInput = {
    AND?: FinancialMetricWhereInput | FinancialMetricWhereInput[]
    OR?: FinancialMetricWhereInput[]
    NOT?: FinancialMetricWhereInput | FinancialMetricWhereInput[]
    id?: StringFilter<"FinancialMetric"> | string
    clinicId?: StringFilter<"FinancialMetric"> | string
    date?: DateTimeFilter<"FinancialMetric"> | Date | string
    metricType?: StringFilter<"FinancialMetric"> | string
    category?: StringFilter<"FinancialMetric"> | string
    amount?: DecimalFilter<"FinancialMetric"> | Decimal | DecimalJsLike | number | string
    providerId?: StringNullableFilter<"FinancialMetric"> | string | null
    insuranceCarrier?: StringNullableFilter<"FinancialMetric"> | string | null
    paymentMethod?: StringNullableFilter<"FinancialMetric"> | string | null
    procedureCode?: StringNullableFilter<"FinancialMetric"> | string | null
    notes?: StringNullableFilter<"FinancialMetric"> | string | null
    sourceReference?: StringNullableFilter<"FinancialMetric"> | string | null
    createdBy?: StringNullableFilter<"FinancialMetric"> | string | null
    createdAt?: DateTimeFilter<"FinancialMetric"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialMetric"> | Date | string
  }

  export type FinancialMetricOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    metricType?: SortOrder
    category?: SortOrder
    amount?: SortOrder
    providerId?: SortOrderInput | SortOrder
    insuranceCarrier?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    procedureCode?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    sourceReference?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FinancialMetricWhereInput | FinancialMetricWhereInput[]
    OR?: FinancialMetricWhereInput[]
    NOT?: FinancialMetricWhereInput | FinancialMetricWhereInput[]
    clinicId?: StringFilter<"FinancialMetric"> | string
    date?: DateTimeFilter<"FinancialMetric"> | Date | string
    metricType?: StringFilter<"FinancialMetric"> | string
    category?: StringFilter<"FinancialMetric"> | string
    amount?: DecimalFilter<"FinancialMetric"> | Decimal | DecimalJsLike | number | string
    providerId?: StringNullableFilter<"FinancialMetric"> | string | null
    insuranceCarrier?: StringNullableFilter<"FinancialMetric"> | string | null
    paymentMethod?: StringNullableFilter<"FinancialMetric"> | string | null
    procedureCode?: StringNullableFilter<"FinancialMetric"> | string | null
    notes?: StringNullableFilter<"FinancialMetric"> | string | null
    sourceReference?: StringNullableFilter<"FinancialMetric"> | string | null
    createdBy?: StringNullableFilter<"FinancialMetric"> | string | null
    createdAt?: DateTimeFilter<"FinancialMetric"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialMetric"> | Date | string
  }, "id">

  export type FinancialMetricOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    metricType?: SortOrder
    category?: SortOrder
    amount?: SortOrder
    providerId?: SortOrderInput | SortOrder
    insuranceCarrier?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    procedureCode?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    sourceReference?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FinancialMetricCountOrderByAggregateInput
    _avg?: FinancialMetricAvgOrderByAggregateInput
    _max?: FinancialMetricMaxOrderByAggregateInput
    _min?: FinancialMetricMinOrderByAggregateInput
    _sum?: FinancialMetricSumOrderByAggregateInput
  }

  export type FinancialMetricScalarWhereWithAggregatesInput = {
    AND?: FinancialMetricScalarWhereWithAggregatesInput | FinancialMetricScalarWhereWithAggregatesInput[]
    OR?: FinancialMetricScalarWhereWithAggregatesInput[]
    NOT?: FinancialMetricScalarWhereWithAggregatesInput | FinancialMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialMetric"> | string
    clinicId?: StringWithAggregatesFilter<"FinancialMetric"> | string
    date?: DateTimeWithAggregatesFilter<"FinancialMetric"> | Date | string
    metricType?: StringWithAggregatesFilter<"FinancialMetric"> | string
    category?: StringWithAggregatesFilter<"FinancialMetric"> | string
    amount?: DecimalWithAggregatesFilter<"FinancialMetric"> | Decimal | DecimalJsLike | number | string
    providerId?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    insuranceCarrier?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    paymentMethod?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    procedureCode?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    notes?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    sourceReference?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"FinancialMetric"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FinancialMetric"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FinancialMetric"> | Date | string
  }

  export type AppointmentMetricWhereInput = {
    AND?: AppointmentMetricWhereInput | AppointmentMetricWhereInput[]
    OR?: AppointmentMetricWhereInput[]
    NOT?: AppointmentMetricWhereInput | AppointmentMetricWhereInput[]
    id?: StringFilter<"AppointmentMetric"> | string
    clinicId?: StringFilter<"AppointmentMetric"> | string
    date?: DateTimeFilter<"AppointmentMetric"> | Date | string
    providerId?: StringNullableFilter<"AppointmentMetric"> | string | null
    appointmentType?: StringFilter<"AppointmentMetric"> | string
    scheduledCount?: IntFilter<"AppointmentMetric"> | number
    completedCount?: IntFilter<"AppointmentMetric"> | number
    cancelledCount?: IntFilter<"AppointmentMetric"> | number
    noShowCount?: IntFilter<"AppointmentMetric"> | number
    averageDuration?: IntNullableFilter<"AppointmentMetric"> | number | null
    productionAmount?: DecimalNullableFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: DecimalNullableFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableFilter<"AppointmentMetric"> | string | null
    createdAt?: DateTimeFilter<"AppointmentMetric"> | Date | string
    updatedAt?: DateTimeFilter<"AppointmentMetric"> | Date | string
  }

  export type AppointmentMetricOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    providerId?: SortOrderInput | SortOrder
    appointmentType?: SortOrder
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrderInput | SortOrder
    productionAmount?: SortOrderInput | SortOrder
    utilizationRate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentMetricWhereInput | AppointmentMetricWhereInput[]
    OR?: AppointmentMetricWhereInput[]
    NOT?: AppointmentMetricWhereInput | AppointmentMetricWhereInput[]
    clinicId?: StringFilter<"AppointmentMetric"> | string
    date?: DateTimeFilter<"AppointmentMetric"> | Date | string
    providerId?: StringNullableFilter<"AppointmentMetric"> | string | null
    appointmentType?: StringFilter<"AppointmentMetric"> | string
    scheduledCount?: IntFilter<"AppointmentMetric"> | number
    completedCount?: IntFilter<"AppointmentMetric"> | number
    cancelledCount?: IntFilter<"AppointmentMetric"> | number
    noShowCount?: IntFilter<"AppointmentMetric"> | number
    averageDuration?: IntNullableFilter<"AppointmentMetric"> | number | null
    productionAmount?: DecimalNullableFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: DecimalNullableFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableFilter<"AppointmentMetric"> | string | null
    createdAt?: DateTimeFilter<"AppointmentMetric"> | Date | string
    updatedAt?: DateTimeFilter<"AppointmentMetric"> | Date | string
  }, "id">

  export type AppointmentMetricOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    providerId?: SortOrderInput | SortOrder
    appointmentType?: SortOrder
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrderInput | SortOrder
    productionAmount?: SortOrderInput | SortOrder
    utilizationRate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentMetricCountOrderByAggregateInput
    _avg?: AppointmentMetricAvgOrderByAggregateInput
    _max?: AppointmentMetricMaxOrderByAggregateInput
    _min?: AppointmentMetricMinOrderByAggregateInput
    _sum?: AppointmentMetricSumOrderByAggregateInput
  }

  export type AppointmentMetricScalarWhereWithAggregatesInput = {
    AND?: AppointmentMetricScalarWhereWithAggregatesInput | AppointmentMetricScalarWhereWithAggregatesInput[]
    OR?: AppointmentMetricScalarWhereWithAggregatesInput[]
    NOT?: AppointmentMetricScalarWhereWithAggregatesInput | AppointmentMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppointmentMetric"> | string
    clinicId?: StringWithAggregatesFilter<"AppointmentMetric"> | string
    date?: DateTimeWithAggregatesFilter<"AppointmentMetric"> | Date | string
    providerId?: StringNullableWithAggregatesFilter<"AppointmentMetric"> | string | null
    appointmentType?: StringWithAggregatesFilter<"AppointmentMetric"> | string
    scheduledCount?: IntWithAggregatesFilter<"AppointmentMetric"> | number
    completedCount?: IntWithAggregatesFilter<"AppointmentMetric"> | number
    cancelledCount?: IntWithAggregatesFilter<"AppointmentMetric"> | number
    noShowCount?: IntWithAggregatesFilter<"AppointmentMetric"> | number
    averageDuration?: IntNullableWithAggregatesFilter<"AppointmentMetric"> | number | null
    productionAmount?: DecimalNullableWithAggregatesFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: DecimalNullableWithAggregatesFilter<"AppointmentMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableWithAggregatesFilter<"AppointmentMetric"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AppointmentMetric"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppointmentMetric"> | Date | string
  }

  export type CallMetricWhereInput = {
    AND?: CallMetricWhereInput | CallMetricWhereInput[]
    OR?: CallMetricWhereInput[]
    NOT?: CallMetricWhereInput | CallMetricWhereInput[]
    id?: StringFilter<"CallMetric"> | string
    clinicId?: StringFilter<"CallMetric"> | string
    date?: DateTimeFilter<"CallMetric"> | Date | string
    callType?: StringFilter<"CallMetric"> | string
    totalCalls?: IntFilter<"CallMetric"> | number
    connectedCalls?: IntFilter<"CallMetric"> | number
    voicemails?: IntFilter<"CallMetric"> | number
    appointmentsScheduled?: IntFilter<"CallMetric"> | number
    conversionRate?: DecimalFilter<"CallMetric"> | Decimal | DecimalJsLike | number | string
    averageCallDuration?: IntNullableFilter<"CallMetric"> | number | null
    staffMemberId?: StringNullableFilter<"CallMetric"> | string | null
    createdBy?: StringNullableFilter<"CallMetric"> | string | null
    createdAt?: DateTimeFilter<"CallMetric"> | Date | string
    updatedAt?: DateTimeFilter<"CallMetric"> | Date | string
  }

  export type CallMetricOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    callType?: SortOrder
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrderInput | SortOrder
    staffMemberId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CallMetricWhereInput | CallMetricWhereInput[]
    OR?: CallMetricWhereInput[]
    NOT?: CallMetricWhereInput | CallMetricWhereInput[]
    clinicId?: StringFilter<"CallMetric"> | string
    date?: DateTimeFilter<"CallMetric"> | Date | string
    callType?: StringFilter<"CallMetric"> | string
    totalCalls?: IntFilter<"CallMetric"> | number
    connectedCalls?: IntFilter<"CallMetric"> | number
    voicemails?: IntFilter<"CallMetric"> | number
    appointmentsScheduled?: IntFilter<"CallMetric"> | number
    conversionRate?: DecimalFilter<"CallMetric"> | Decimal | DecimalJsLike | number | string
    averageCallDuration?: IntNullableFilter<"CallMetric"> | number | null
    staffMemberId?: StringNullableFilter<"CallMetric"> | string | null
    createdBy?: StringNullableFilter<"CallMetric"> | string | null
    createdAt?: DateTimeFilter<"CallMetric"> | Date | string
    updatedAt?: DateTimeFilter<"CallMetric"> | Date | string
  }, "id">

  export type CallMetricOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    callType?: SortOrder
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrderInput | SortOrder
    staffMemberId?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CallMetricCountOrderByAggregateInput
    _avg?: CallMetricAvgOrderByAggregateInput
    _max?: CallMetricMaxOrderByAggregateInput
    _min?: CallMetricMinOrderByAggregateInput
    _sum?: CallMetricSumOrderByAggregateInput
  }

  export type CallMetricScalarWhereWithAggregatesInput = {
    AND?: CallMetricScalarWhereWithAggregatesInput | CallMetricScalarWhereWithAggregatesInput[]
    OR?: CallMetricScalarWhereWithAggregatesInput[]
    NOT?: CallMetricScalarWhereWithAggregatesInput | CallMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CallMetric"> | string
    clinicId?: StringWithAggregatesFilter<"CallMetric"> | string
    date?: DateTimeWithAggregatesFilter<"CallMetric"> | Date | string
    callType?: StringWithAggregatesFilter<"CallMetric"> | string
    totalCalls?: IntWithAggregatesFilter<"CallMetric"> | number
    connectedCalls?: IntWithAggregatesFilter<"CallMetric"> | number
    voicemails?: IntWithAggregatesFilter<"CallMetric"> | number
    appointmentsScheduled?: IntWithAggregatesFilter<"CallMetric"> | number
    conversionRate?: DecimalWithAggregatesFilter<"CallMetric"> | Decimal | DecimalJsLike | number | string
    averageCallDuration?: IntNullableWithAggregatesFilter<"CallMetric"> | number | null
    staffMemberId?: StringNullableWithAggregatesFilter<"CallMetric"> | string | null
    createdBy?: StringNullableWithAggregatesFilter<"CallMetric"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CallMetric"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CallMetric"> | Date | string
  }

  export type PatientMetricWhereInput = {
    AND?: PatientMetricWhereInput | PatientMetricWhereInput[]
    OR?: PatientMetricWhereInput[]
    NOT?: PatientMetricWhereInput | PatientMetricWhereInput[]
    id?: StringFilter<"PatientMetric"> | string
    clinicId?: StringFilter<"PatientMetric"> | string
    date?: DateTimeFilter<"PatientMetric"> | Date | string
    activePatients?: IntFilter<"PatientMetric"> | number
    newPatients?: IntFilter<"PatientMetric"> | number
    reactivatedPatients?: IntFilter<"PatientMetric"> | number
    lostPatients?: IntFilter<"PatientMetric"> | number
    patientRetentionRate?: DecimalFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string
    averagePatientValue?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableFilter<"PatientMetric"> | string | null
    createdAt?: DateTimeFilter<"PatientMetric"> | Date | string
    updatedAt?: DateTimeFilter<"PatientMetric"> | Date | string
  }

  export type PatientMetricOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrderInput | SortOrder
    recareComplianceRate?: SortOrderInput | SortOrder
    treatmentAcceptanceRate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientMetricWhereInput | PatientMetricWhereInput[]
    OR?: PatientMetricWhereInput[]
    NOT?: PatientMetricWhereInput | PatientMetricWhereInput[]
    clinicId?: StringFilter<"PatientMetric"> | string
    date?: DateTimeFilter<"PatientMetric"> | Date | string
    activePatients?: IntFilter<"PatientMetric"> | number
    newPatients?: IntFilter<"PatientMetric"> | number
    reactivatedPatients?: IntFilter<"PatientMetric"> | number
    lostPatients?: IntFilter<"PatientMetric"> | number
    patientRetentionRate?: DecimalFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string
    averagePatientValue?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: DecimalNullableFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableFilter<"PatientMetric"> | string | null
    createdAt?: DateTimeFilter<"PatientMetric"> | Date | string
    updatedAt?: DateTimeFilter<"PatientMetric"> | Date | string
  }, "id">

  export type PatientMetricOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrderInput | SortOrder
    recareComplianceRate?: SortOrderInput | SortOrder
    treatmentAcceptanceRate?: SortOrderInput | SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientMetricCountOrderByAggregateInput
    _avg?: PatientMetricAvgOrderByAggregateInput
    _max?: PatientMetricMaxOrderByAggregateInput
    _min?: PatientMetricMinOrderByAggregateInput
    _sum?: PatientMetricSumOrderByAggregateInput
  }

  export type PatientMetricScalarWhereWithAggregatesInput = {
    AND?: PatientMetricScalarWhereWithAggregatesInput | PatientMetricScalarWhereWithAggregatesInput[]
    OR?: PatientMetricScalarWhereWithAggregatesInput[]
    NOT?: PatientMetricScalarWhereWithAggregatesInput | PatientMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientMetric"> | string
    clinicId?: StringWithAggregatesFilter<"PatientMetric"> | string
    date?: DateTimeWithAggregatesFilter<"PatientMetric"> | Date | string
    activePatients?: IntWithAggregatesFilter<"PatientMetric"> | number
    newPatients?: IntWithAggregatesFilter<"PatientMetric"> | number
    reactivatedPatients?: IntWithAggregatesFilter<"PatientMetric"> | number
    lostPatients?: IntWithAggregatesFilter<"PatientMetric"> | number
    patientRetentionRate?: DecimalWithAggregatesFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string
    averagePatientValue?: DecimalNullableWithAggregatesFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: DecimalNullableWithAggregatesFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: DecimalNullableWithAggregatesFilter<"PatientMetric"> | Decimal | DecimalJsLike | number | string | null
    createdBy?: StringNullableWithAggregatesFilter<"PatientMetric"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientMetric"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientMetric"> | Date | string
  }

  export type MetricAggregationWhereInput = {
    AND?: MetricAggregationWhereInput | MetricAggregationWhereInput[]
    OR?: MetricAggregationWhereInput[]
    NOT?: MetricAggregationWhereInput | MetricAggregationWhereInput[]
    id?: StringFilter<"MetricAggregation"> | string
    clinicId?: StringFilter<"MetricAggregation"> | string
    metricDefinitionId?: StringFilter<"MetricAggregation"> | string
    aggregationType?: StringFilter<"MetricAggregation"> | string
    periodStart?: DateTimeFilter<"MetricAggregation"> | Date | string
    periodEnd?: DateTimeFilter<"MetricAggregation"> | Date | string
    value?: DecimalFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string
    count?: IntFilter<"MetricAggregation"> | number
    minimum?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    maximum?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    average?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    providerId?: StringNullableFilter<"MetricAggregation"> | string | null
    metadata?: JsonNullableFilter<"MetricAggregation">
    createdAt?: DateTimeFilter<"MetricAggregation"> | Date | string
    updatedAt?: DateTimeFilter<"MetricAggregation"> | Date | string
  }

  export type MetricAggregationOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    metricDefinitionId?: SortOrder
    aggregationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrderInput | SortOrder
    maximum?: SortOrderInput | SortOrder
    average?: SortOrderInput | SortOrder
    standardDeviation?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricAggregationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clinicId_metricDefinitionId_aggregationType_periodStart_providerId?: MetricAggregationClinicIdMetricDefinitionIdAggregationTypePeriodStartProviderIdCompoundUniqueInput
    AND?: MetricAggregationWhereInput | MetricAggregationWhereInput[]
    OR?: MetricAggregationWhereInput[]
    NOT?: MetricAggregationWhereInput | MetricAggregationWhereInput[]
    clinicId?: StringFilter<"MetricAggregation"> | string
    metricDefinitionId?: StringFilter<"MetricAggregation"> | string
    aggregationType?: StringFilter<"MetricAggregation"> | string
    periodStart?: DateTimeFilter<"MetricAggregation"> | Date | string
    periodEnd?: DateTimeFilter<"MetricAggregation"> | Date | string
    value?: DecimalFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string
    count?: IntFilter<"MetricAggregation"> | number
    minimum?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    maximum?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    average?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: DecimalNullableFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    providerId?: StringNullableFilter<"MetricAggregation"> | string | null
    metadata?: JsonNullableFilter<"MetricAggregation">
    createdAt?: DateTimeFilter<"MetricAggregation"> | Date | string
    updatedAt?: DateTimeFilter<"MetricAggregation"> | Date | string
  }, "id" | "clinicId_metricDefinitionId_aggregationType_periodStart_providerId">

  export type MetricAggregationOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    metricDefinitionId?: SortOrder
    aggregationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrderInput | SortOrder
    maximum?: SortOrderInput | SortOrder
    average?: SortOrderInput | SortOrder
    standardDeviation?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MetricAggregationCountOrderByAggregateInput
    _avg?: MetricAggregationAvgOrderByAggregateInput
    _max?: MetricAggregationMaxOrderByAggregateInput
    _min?: MetricAggregationMinOrderByAggregateInput
    _sum?: MetricAggregationSumOrderByAggregateInput
  }

  export type MetricAggregationScalarWhereWithAggregatesInput = {
    AND?: MetricAggregationScalarWhereWithAggregatesInput | MetricAggregationScalarWhereWithAggregatesInput[]
    OR?: MetricAggregationScalarWhereWithAggregatesInput[]
    NOT?: MetricAggregationScalarWhereWithAggregatesInput | MetricAggregationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetricAggregation"> | string
    clinicId?: StringWithAggregatesFilter<"MetricAggregation"> | string
    metricDefinitionId?: StringWithAggregatesFilter<"MetricAggregation"> | string
    aggregationType?: StringWithAggregatesFilter<"MetricAggregation"> | string
    periodStart?: DateTimeWithAggregatesFilter<"MetricAggregation"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"MetricAggregation"> | Date | string
    value?: DecimalWithAggregatesFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string
    count?: IntWithAggregatesFilter<"MetricAggregation"> | number
    minimum?: DecimalNullableWithAggregatesFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    maximum?: DecimalNullableWithAggregatesFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    average?: DecimalNullableWithAggregatesFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: DecimalNullableWithAggregatesFilter<"MetricAggregation"> | Decimal | DecimalJsLike | number | string | null
    providerId?: StringNullableWithAggregatesFilter<"MetricAggregation"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"MetricAggregation">
    createdAt?: DateTimeWithAggregatesFilter<"MetricAggregation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetricAggregation"> | Date | string
  }

  export type GoogleCredentialWhereInput = {
    AND?: GoogleCredentialWhereInput | GoogleCredentialWhereInput[]
    OR?: GoogleCredentialWhereInput[]
    NOT?: GoogleCredentialWhereInput | GoogleCredentialWhereInput[]
    id?: StringFilter<"GoogleCredential"> | string
    clinicId?: StringFilter<"GoogleCredential"> | string
    userId?: StringFilter<"GoogleCredential"> | string
    accessToken?: StringFilter<"GoogleCredential"> | string
    refreshToken?: StringFilter<"GoogleCredential"> | string
    expiresAt?: DateTimeFilter<"GoogleCredential"> | Date | string
    scope?: StringNullableListFilter<"GoogleCredential">
    createdAt?: DateTimeFilter<"GoogleCredential"> | Date | string
    updatedAt?: DateTimeFilter<"GoogleCredential"> | Date | string
  }

  export type GoogleCredentialOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoogleCredentialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clinicId_userId?: GoogleCredentialClinicIdUserIdCompoundUniqueInput
    AND?: GoogleCredentialWhereInput | GoogleCredentialWhereInput[]
    OR?: GoogleCredentialWhereInput[]
    NOT?: GoogleCredentialWhereInput | GoogleCredentialWhereInput[]
    clinicId?: StringFilter<"GoogleCredential"> | string
    userId?: StringFilter<"GoogleCredential"> | string
    accessToken?: StringFilter<"GoogleCredential"> | string
    refreshToken?: StringFilter<"GoogleCredential"> | string
    expiresAt?: DateTimeFilter<"GoogleCredential"> | Date | string
    scope?: StringNullableListFilter<"GoogleCredential">
    createdAt?: DateTimeFilter<"GoogleCredential"> | Date | string
    updatedAt?: DateTimeFilter<"GoogleCredential"> | Date | string
  }, "id" | "clinicId_userId">

  export type GoogleCredentialOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GoogleCredentialCountOrderByAggregateInput
    _max?: GoogleCredentialMaxOrderByAggregateInput
    _min?: GoogleCredentialMinOrderByAggregateInput
  }

  export type GoogleCredentialScalarWhereWithAggregatesInput = {
    AND?: GoogleCredentialScalarWhereWithAggregatesInput | GoogleCredentialScalarWhereWithAggregatesInput[]
    OR?: GoogleCredentialScalarWhereWithAggregatesInput[]
    NOT?: GoogleCredentialScalarWhereWithAggregatesInput | GoogleCredentialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GoogleCredential"> | string
    clinicId?: StringWithAggregatesFilter<"GoogleCredential"> | string
    userId?: StringWithAggregatesFilter<"GoogleCredential"> | string
    accessToken?: StringWithAggregatesFilter<"GoogleCredential"> | string
    refreshToken?: StringWithAggregatesFilter<"GoogleCredential"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"GoogleCredential"> | Date | string
    scope?: StringNullableListFilter<"GoogleCredential">
    createdAt?: DateTimeWithAggregatesFilter<"GoogleCredential"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GoogleCredential"> | Date | string
  }

  export type SpreadsheetConnectionWhereInput = {
    AND?: SpreadsheetConnectionWhereInput | SpreadsheetConnectionWhereInput[]
    OR?: SpreadsheetConnectionWhereInput[]
    NOT?: SpreadsheetConnectionWhereInput | SpreadsheetConnectionWhereInput[]
    id?: StringFilter<"SpreadsheetConnection"> | string
    clinicId?: StringFilter<"SpreadsheetConnection"> | string
    credentialId?: StringFilter<"SpreadsheetConnection"> | string
    spreadsheetId?: StringFilter<"SpreadsheetConnection"> | string
    spreadsheetName?: StringFilter<"SpreadsheetConnection"> | string
    sheetNames?: StringNullableListFilter<"SpreadsheetConnection">
    lastSyncAt?: DateTimeNullableFilter<"SpreadsheetConnection"> | Date | string | null
    syncStatus?: StringFilter<"SpreadsheetConnection"> | string
    createdAt?: DateTimeFilter<"SpreadsheetConnection"> | Date | string
    updatedAt?: DateTimeFilter<"SpreadsheetConnection"> | Date | string
  }

  export type SpreadsheetConnectionOrderByWithRelationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    credentialId?: SortOrder
    spreadsheetId?: SortOrder
    spreadsheetName?: SortOrder
    sheetNames?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadsheetConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clinicId_spreadsheetId?: SpreadsheetConnectionClinicIdSpreadsheetIdCompoundUniqueInput
    AND?: SpreadsheetConnectionWhereInput | SpreadsheetConnectionWhereInput[]
    OR?: SpreadsheetConnectionWhereInput[]
    NOT?: SpreadsheetConnectionWhereInput | SpreadsheetConnectionWhereInput[]
    clinicId?: StringFilter<"SpreadsheetConnection"> | string
    credentialId?: StringFilter<"SpreadsheetConnection"> | string
    spreadsheetId?: StringFilter<"SpreadsheetConnection"> | string
    spreadsheetName?: StringFilter<"SpreadsheetConnection"> | string
    sheetNames?: StringNullableListFilter<"SpreadsheetConnection">
    lastSyncAt?: DateTimeNullableFilter<"SpreadsheetConnection"> | Date | string | null
    syncStatus?: StringFilter<"SpreadsheetConnection"> | string
    createdAt?: DateTimeFilter<"SpreadsheetConnection"> | Date | string
    updatedAt?: DateTimeFilter<"SpreadsheetConnection"> | Date | string
  }, "id" | "clinicId_spreadsheetId">

  export type SpreadsheetConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    clinicId?: SortOrder
    credentialId?: SortOrder
    spreadsheetId?: SortOrder
    spreadsheetName?: SortOrder
    sheetNames?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    syncStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SpreadsheetConnectionCountOrderByAggregateInput
    _max?: SpreadsheetConnectionMaxOrderByAggregateInput
    _min?: SpreadsheetConnectionMinOrderByAggregateInput
  }

  export type SpreadsheetConnectionScalarWhereWithAggregatesInput = {
    AND?: SpreadsheetConnectionScalarWhereWithAggregatesInput | SpreadsheetConnectionScalarWhereWithAggregatesInput[]
    OR?: SpreadsheetConnectionScalarWhereWithAggregatesInput[]
    NOT?: SpreadsheetConnectionScalarWhereWithAggregatesInput | SpreadsheetConnectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    clinicId?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    credentialId?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    spreadsheetId?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    spreadsheetName?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    sheetNames?: StringNullableListFilter<"SpreadsheetConnection">
    lastSyncAt?: DateTimeNullableWithAggregatesFilter<"SpreadsheetConnection"> | Date | string | null
    syncStatus?: StringWithAggregatesFilter<"SpreadsheetConnection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SpreadsheetConnection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SpreadsheetConnection"> | Date | string
  }

  export type ColumnMappingV2WhereInput = {
    AND?: ColumnMappingV2WhereInput | ColumnMappingV2WhereInput[]
    OR?: ColumnMappingV2WhereInput[]
    NOT?: ColumnMappingV2WhereInput | ColumnMappingV2WhereInput[]
    id?: StringFilter<"ColumnMappingV2"> | string
    connectionId?: StringFilter<"ColumnMappingV2"> | string
    sheetName?: StringFilter<"ColumnMappingV2"> | string
    mappingConfig?: JsonFilter<"ColumnMappingV2">
    templateName?: StringNullableFilter<"ColumnMappingV2"> | string | null
    version?: IntFilter<"ColumnMappingV2"> | number
    isActive?: BoolFilter<"ColumnMappingV2"> | boolean
    createdAt?: DateTimeFilter<"ColumnMappingV2"> | Date | string
    updatedAt?: DateTimeFilter<"ColumnMappingV2"> | Date | string
  }

  export type ColumnMappingV2OrderByWithRelationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    sheetName?: SortOrder
    mappingConfig?: SortOrder
    templateName?: SortOrderInput | SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColumnMappingV2WhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ColumnMappingV2WhereInput | ColumnMappingV2WhereInput[]
    OR?: ColumnMappingV2WhereInput[]
    NOT?: ColumnMappingV2WhereInput | ColumnMappingV2WhereInput[]
    connectionId?: StringFilter<"ColumnMappingV2"> | string
    sheetName?: StringFilter<"ColumnMappingV2"> | string
    mappingConfig?: JsonFilter<"ColumnMappingV2">
    templateName?: StringNullableFilter<"ColumnMappingV2"> | string | null
    version?: IntFilter<"ColumnMappingV2"> | number
    isActive?: BoolFilter<"ColumnMappingV2"> | boolean
    createdAt?: DateTimeFilter<"ColumnMappingV2"> | Date | string
    updatedAt?: DateTimeFilter<"ColumnMappingV2"> | Date | string
  }, "id">

  export type ColumnMappingV2OrderByWithAggregationInput = {
    id?: SortOrder
    connectionId?: SortOrder
    sheetName?: SortOrder
    mappingConfig?: SortOrder
    templateName?: SortOrderInput | SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ColumnMappingV2CountOrderByAggregateInput
    _avg?: ColumnMappingV2AvgOrderByAggregateInput
    _max?: ColumnMappingV2MaxOrderByAggregateInput
    _min?: ColumnMappingV2MinOrderByAggregateInput
    _sum?: ColumnMappingV2SumOrderByAggregateInput
  }

  export type ColumnMappingV2ScalarWhereWithAggregatesInput = {
    AND?: ColumnMappingV2ScalarWhereWithAggregatesInput | ColumnMappingV2ScalarWhereWithAggregatesInput[]
    OR?: ColumnMappingV2ScalarWhereWithAggregatesInput[]
    NOT?: ColumnMappingV2ScalarWhereWithAggregatesInput | ColumnMappingV2ScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ColumnMappingV2"> | string
    connectionId?: StringWithAggregatesFilter<"ColumnMappingV2"> | string
    sheetName?: StringWithAggregatesFilter<"ColumnMappingV2"> | string
    mappingConfig?: JsonWithAggregatesFilter<"ColumnMappingV2">
    templateName?: StringNullableWithAggregatesFilter<"ColumnMappingV2"> | string | null
    version?: IntWithAggregatesFilter<"ColumnMappingV2"> | number
    isActive?: BoolWithAggregatesFilter<"ColumnMappingV2"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ColumnMappingV2"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ColumnMappingV2"> | Date | string
  }

  export type HygieneProductionWhereInput = {
    AND?: HygieneProductionWhereInput | HygieneProductionWhereInput[]
    OR?: HygieneProductionWhereInput[]
    NOT?: HygieneProductionWhereInput | HygieneProductionWhereInput[]
    id?: StringFilter<"HygieneProduction"> | string
    date?: DateTimeFilter<"HygieneProduction"> | Date | string
    monthTab?: StringFilter<"HygieneProduction"> | string
    hoursWorked?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    productionGoal?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    updatedAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    clinicId?: StringFilter<"HygieneProduction"> | string
    providerId?: StringNullableFilter<"HygieneProduction"> | string | null
    dataSourceId?: StringNullableFilter<"HygieneProduction"> | string | null
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }

  export type HygieneProductionOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    estimatedProduction?: SortOrderInput | SortOrder
    verifiedProduction?: SortOrderInput | SortOrder
    productionGoal?: SortOrderInput | SortOrder
    variancePercentage?: SortOrderInput | SortOrder
    bonusAmount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    clinic?: ClinicOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    dataSource?: DataSourceOrderByWithRelationInput
  }

  export type HygieneProductionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HygieneProductionWhereInput | HygieneProductionWhereInput[]
    OR?: HygieneProductionWhereInput[]
    NOT?: HygieneProductionWhereInput | HygieneProductionWhereInput[]
    date?: DateTimeFilter<"HygieneProduction"> | Date | string
    monthTab?: StringFilter<"HygieneProduction"> | string
    hoursWorked?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    productionGoal?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    updatedAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    clinicId?: StringFilter<"HygieneProduction"> | string
    providerId?: StringNullableFilter<"HygieneProduction"> | string | null
    dataSourceId?: StringNullableFilter<"HygieneProduction"> | string | null
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }, "id">

  export type HygieneProductionOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    estimatedProduction?: SortOrderInput | SortOrder
    verifiedProduction?: SortOrderInput | SortOrder
    productionGoal?: SortOrderInput | SortOrder
    variancePercentage?: SortOrderInput | SortOrder
    bonusAmount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    _count?: HygieneProductionCountOrderByAggregateInput
    _avg?: HygieneProductionAvgOrderByAggregateInput
    _max?: HygieneProductionMaxOrderByAggregateInput
    _min?: HygieneProductionMinOrderByAggregateInput
    _sum?: HygieneProductionSumOrderByAggregateInput
  }

  export type HygieneProductionScalarWhereWithAggregatesInput = {
    AND?: HygieneProductionScalarWhereWithAggregatesInput | HygieneProductionScalarWhereWithAggregatesInput[]
    OR?: HygieneProductionScalarWhereWithAggregatesInput[]
    NOT?: HygieneProductionScalarWhereWithAggregatesInput | HygieneProductionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HygieneProduction"> | string
    date?: DateTimeWithAggregatesFilter<"HygieneProduction"> | Date | string
    monthTab?: StringWithAggregatesFilter<"HygieneProduction"> | string
    hoursWorked?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    productionGoal?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: DecimalNullableWithAggregatesFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HygieneProduction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HygieneProduction"> | Date | string
    clinicId?: StringWithAggregatesFilter<"HygieneProduction"> | string
    providerId?: StringNullableWithAggregatesFilter<"HygieneProduction"> | string | null
    dataSourceId?: StringNullableWithAggregatesFilter<"HygieneProduction"> | string | null
  }

  export type DentistProductionWhereInput = {
    AND?: DentistProductionWhereInput | DentistProductionWhereInput[]
    OR?: DentistProductionWhereInput[]
    NOT?: DentistProductionWhereInput | DentistProductionWhereInput[]
    id?: StringFilter<"DentistProduction"> | string
    date?: DateTimeFilter<"DentistProduction"> | Date | string
    monthTab?: StringFilter<"DentistProduction"> | string
    verifiedProductionHumble?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    totalProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    providerName?: StringNullableFilter<"DentistProduction"> | string | null
    createdAt?: DateTimeFilter<"DentistProduction"> | Date | string
    updatedAt?: DateTimeFilter<"DentistProduction"> | Date | string
    clinicId?: StringFilter<"DentistProduction"> | string
    providerId?: StringNullableFilter<"DentistProduction"> | string | null
    dataSourceId?: StringNullableFilter<"DentistProduction"> | string | null
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }

  export type DentistProductionOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    verifiedProductionHumble?: SortOrderInput | SortOrder
    verifiedProductionBaytown?: SortOrderInput | SortOrder
    totalProduction?: SortOrderInput | SortOrder
    monthlyGoal?: SortOrderInput | SortOrder
    productionPerHour?: SortOrderInput | SortOrder
    avgDailyProduction?: SortOrderInput | SortOrder
    providerName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    clinic?: ClinicOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    dataSource?: DataSourceOrderByWithRelationInput
  }

  export type DentistProductionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DentistProductionWhereInput | DentistProductionWhereInput[]
    OR?: DentistProductionWhereInput[]
    NOT?: DentistProductionWhereInput | DentistProductionWhereInput[]
    date?: DateTimeFilter<"DentistProduction"> | Date | string
    monthTab?: StringFilter<"DentistProduction"> | string
    verifiedProductionHumble?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    totalProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    providerName?: StringNullableFilter<"DentistProduction"> | string | null
    createdAt?: DateTimeFilter<"DentistProduction"> | Date | string
    updatedAt?: DateTimeFilter<"DentistProduction"> | Date | string
    clinicId?: StringFilter<"DentistProduction"> | string
    providerId?: StringNullableFilter<"DentistProduction"> | string | null
    dataSourceId?: StringNullableFilter<"DentistProduction"> | string | null
    clinic?: XOR<ClinicScalarRelationFilter, ClinicWhereInput>
    provider?: XOR<ProviderNullableScalarRelationFilter, ProviderWhereInput> | null
    dataSource?: XOR<DataSourceNullableScalarRelationFilter, DataSourceWhereInput> | null
  }, "id">

  export type DentistProductionOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    verifiedProductionHumble?: SortOrderInput | SortOrder
    verifiedProductionBaytown?: SortOrderInput | SortOrder
    totalProduction?: SortOrderInput | SortOrder
    monthlyGoal?: SortOrderInput | SortOrder
    productionPerHour?: SortOrderInput | SortOrder
    avgDailyProduction?: SortOrderInput | SortOrder
    providerName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    dataSourceId?: SortOrderInput | SortOrder
    _count?: DentistProductionCountOrderByAggregateInput
    _avg?: DentistProductionAvgOrderByAggregateInput
    _max?: DentistProductionMaxOrderByAggregateInput
    _min?: DentistProductionMinOrderByAggregateInput
    _sum?: DentistProductionSumOrderByAggregateInput
  }

  export type DentistProductionScalarWhereWithAggregatesInput = {
    AND?: DentistProductionScalarWhereWithAggregatesInput | DentistProductionScalarWhereWithAggregatesInput[]
    OR?: DentistProductionScalarWhereWithAggregatesInput[]
    NOT?: DentistProductionScalarWhereWithAggregatesInput | DentistProductionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DentistProduction"> | string
    date?: DateTimeWithAggregatesFilter<"DentistProduction"> | Date | string
    monthTab?: StringWithAggregatesFilter<"DentistProduction"> | string
    verifiedProductionHumble?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    totalProduction?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: DecimalNullableWithAggregatesFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    providerName?: StringNullableWithAggregatesFilter<"DentistProduction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DentistProduction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DentistProduction"> | Date | string
    clinicId?: StringWithAggregatesFilter<"DentistProduction"> | string
    providerId?: StringNullableWithAggregatesFilter<"DentistProduction"> | string | null
    dataSourceId?: StringNullableWithAggregatesFilter<"DentistProduction"> | string | null
  }

  export type IdMappingWhereInput = {
    AND?: IdMappingWhereInput | IdMappingWhereInput[]
    OR?: IdMappingWhereInput[]
    NOT?: IdMappingWhereInput | IdMappingWhereInput[]
    id?: StringFilter<"IdMapping"> | string
    tableName?: StringFilter<"IdMapping"> | string
    oldId?: StringFilter<"IdMapping"> | string
    newId?: StringFilter<"IdMapping"> | string
    createdAt?: DateTimeFilter<"IdMapping"> | Date | string
  }

  export type IdMappingOrderByWithRelationInput = {
    id?: SortOrder
    tableName?: SortOrder
    oldId?: SortOrder
    newId?: SortOrder
    createdAt?: SortOrder
  }

  export type IdMappingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tableName_oldId?: IdMappingTableNameOldIdCompoundUniqueInput
    AND?: IdMappingWhereInput | IdMappingWhereInput[]
    OR?: IdMappingWhereInput[]
    NOT?: IdMappingWhereInput | IdMappingWhereInput[]
    tableName?: StringFilter<"IdMapping"> | string
    oldId?: StringFilter<"IdMapping"> | string
    newId?: StringFilter<"IdMapping"> | string
    createdAt?: DateTimeFilter<"IdMapping"> | Date | string
  }, "id" | "tableName_oldId">

  export type IdMappingOrderByWithAggregationInput = {
    id?: SortOrder
    tableName?: SortOrder
    oldId?: SortOrder
    newId?: SortOrder
    createdAt?: SortOrder
    _count?: IdMappingCountOrderByAggregateInput
    _max?: IdMappingMaxOrderByAggregateInput
    _min?: IdMappingMinOrderByAggregateInput
  }

  export type IdMappingScalarWhereWithAggregatesInput = {
    AND?: IdMappingScalarWhereWithAggregatesInput | IdMappingScalarWhereWithAggregatesInput[]
    OR?: IdMappingScalarWhereWithAggregatesInput[]
    NOT?: IdMappingScalarWhereWithAggregatesInput | IdMappingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IdMapping"> | string
    tableName?: StringWithAggregatesFilter<"IdMapping"> | string
    oldId?: StringWithAggregatesFilter<"IdMapping"> | string
    newId?: StringWithAggregatesFilter<"IdMapping"> | string
    createdAt?: DateTimeWithAggregatesFilter<"IdMapping"> | Date | string
  }

  export type ClinicCreateInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ClinicCreateManyInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
  }

  export type ClinicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClinicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    clinic?: ClinicCreateNestedOneWithoutUsersInput
    dashboards?: DashboardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    clinicId?: string | null
    dashboards?: DashboardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    clinic?: ClinicUpdateOneWithoutUsersNestedInput
    dashboards?: DashboardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: DashboardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    clinicId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderCreateInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateManyInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
  }

  export type ProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationsInput
    financials?: LocationFinancialCreateNestedManyWithoutLocationInput
    providers?: ProviderLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    clinicId: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    financials?: LocationFinancialUncheckedCreateNestedManyWithoutLocationInput
    providers?: ProviderLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationsNestedInput
    financials?: LocationFinancialUpdateManyWithoutLocationNestedInput
    providers?: ProviderLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financials?: LocationFinancialUncheckedUpdateManyWithoutLocationNestedInput
    providers?: ProviderLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    clinicId: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderLocationCreateInput = {
    id?: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
    provider: ProviderCreateNestedOneWithoutProviderLocationsInput
    location: LocationCreateNestedOneWithoutProvidersInput
  }

  export type ProviderLocationUncheckedCreateInput = {
    id?: string
    providerId: string
    locationId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type ProviderLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    provider?: ProviderUpdateOneRequiredWithoutProviderLocationsNestedInput
    location?: LocationUpdateOneRequiredWithoutProvidersNestedInput
  }

  export type ProviderLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProviderLocationCreateManyInput = {
    id?: string
    providerId: string
    locationId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type ProviderLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProviderLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LocationFinancialCreateInput = {
    id?: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationFinancialsInput
    location: LocationCreateNestedOneWithoutFinancialsInput
    dataSource?: DataSourceCreateNestedOneWithoutLocationFinancialsInput
  }

  export type LocationFinancialUncheckedCreateInput = {
    id?: string
    clinicId: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationFinancialsNestedInput
    location?: LocationUpdateOneRequiredWithoutFinancialsNestedInput
    dataSource?: DataSourceUpdateOneWithoutLocationFinancialsNestedInput
  }

  export type LocationFinancialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialCreateManyInput = {
    id?: string
    clinicId: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricDefinitionCreateInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalUncheckedCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetUncheckedCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUncheckedUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionCreateManyInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricDefinitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricDefinitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataSourceCreateInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type DataSourceCreateManyInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
  }

  export type DataSourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataSourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColumnMappingCreateInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSource: DataSourceCreateNestedOneWithoutColumnMappingsInput
    metricDefinition: MetricDefinitionCreateNestedOneWithoutColumnMappingsInput
  }

  export type ColumnMappingUncheckedCreateInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSourceId: string
    metricDefinitionId: string
  }

  export type ColumnMappingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSource?: DataSourceUpdateOneRequiredWithoutColumnMappingsNestedInput
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutColumnMappingsNestedInput
  }

  export type ColumnMappingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSourceId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnMappingCreateManyInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSourceId: string
    metricDefinitionId: string
  }

  export type ColumnMappingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnMappingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSourceId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
  }

  export type MetricValueCreateInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutMetricsInput
    clinic?: ClinicCreateNestedOneWithoutMetricsInput
    provider?: ProviderCreateNestedOneWithoutMetricsInput
    dataSource?: DataSourceCreateNestedOneWithoutMetricsInput
  }

  export type MetricValueUncheckedCreateInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type MetricValueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutMetricsNestedInput
    clinic?: ClinicUpdateOneWithoutMetricsNestedInput
    provider?: ProviderUpdateOneWithoutMetricsNestedInput
    dataSource?: DataSourceUpdateOneWithoutMetricsNestedInput
  }

  export type MetricValueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueCreateManyInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type MetricValueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricValueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalCreateInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutGoalsInput
    clinic?: ClinicCreateNestedOneWithoutGoalsInput
    provider?: ProviderCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutGoalsNestedInput
    clinic?: ClinicUpdateOneWithoutGoalsNestedInput
    provider?: ProviderUpdateOneWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalCreateManyInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DashboardCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    user: UserCreateNestedOneWithoutDashboardsInput
    widgets?: WidgetCreateNestedManyWithoutDashboardInput
  }

  export type DashboardUncheckedCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    userId: string
    widgets?: WidgetUncheckedCreateNestedManyWithoutDashboardInput
  }

  export type DashboardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutDashboardsNestedInput
    widgets?: WidgetUpdateManyWithoutDashboardNestedInput
  }

  export type DashboardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    widgets?: WidgetUncheckedUpdateManyWithoutDashboardNestedInput
  }

  export type DashboardCreateManyInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    userId: string
  }

  export type DashboardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DashboardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WidgetCreateInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboard: DashboardCreateNestedOneWithoutWidgetsInput
    metricDefinition?: MetricDefinitionCreateNestedOneWithoutWidgetsInput
  }

  export type WidgetUncheckedCreateInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboardId: string
    metricDefinitionId?: string | null
  }

  export type WidgetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboard?: DashboardUpdateOneRequiredWithoutWidgetsNestedInput
    metricDefinition?: MetricDefinitionUpdateOneWithoutWidgetsNestedInput
  }

  export type WidgetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboardId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WidgetCreateManyInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboardId: string
    metricDefinitionId?: string | null
  }

  export type WidgetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WidgetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboardId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserClinicRoleCreateInput = {
    id?: string
    userId: string
    clinicId: string
    role: string
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserClinicRoleUncheckedCreateInput = {
    id?: string
    userId: string
    clinicId: string
    role: string
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserClinicRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClinicRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClinicRoleCreateManyInput = {
    id?: string
    userId: string
    clinicId: string
    role: string
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserClinicRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClinicRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    metricDefinitionId: string
    targetFormula?: string | null
    timePeriod: string
    isSystemTemplate?: boolean
    clinicId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    metricDefinitionId: string
    targetFormula?: string | null
    timePeriod: string
    isSystemTemplate?: boolean
    clinicId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    targetFormula?: NullableStringFieldUpdateOperationsInput | string | null
    timePeriod?: StringFieldUpdateOperationsInput | string
    isSystemTemplate?: BoolFieldUpdateOperationsInput | boolean
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    targetFormula?: NullableStringFieldUpdateOperationsInput | string | null
    timePeriod?: StringFieldUpdateOperationsInput | string
    isSystemTemplate?: BoolFieldUpdateOperationsInput | boolean
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category: string
    metricDefinitionId: string
    targetFormula?: string | null
    timePeriod: string
    isSystemTemplate?: boolean
    clinicId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoalTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    targetFormula?: NullableStringFieldUpdateOperationsInput | string | null
    timePeriod?: StringFieldUpdateOperationsInput | string
    isSystemTemplate?: BoolFieldUpdateOperationsInput | boolean
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    targetFormula?: NullableStringFieldUpdateOperationsInput | string | null
    timePeriod?: StringFieldUpdateOperationsInput | string
    isSystemTemplate?: BoolFieldUpdateOperationsInput | boolean
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialMetricCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    metricType: string
    category: string
    amount: Decimal | DecimalJsLike | number | string
    providerId?: string | null
    insuranceCarrier?: string | null
    paymentMethod?: string | null
    procedureCode?: string | null
    notes?: string | null
    sourceReference?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialMetricUncheckedCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    metricType: string
    category: string
    amount: Decimal | DecimalJsLike | number | string
    providerId?: string | null
    insuranceCarrier?: string | null
    paymentMethod?: string | null
    procedureCode?: string | null
    notes?: string | null
    sourceReference?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    procedureCode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    procedureCode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialMetricCreateManyInput = {
    id?: string
    clinicId: string
    date: Date | string
    metricType: string
    category: string
    amount: Decimal | DecimalJsLike | number | string
    providerId?: string | null
    insuranceCarrier?: string | null
    paymentMethod?: string | null
    procedureCode?: string | null
    notes?: string | null
    sourceReference?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    procedureCode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    metricType?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceCarrier?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    procedureCode?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    sourceReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentMetricCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    providerId?: string | null
    appointmentType: string
    scheduledCount: number
    completedCount: number
    cancelledCount: number
    noShowCount: number
    averageDuration?: number | null
    productionAmount?: Decimal | DecimalJsLike | number | string | null
    utilizationRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentMetricUncheckedCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    providerId?: string | null
    appointmentType: string
    scheduledCount: number
    completedCount: number
    cancelledCount: number
    noShowCount: number
    averageDuration?: number | null
    productionAmount?: Decimal | DecimalJsLike | number | string | null
    utilizationRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentType?: StringFieldUpdateOperationsInput | string
    scheduledCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    cancelledCount?: IntFieldUpdateOperationsInput | number
    noShowCount?: IntFieldUpdateOperationsInput | number
    averageDuration?: NullableIntFieldUpdateOperationsInput | number | null
    productionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentType?: StringFieldUpdateOperationsInput | string
    scheduledCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    cancelledCount?: IntFieldUpdateOperationsInput | number
    noShowCount?: IntFieldUpdateOperationsInput | number
    averageDuration?: NullableIntFieldUpdateOperationsInput | number | null
    productionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentMetricCreateManyInput = {
    id?: string
    clinicId: string
    date: Date | string
    providerId?: string | null
    appointmentType: string
    scheduledCount: number
    completedCount: number
    cancelledCount: number
    noShowCount: number
    averageDuration?: number | null
    productionAmount?: Decimal | DecimalJsLike | number | string | null
    utilizationRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentType?: StringFieldUpdateOperationsInput | string
    scheduledCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    cancelledCount?: IntFieldUpdateOperationsInput | number
    noShowCount?: IntFieldUpdateOperationsInput | number
    averageDuration?: NullableIntFieldUpdateOperationsInput | number | null
    productionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentType?: StringFieldUpdateOperationsInput | string
    scheduledCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    cancelledCount?: IntFieldUpdateOperationsInput | number
    noShowCount?: IntFieldUpdateOperationsInput | number
    averageDuration?: NullableIntFieldUpdateOperationsInput | number | null
    productionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    utilizationRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallMetricCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    callType: string
    totalCalls: number
    connectedCalls: number
    voicemails: number
    appointmentsScheduled: number
    conversionRate: Decimal | DecimalJsLike | number | string
    averageCallDuration?: number | null
    staffMemberId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallMetricUncheckedCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    callType: string
    totalCalls: number
    connectedCalls: number
    voicemails: number
    appointmentsScheduled: number
    conversionRate: Decimal | DecimalJsLike | number | string
    averageCallDuration?: number | null
    staffMemberId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    callType?: StringFieldUpdateOperationsInput | string
    totalCalls?: IntFieldUpdateOperationsInput | number
    connectedCalls?: IntFieldUpdateOperationsInput | number
    voicemails?: IntFieldUpdateOperationsInput | number
    appointmentsScheduled?: IntFieldUpdateOperationsInput | number
    conversionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averageCallDuration?: NullableIntFieldUpdateOperationsInput | number | null
    staffMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    callType?: StringFieldUpdateOperationsInput | string
    totalCalls?: IntFieldUpdateOperationsInput | number
    connectedCalls?: IntFieldUpdateOperationsInput | number
    voicemails?: IntFieldUpdateOperationsInput | number
    appointmentsScheduled?: IntFieldUpdateOperationsInput | number
    conversionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averageCallDuration?: NullableIntFieldUpdateOperationsInput | number | null
    staffMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallMetricCreateManyInput = {
    id?: string
    clinicId: string
    date: Date | string
    callType: string
    totalCalls: number
    connectedCalls: number
    voicemails: number
    appointmentsScheduled: number
    conversionRate: Decimal | DecimalJsLike | number | string
    averageCallDuration?: number | null
    staffMemberId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    callType?: StringFieldUpdateOperationsInput | string
    totalCalls?: IntFieldUpdateOperationsInput | number
    connectedCalls?: IntFieldUpdateOperationsInput | number
    voicemails?: IntFieldUpdateOperationsInput | number
    appointmentsScheduled?: IntFieldUpdateOperationsInput | number
    conversionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averageCallDuration?: NullableIntFieldUpdateOperationsInput | number | null
    staffMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    callType?: StringFieldUpdateOperationsInput | string
    totalCalls?: IntFieldUpdateOperationsInput | number
    connectedCalls?: IntFieldUpdateOperationsInput | number
    voicemails?: IntFieldUpdateOperationsInput | number
    appointmentsScheduled?: IntFieldUpdateOperationsInput | number
    conversionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averageCallDuration?: NullableIntFieldUpdateOperationsInput | number | null
    staffMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMetricCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    activePatients: number
    newPatients: number
    reactivatedPatients: number
    lostPatients: number
    patientRetentionRate: Decimal | DecimalJsLike | number | string
    averagePatientValue?: Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientMetricUncheckedCreateInput = {
    id?: string
    clinicId: string
    date: Date | string
    activePatients: number
    newPatients: number
    reactivatedPatients: number
    lostPatients: number
    patientRetentionRate: Decimal | DecimalJsLike | number | string
    averagePatientValue?: Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activePatients?: IntFieldUpdateOperationsInput | number
    newPatients?: IntFieldUpdateOperationsInput | number
    reactivatedPatients?: IntFieldUpdateOperationsInput | number
    lostPatients?: IntFieldUpdateOperationsInput | number
    patientRetentionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averagePatientValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activePatients?: IntFieldUpdateOperationsInput | number
    newPatients?: IntFieldUpdateOperationsInput | number
    reactivatedPatients?: IntFieldUpdateOperationsInput | number
    lostPatients?: IntFieldUpdateOperationsInput | number
    patientRetentionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averagePatientValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMetricCreateManyInput = {
    id?: string
    clinicId: string
    date: Date | string
    activePatients: number
    newPatients: number
    reactivatedPatients: number
    lostPatients: number
    patientRetentionRate: Decimal | DecimalJsLike | number | string
    averagePatientValue?: Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activePatients?: IntFieldUpdateOperationsInput | number
    newPatients?: IntFieldUpdateOperationsInput | number
    reactivatedPatients?: IntFieldUpdateOperationsInput | number
    lostPatients?: IntFieldUpdateOperationsInput | number
    patientRetentionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averagePatientValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activePatients?: IntFieldUpdateOperationsInput | number
    newPatients?: IntFieldUpdateOperationsInput | number
    reactivatedPatients?: IntFieldUpdateOperationsInput | number
    lostPatients?: IntFieldUpdateOperationsInput | number
    patientRetentionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    averagePatientValue?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    recareComplianceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    treatmentAcceptanceRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricAggregationCreateInput = {
    id?: string
    clinicId: string
    metricDefinitionId: string
    aggregationType: string
    periodStart: Date | string
    periodEnd: Date | string
    value: Decimal | DecimalJsLike | number | string
    count: number
    minimum?: Decimal | DecimalJsLike | number | string | null
    maximum?: Decimal | DecimalJsLike | number | string | null
    average?: Decimal | DecimalJsLike | number | string | null
    standardDeviation?: Decimal | DecimalJsLike | number | string | null
    providerId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricAggregationUncheckedCreateInput = {
    id?: string
    clinicId: string
    metricDefinitionId: string
    aggregationType: string
    periodStart: Date | string
    periodEnd: Date | string
    value: Decimal | DecimalJsLike | number | string
    count: number
    minimum?: Decimal | DecimalJsLike | number | string | null
    maximum?: Decimal | DecimalJsLike | number | string | null
    average?: Decimal | DecimalJsLike | number | string | null
    standardDeviation?: Decimal | DecimalJsLike | number | string | null
    providerId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricAggregationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    aggregationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    count?: IntFieldUpdateOperationsInput | number
    minimum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maximum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricAggregationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    aggregationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    count?: IntFieldUpdateOperationsInput | number
    minimum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maximum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricAggregationCreateManyInput = {
    id?: string
    clinicId: string
    metricDefinitionId: string
    aggregationType: string
    periodStart: Date | string
    periodEnd: Date | string
    value: Decimal | DecimalJsLike | number | string
    count: number
    minimum?: Decimal | DecimalJsLike | number | string | null
    maximum?: Decimal | DecimalJsLike | number | string | null
    average?: Decimal | DecimalJsLike | number | string | null
    standardDeviation?: Decimal | DecimalJsLike | number | string | null
    providerId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricAggregationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    aggregationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    count?: IntFieldUpdateOperationsInput | number
    minimum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maximum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricAggregationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    aggregationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    count?: IntFieldUpdateOperationsInput | number
    minimum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maximum?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    average?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    standardDeviation?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoogleCredentialCreateInput = {
    id?: string
    clinicId: string
    userId: string
    accessToken: string
    refreshToken: string
    expiresAt: Date | string
    scope?: GoogleCredentialCreatescopeInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoogleCredentialUncheckedCreateInput = {
    id?: string
    clinicId: string
    userId: string
    accessToken: string
    refreshToken: string
    expiresAt: Date | string
    scope?: GoogleCredentialCreatescopeInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoogleCredentialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: GoogleCredentialUpdatescopeInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoogleCredentialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: GoogleCredentialUpdatescopeInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoogleCredentialCreateManyInput = {
    id?: string
    clinicId: string
    userId: string
    accessToken: string
    refreshToken: string
    expiresAt: Date | string
    scope?: GoogleCredentialCreatescopeInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GoogleCredentialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: GoogleCredentialUpdatescopeInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoogleCredentialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: GoogleCredentialUpdatescopeInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadsheetConnectionCreateInput = {
    id?: string
    clinicId: string
    credentialId: string
    spreadsheetId: string
    spreadsheetName: string
    sheetNames?: SpreadsheetConnectionCreatesheetNamesInput | string[]
    lastSyncAt?: Date | string | null
    syncStatus?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadsheetConnectionUncheckedCreateInput = {
    id?: string
    clinicId: string
    credentialId: string
    spreadsheetId: string
    spreadsheetName: string
    sheetNames?: SpreadsheetConnectionCreatesheetNamesInput | string[]
    lastSyncAt?: Date | string | null
    syncStatus?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadsheetConnectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    spreadsheetName?: StringFieldUpdateOperationsInput | string
    sheetNames?: SpreadsheetConnectionUpdatesheetNamesInput | string[]
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadsheetConnectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    spreadsheetName?: StringFieldUpdateOperationsInput | string
    sheetNames?: SpreadsheetConnectionUpdatesheetNamesInput | string[]
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadsheetConnectionCreateManyInput = {
    id?: string
    clinicId: string
    credentialId: string
    spreadsheetId: string
    spreadsheetName: string
    sheetNames?: SpreadsheetConnectionCreatesheetNamesInput | string[]
    lastSyncAt?: Date | string | null
    syncStatus?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpreadsheetConnectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    spreadsheetName?: StringFieldUpdateOperationsInput | string
    sheetNames?: SpreadsheetConnectionUpdatesheetNamesInput | string[]
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpreadsheetConnectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    credentialId?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    spreadsheetName?: StringFieldUpdateOperationsInput | string
    sheetNames?: SpreadsheetConnectionUpdatesheetNamesInput | string[]
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncStatus?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnMappingV2CreateInput = {
    id?: string
    connectionId: string
    sheetName: string
    mappingConfig: JsonNullValueInput | InputJsonValue
    templateName?: string | null
    version?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColumnMappingV2UncheckedCreateInput = {
    id?: string
    connectionId: string
    sheetName: string
    mappingConfig: JsonNullValueInput | InputJsonValue
    templateName?: string | null
    version?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColumnMappingV2UpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    mappingConfig?: JsonNullValueInput | InputJsonValue
    templateName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnMappingV2UncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    mappingConfig?: JsonNullValueInput | InputJsonValue
    templateName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnMappingV2CreateManyInput = {
    id?: string
    connectionId: string
    sheetName: string
    mappingConfig: JsonNullValueInput | InputJsonValue
    templateName?: string | null
    version?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColumnMappingV2UpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    mappingConfig?: JsonNullValueInput | InputJsonValue
    templateName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ColumnMappingV2UncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    connectionId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    mappingConfig?: JsonNullValueInput | InputJsonValue
    templateName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HygieneProductionCreateInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutHygieneProductionInput
    provider?: ProviderCreateNestedOneWithoutHygieneProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutHygieneProductionInput
  }

  export type HygieneProductionUncheckedCreateInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type HygieneProductionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutHygieneProductionNestedInput
    provider?: ProviderUpdateOneWithoutHygieneProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutHygieneProductionNestedInput
  }

  export type HygieneProductionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionCreateManyInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type HygieneProductionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HygieneProductionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionCreateInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutDentistProductionInput
    provider?: ProviderCreateNestedOneWithoutDentistProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutDentistProductionInput
  }

  export type DentistProductionUncheckedCreateInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type DentistProductionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutDentistProductionNestedInput
    provider?: ProviderUpdateOneWithoutDentistProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutDentistProductionNestedInput
  }

  export type DentistProductionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionCreateManyInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type DentistProductionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DentistProductionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdMappingCreateInput = {
    id?: string
    tableName: string
    oldId: string
    newId: string
    createdAt?: Date | string
  }

  export type IdMappingUncheckedCreateInput = {
    id?: string
    tableName: string
    oldId: string
    newId: string
    createdAt?: Date | string
  }

  export type IdMappingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldId?: StringFieldUpdateOperationsInput | string
    newId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IdMappingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldId?: StringFieldUpdateOperationsInput | string
    newId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IdMappingCreateManyInput = {
    id?: string
    tableName: string
    oldId: string
    newId: string
    createdAt?: Date | string
  }

  export type IdMappingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldId?: StringFieldUpdateOperationsInput | string
    newId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IdMappingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldId?: StringFieldUpdateOperationsInput | string
    newId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ProviderListRelationFilter = {
    every?: ProviderWhereInput
    some?: ProviderWhereInput
    none?: ProviderWhereInput
  }

  export type MetricValueListRelationFilter = {
    every?: MetricValueWhereInput
    some?: MetricValueWhereInput
    none?: MetricValueWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type DataSourceListRelationFilter = {
    every?: DataSourceWhereInput
    some?: DataSourceWhereInput
    none?: DataSourceWhereInput
  }

  export type HygieneProductionListRelationFilter = {
    every?: HygieneProductionWhereInput
    some?: HygieneProductionWhereInput
    none?: HygieneProductionWhereInput
  }

  export type DentistProductionListRelationFilter = {
    every?: DentistProductionWhereInput
    some?: DentistProductionWhereInput
    none?: DentistProductionWhereInput
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type LocationFinancialListRelationFilter = {
    every?: LocationFinancialWhereInput
    some?: LocationFinancialWhereInput
    none?: LocationFinancialWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetricValueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DataSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HygieneProductionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DentistProductionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationFinancialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClinicCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    registrationCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
  }

  export type ClinicMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    registrationCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
  }

  export type ClinicMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    status?: SortOrder
    registrationCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClinicNullableScalarRelationFilter = {
    is?: ClinicWhereInput | null
    isNot?: ClinicWhereInput | null
  }

  export type DashboardListRelationFilter = {
    every?: DashboardWhereInput
    some?: DashboardWhereInput
    none?: DashboardWhereInput
  }

  export type DashboardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authId?: SortOrder
    uuidId?: SortOrder
    clinicId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authId?: SortOrder
    uuidId?: SortOrder
    clinicId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authId?: SortOrder
    uuidId?: SortOrder
    clinicId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ClinicScalarRelationFilter = {
    is?: ClinicWhereInput
    isNot?: ClinicWhereInput
  }

  export type ProviderLocationListRelationFilter = {
    every?: ProviderLocationWhereInput
    some?: ProviderLocationWhereInput
    none?: ProviderLocationWhereInput
  }

  export type ProviderLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    providerType?: SortOrder
    position?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
  }

  export type ProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    providerType?: SortOrder
    position?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
  }

  export type ProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    providerType?: SortOrder
    position?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LocationClinicIdNameCompoundUniqueInput = {
    clinicId: string
    name: string
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProviderScalarRelationFilter = {
    is?: ProviderWhereInput
    isNot?: ProviderWhereInput
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type ProviderLocationProviderIdLocationIdCompoundUniqueInput = {
    providerId: string
    locationId: string
  }

  export type ProviderLocationCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    locationId?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isPrimary?: SortOrder
  }

  export type ProviderLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    locationId?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isPrimary?: SortOrder
  }

  export type ProviderLocationMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    locationId?: SortOrder
    isActive?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isPrimary?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DataSourceNullableScalarRelationFilter = {
    is?: DataSourceWhereInput | null
    isNot?: DataSourceWhereInput | null
  }

  export type LocationFinancialClinicIdLocationIdDateCompoundUniqueInput = {
    clinicId: string
    locationId: string
    date: Date | string
  }

  export type LocationFinancialCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrder
    dataSourceId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationFinancialAvgOrderByAggregateInput = {
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrder
  }

  export type LocationFinancialMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrder
    dataSourceId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationFinancialMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrder
    dataSourceId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationFinancialSumOrderByAggregateInput = {
    production?: SortOrder
    adjustments?: SortOrder
    writeOffs?: SortOrder
    netProduction?: SortOrder
    patientIncome?: SortOrder
    insuranceIncome?: SortOrder
    totalCollections?: SortOrder
    unearned?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ColumnMappingListRelationFilter = {
    every?: ColumnMappingWhereInput
    some?: ColumnMappingWhereInput
    none?: ColumnMappingWhereInput
  }

  export type WidgetListRelationFilter = {
    every?: WidgetWhereInput
    some?: WidgetWhereInput
    none?: WidgetWhereInput
  }

  export type ColumnMappingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WidgetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetricDefinitionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dataType?: SortOrder
    calculationFormula?: SortOrder
    category?: SortOrder
    isComposite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricDefinitionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dataType?: SortOrder
    calculationFormula?: SortOrder
    category?: SortOrder
    isComposite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricDefinitionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    dataType?: SortOrder
    calculationFormula?: SortOrder
    category?: SortOrder
    isComposite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProviderNullableScalarRelationFilter = {
    is?: ProviderWhereInput | null
    isNot?: ProviderWhereInput | null
  }

  export type DataSourceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spreadsheetId?: SortOrder
    sheetName?: SortOrder
    lastSyncedAt?: SortOrder
    syncFrequency?: SortOrder
    connectionStatus?: SortOrder
    appScriptId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }

  export type DataSourceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spreadsheetId?: SortOrder
    sheetName?: SortOrder
    lastSyncedAt?: SortOrder
    syncFrequency?: SortOrder
    connectionStatus?: SortOrder
    appScriptId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }

  export type DataSourceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spreadsheetId?: SortOrder
    sheetName?: SortOrder
    lastSyncedAt?: SortOrder
    syncFrequency?: SortOrder
    connectionStatus?: SortOrder
    appScriptId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }

  export type DataSourceScalarRelationFilter = {
    is?: DataSourceWhereInput
    isNot?: DataSourceWhereInput
  }

  export type MetricDefinitionScalarRelationFilter = {
    is?: MetricDefinitionWhereInput
    isNot?: MetricDefinitionWhereInput
  }

  export type ColumnMappingCountOrderByAggregateInput = {
    id?: SortOrder
    columnName?: SortOrder
    transformationRule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataSourceId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type ColumnMappingMaxOrderByAggregateInput = {
    id?: SortOrder
    columnName?: SortOrder
    transformationRule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataSourceId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type ColumnMappingMinOrderByAggregateInput = {
    id?: SortOrder
    columnName?: SortOrder
    transformationRule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dataSourceId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type MetricValueCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    value?: SortOrder
    sourceType?: SortOrder
    sourceSheet?: SortOrder
    externalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type MetricValueMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    value?: SortOrder
    sourceType?: SortOrder
    sourceSheet?: SortOrder
    externalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type MetricValueMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    value?: SortOrder
    sourceType?: SortOrder
    sourceSheet?: SortOrder
    externalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    timePeriod?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    timePeriod?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    timePeriod?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    targetValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metricDefinitionId?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DashboardCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    layoutConfig?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
    userUuidId?: SortOrder
    userId?: SortOrder
  }

  export type DashboardMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
    userUuidId?: SortOrder
    userId?: SortOrder
  }

  export type DashboardMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuidId?: SortOrder
    userUuidId?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DashboardScalarRelationFilter = {
    is?: DashboardWhereInput
    isNot?: DashboardWhereInput
  }

  export type MetricDefinitionNullableScalarRelationFilter = {
    is?: MetricDefinitionWhereInput | null
    isNot?: MetricDefinitionWhereInput | null
  }

  export type WidgetCountOrderByAggregateInput = {
    id?: SortOrder
    widgetType?: SortOrder
    chartType?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    config?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dashboardId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type WidgetAvgOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type WidgetMaxOrderByAggregateInput = {
    id?: SortOrder
    widgetType?: SortOrder
    chartType?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dashboardId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type WidgetMinOrderByAggregateInput = {
    id?: SortOrder
    widgetType?: SortOrder
    chartType?: SortOrder
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dashboardId?: SortOrder
    metricDefinitionId?: SortOrder
  }

  export type WidgetSumOrderByAggregateInput = {
    positionX?: SortOrder
    positionY?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserClinicRoleUserIdClinicIdCompoundUniqueInput = {
    userId: string
    clinicId: string
  }

  export type UserClinicRoleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserClinicRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserClinicRoleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    metricDefinitionId?: SortOrder
    targetFormula?: SortOrder
    timePeriod?: SortOrder
    isSystemTemplate?: SortOrder
    clinicId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    metricDefinitionId?: SortOrder
    targetFormula?: SortOrder
    timePeriod?: SortOrder
    isSystemTemplate?: SortOrder
    clinicId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoalTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    metricDefinitionId?: SortOrder
    targetFormula?: SortOrder
    timePeriod?: SortOrder
    isSystemTemplate?: SortOrder
    clinicId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialMetricCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    metricType?: SortOrder
    category?: SortOrder
    amount?: SortOrder
    providerId?: SortOrder
    insuranceCarrier?: SortOrder
    paymentMethod?: SortOrder
    procedureCode?: SortOrder
    notes?: SortOrder
    sourceReference?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialMetricAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FinancialMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    metricType?: SortOrder
    category?: SortOrder
    amount?: SortOrder
    providerId?: SortOrder
    insuranceCarrier?: SortOrder
    paymentMethod?: SortOrder
    procedureCode?: SortOrder
    notes?: SortOrder
    sourceReference?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialMetricMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    metricType?: SortOrder
    category?: SortOrder
    amount?: SortOrder
    providerId?: SortOrder
    insuranceCarrier?: SortOrder
    paymentMethod?: SortOrder
    procedureCode?: SortOrder
    notes?: SortOrder
    sourceReference?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FinancialMetricSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AppointmentMetricCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    providerId?: SortOrder
    appointmentType?: SortOrder
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrder
    productionAmount?: SortOrder
    utilizationRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMetricAvgOrderByAggregateInput = {
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrder
    productionAmount?: SortOrder
    utilizationRate?: SortOrder
  }

  export type AppointmentMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    providerId?: SortOrder
    appointmentType?: SortOrder
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrder
    productionAmount?: SortOrder
    utilizationRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMetricMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    providerId?: SortOrder
    appointmentType?: SortOrder
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrder
    productionAmount?: SortOrder
    utilizationRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMetricSumOrderByAggregateInput = {
    scheduledCount?: SortOrder
    completedCount?: SortOrder
    cancelledCount?: SortOrder
    noShowCount?: SortOrder
    averageDuration?: SortOrder
    productionAmount?: SortOrder
    utilizationRate?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CallMetricCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    callType?: SortOrder
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrder
    staffMemberId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallMetricAvgOrderByAggregateInput = {
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrder
  }

  export type CallMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    callType?: SortOrder
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrder
    staffMemberId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallMetricMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    callType?: SortOrder
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrder
    staffMemberId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallMetricSumOrderByAggregateInput = {
    totalCalls?: SortOrder
    connectedCalls?: SortOrder
    voicemails?: SortOrder
    appointmentsScheduled?: SortOrder
    conversionRate?: SortOrder
    averageCallDuration?: SortOrder
  }

  export type PatientMetricCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrder
    recareComplianceRate?: SortOrder
    treatmentAcceptanceRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMetricAvgOrderByAggregateInput = {
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrder
    recareComplianceRate?: SortOrder
    treatmentAcceptanceRate?: SortOrder
  }

  export type PatientMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrder
    recareComplianceRate?: SortOrder
    treatmentAcceptanceRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMetricMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    date?: SortOrder
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrder
    recareComplianceRate?: SortOrder
    treatmentAcceptanceRate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMetricSumOrderByAggregateInput = {
    activePatients?: SortOrder
    newPatients?: SortOrder
    reactivatedPatients?: SortOrder
    lostPatients?: SortOrder
    patientRetentionRate?: SortOrder
    averagePatientValue?: SortOrder
    recareComplianceRate?: SortOrder
    treatmentAcceptanceRate?: SortOrder
  }

  export type MetricAggregationClinicIdMetricDefinitionIdAggregationTypePeriodStartProviderIdCompoundUniqueInput = {
    clinicId: string
    metricDefinitionId: string
    aggregationType: string
    periodStart: Date | string
    providerId: string
  }

  export type MetricAggregationCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    metricDefinitionId?: SortOrder
    aggregationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrder
    maximum?: SortOrder
    average?: SortOrder
    standardDeviation?: SortOrder
    providerId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricAggregationAvgOrderByAggregateInput = {
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrder
    maximum?: SortOrder
    average?: SortOrder
    standardDeviation?: SortOrder
  }

  export type MetricAggregationMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    metricDefinitionId?: SortOrder
    aggregationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrder
    maximum?: SortOrder
    average?: SortOrder
    standardDeviation?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricAggregationMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    metricDefinitionId?: SortOrder
    aggregationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrder
    maximum?: SortOrder
    average?: SortOrder
    standardDeviation?: SortOrder
    providerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricAggregationSumOrderByAggregateInput = {
    value?: SortOrder
    count?: SortOrder
    minimum?: SortOrder
    maximum?: SortOrder
    average?: SortOrder
    standardDeviation?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type GoogleCredentialClinicIdUserIdCompoundUniqueInput = {
    clinicId: string
    userId: string
  }

  export type GoogleCredentialCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoogleCredentialMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GoogleCredentialMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadsheetConnectionClinicIdSpreadsheetIdCompoundUniqueInput = {
    clinicId: string
    spreadsheetId: string
  }

  export type SpreadsheetConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    credentialId?: SortOrder
    spreadsheetId?: SortOrder
    spreadsheetName?: SortOrder
    sheetNames?: SortOrder
    lastSyncAt?: SortOrder
    syncStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadsheetConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    credentialId?: SortOrder
    spreadsheetId?: SortOrder
    spreadsheetName?: SortOrder
    lastSyncAt?: SortOrder
    syncStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpreadsheetConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    clinicId?: SortOrder
    credentialId?: SortOrder
    spreadsheetId?: SortOrder
    spreadsheetName?: SortOrder
    lastSyncAt?: SortOrder
    syncStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ColumnMappingV2CountOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    sheetName?: SortOrder
    mappingConfig?: SortOrder
    templateName?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColumnMappingV2AvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ColumnMappingV2MaxOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    sheetName?: SortOrder
    templateName?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColumnMappingV2MinOrderByAggregateInput = {
    id?: SortOrder
    connectionId?: SortOrder
    sheetName?: SortOrder
    templateName?: SortOrder
    version?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ColumnMappingV2SumOrderByAggregateInput = {
    version?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type HygieneProductionCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    hoursWorked?: SortOrder
    estimatedProduction?: SortOrder
    verifiedProduction?: SortOrder
    productionGoal?: SortOrder
    variancePercentage?: SortOrder
    bonusAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type HygieneProductionAvgOrderByAggregateInput = {
    hoursWorked?: SortOrder
    estimatedProduction?: SortOrder
    verifiedProduction?: SortOrder
    productionGoal?: SortOrder
    variancePercentage?: SortOrder
    bonusAmount?: SortOrder
  }

  export type HygieneProductionMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    hoursWorked?: SortOrder
    estimatedProduction?: SortOrder
    verifiedProduction?: SortOrder
    productionGoal?: SortOrder
    variancePercentage?: SortOrder
    bonusAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type HygieneProductionMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    hoursWorked?: SortOrder
    estimatedProduction?: SortOrder
    verifiedProduction?: SortOrder
    productionGoal?: SortOrder
    variancePercentage?: SortOrder
    bonusAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type HygieneProductionSumOrderByAggregateInput = {
    hoursWorked?: SortOrder
    estimatedProduction?: SortOrder
    verifiedProduction?: SortOrder
    productionGoal?: SortOrder
    variancePercentage?: SortOrder
    bonusAmount?: SortOrder
  }

  export type DentistProductionCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    verifiedProductionHumble?: SortOrder
    verifiedProductionBaytown?: SortOrder
    totalProduction?: SortOrder
    monthlyGoal?: SortOrder
    productionPerHour?: SortOrder
    avgDailyProduction?: SortOrder
    providerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type DentistProductionAvgOrderByAggregateInput = {
    verifiedProductionHumble?: SortOrder
    verifiedProductionBaytown?: SortOrder
    totalProduction?: SortOrder
    monthlyGoal?: SortOrder
    productionPerHour?: SortOrder
    avgDailyProduction?: SortOrder
  }

  export type DentistProductionMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    verifiedProductionHumble?: SortOrder
    verifiedProductionBaytown?: SortOrder
    totalProduction?: SortOrder
    monthlyGoal?: SortOrder
    productionPerHour?: SortOrder
    avgDailyProduction?: SortOrder
    providerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type DentistProductionMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    monthTab?: SortOrder
    verifiedProductionHumble?: SortOrder
    verifiedProductionBaytown?: SortOrder
    totalProduction?: SortOrder
    monthlyGoal?: SortOrder
    productionPerHour?: SortOrder
    avgDailyProduction?: SortOrder
    providerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clinicId?: SortOrder
    providerId?: SortOrder
    dataSourceId?: SortOrder
  }

  export type DentistProductionSumOrderByAggregateInput = {
    verifiedProductionHumble?: SortOrder
    verifiedProductionBaytown?: SortOrder
    totalProduction?: SortOrder
    monthlyGoal?: SortOrder
    productionPerHour?: SortOrder
    avgDailyProduction?: SortOrder
  }

  export type IdMappingTableNameOldIdCompoundUniqueInput = {
    tableName: string
    oldId: string
  }

  export type IdMappingCountOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    oldId?: SortOrder
    newId?: SortOrder
    createdAt?: SortOrder
  }

  export type IdMappingMaxOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    oldId?: SortOrder
    newId?: SortOrder
    createdAt?: SortOrder
  }

  export type IdMappingMinOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    oldId?: SortOrder
    newId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCreateNestedManyWithoutClinicInput = {
    create?: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput> | UserCreateWithoutClinicInput[] | UserUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClinicInput | UserCreateOrConnectWithoutClinicInput[]
    createMany?: UserCreateManyClinicInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProviderCreateNestedManyWithoutClinicInput = {
    create?: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput> | ProviderCreateWithoutClinicInput[] | ProviderUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ProviderCreateOrConnectWithoutClinicInput | ProviderCreateOrConnectWithoutClinicInput[]
    createMany?: ProviderCreateManyClinicInputEnvelope
    connect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
  }

  export type MetricValueCreateNestedManyWithoutClinicInput = {
    create?: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput> | MetricValueCreateWithoutClinicInput[] | MetricValueUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutClinicInput | MetricValueCreateOrConnectWithoutClinicInput[]
    createMany?: MetricValueCreateManyClinicInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutClinicInput = {
    create?: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput> | GoalCreateWithoutClinicInput[] | GoalUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutClinicInput | GoalCreateOrConnectWithoutClinicInput[]
    createMany?: GoalCreateManyClinicInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DataSourceCreateNestedManyWithoutClinicInput = {
    create?: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput> | DataSourceCreateWithoutClinicInput[] | DataSourceUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutClinicInput | DataSourceCreateOrConnectWithoutClinicInput[]
    createMany?: DataSourceCreateManyClinicInputEnvelope
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
  }

  export type HygieneProductionCreateNestedManyWithoutClinicInput = {
    create?: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput> | HygieneProductionCreateWithoutClinicInput[] | HygieneProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutClinicInput | HygieneProductionCreateOrConnectWithoutClinicInput[]
    createMany?: HygieneProductionCreateManyClinicInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionCreateNestedManyWithoutClinicInput = {
    create?: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput> | DentistProductionCreateWithoutClinicInput[] | DentistProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutClinicInput | DentistProductionCreateOrConnectWithoutClinicInput[]
    createMany?: DentistProductionCreateManyClinicInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutClinicInput = {
    create?: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput> | LocationCreateWithoutClinicInput[] | LocationUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutClinicInput | LocationCreateOrConnectWithoutClinicInput[]
    createMany?: LocationCreateManyClinicInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type LocationFinancialCreateNestedManyWithoutClinicInput = {
    create?: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput> | LocationFinancialCreateWithoutClinicInput[] | LocationFinancialUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutClinicInput | LocationFinancialCreateOrConnectWithoutClinicInput[]
    createMany?: LocationFinancialCreateManyClinicInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput> | UserCreateWithoutClinicInput[] | UserUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClinicInput | UserCreateOrConnectWithoutClinicInput[]
    createMany?: UserCreateManyClinicInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProviderUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput> | ProviderCreateWithoutClinicInput[] | ProviderUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ProviderCreateOrConnectWithoutClinicInput | ProviderCreateOrConnectWithoutClinicInput[]
    createMany?: ProviderCreateManyClinicInputEnvelope
    connect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
  }

  export type MetricValueUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput> | MetricValueCreateWithoutClinicInput[] | MetricValueUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutClinicInput | MetricValueCreateOrConnectWithoutClinicInput[]
    createMany?: MetricValueCreateManyClinicInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput> | GoalCreateWithoutClinicInput[] | GoalUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutClinicInput | GoalCreateOrConnectWithoutClinicInput[]
    createMany?: GoalCreateManyClinicInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DataSourceUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput> | DataSourceCreateWithoutClinicInput[] | DataSourceUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutClinicInput | DataSourceCreateOrConnectWithoutClinicInput[]
    createMany?: DataSourceCreateManyClinicInputEnvelope
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
  }

  export type HygieneProductionUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput> | HygieneProductionCreateWithoutClinicInput[] | HygieneProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutClinicInput | HygieneProductionCreateOrConnectWithoutClinicInput[]
    createMany?: HygieneProductionCreateManyClinicInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput> | DentistProductionCreateWithoutClinicInput[] | DentistProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutClinicInput | DentistProductionCreateOrConnectWithoutClinicInput[]
    createMany?: DentistProductionCreateManyClinicInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput> | LocationCreateWithoutClinicInput[] | LocationUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutClinicInput | LocationCreateOrConnectWithoutClinicInput[]
    createMany?: LocationCreateManyClinicInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type LocationFinancialUncheckedCreateNestedManyWithoutClinicInput = {
    create?: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput> | LocationFinancialCreateWithoutClinicInput[] | LocationFinancialUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutClinicInput | LocationFinancialCreateOrConnectWithoutClinicInput[]
    createMany?: LocationFinancialCreateManyClinicInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutClinicNestedInput = {
    create?: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput> | UserCreateWithoutClinicInput[] | UserUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClinicInput | UserCreateOrConnectWithoutClinicInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClinicInput | UserUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: UserCreateManyClinicInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClinicInput | UserUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClinicInput | UserUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProviderUpdateManyWithoutClinicNestedInput = {
    create?: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput> | ProviderCreateWithoutClinicInput[] | ProviderUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ProviderCreateOrConnectWithoutClinicInput | ProviderCreateOrConnectWithoutClinicInput[]
    upsert?: ProviderUpsertWithWhereUniqueWithoutClinicInput | ProviderUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: ProviderCreateManyClinicInputEnvelope
    set?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    disconnect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    delete?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    connect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    update?: ProviderUpdateWithWhereUniqueWithoutClinicInput | ProviderUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: ProviderUpdateManyWithWhereWithoutClinicInput | ProviderUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: ProviderScalarWhereInput | ProviderScalarWhereInput[]
  }

  export type MetricValueUpdateManyWithoutClinicNestedInput = {
    create?: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput> | MetricValueCreateWithoutClinicInput[] | MetricValueUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutClinicInput | MetricValueCreateOrConnectWithoutClinicInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutClinicInput | MetricValueUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: MetricValueCreateManyClinicInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutClinicInput | MetricValueUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutClinicInput | MetricValueUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutClinicNestedInput = {
    create?: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput> | GoalCreateWithoutClinicInput[] | GoalUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutClinicInput | GoalCreateOrConnectWithoutClinicInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutClinicInput | GoalUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: GoalCreateManyClinicInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutClinicInput | GoalUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutClinicInput | GoalUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DataSourceUpdateManyWithoutClinicNestedInput = {
    create?: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput> | DataSourceCreateWithoutClinicInput[] | DataSourceUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutClinicInput | DataSourceCreateOrConnectWithoutClinicInput[]
    upsert?: DataSourceUpsertWithWhereUniqueWithoutClinicInput | DataSourceUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: DataSourceCreateManyClinicInputEnvelope
    set?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    disconnect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    delete?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    update?: DataSourceUpdateWithWhereUniqueWithoutClinicInput | DataSourceUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: DataSourceUpdateManyWithWhereWithoutClinicInput | DataSourceUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
  }

  export type HygieneProductionUpdateManyWithoutClinicNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput> | HygieneProductionCreateWithoutClinicInput[] | HygieneProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutClinicInput | HygieneProductionCreateOrConnectWithoutClinicInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutClinicInput | HygieneProductionUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: HygieneProductionCreateManyClinicInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutClinicInput | HygieneProductionUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutClinicInput | HygieneProductionUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUpdateManyWithoutClinicNestedInput = {
    create?: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput> | DentistProductionCreateWithoutClinicInput[] | DentistProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutClinicInput | DentistProductionCreateOrConnectWithoutClinicInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutClinicInput | DentistProductionUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: DentistProductionCreateManyClinicInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutClinicInput | DentistProductionUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutClinicInput | DentistProductionUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutClinicNestedInput = {
    create?: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput> | LocationCreateWithoutClinicInput[] | LocationUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutClinicInput | LocationCreateOrConnectWithoutClinicInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutClinicInput | LocationUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: LocationCreateManyClinicInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutClinicInput | LocationUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutClinicInput | LocationUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type LocationFinancialUpdateManyWithoutClinicNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput> | LocationFinancialCreateWithoutClinicInput[] | LocationFinancialUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutClinicInput | LocationFinancialCreateOrConnectWithoutClinicInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutClinicInput | LocationFinancialUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: LocationFinancialCreateManyClinicInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutClinicInput | LocationFinancialUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutClinicInput | LocationFinancialUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput> | UserCreateWithoutClinicInput[] | UserUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: UserCreateOrConnectWithoutClinicInput | UserCreateOrConnectWithoutClinicInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutClinicInput | UserUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: UserCreateManyClinicInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutClinicInput | UserUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: UserUpdateManyWithWhereWithoutClinicInput | UserUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProviderUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput> | ProviderCreateWithoutClinicInput[] | ProviderUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: ProviderCreateOrConnectWithoutClinicInput | ProviderCreateOrConnectWithoutClinicInput[]
    upsert?: ProviderUpsertWithWhereUniqueWithoutClinicInput | ProviderUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: ProviderCreateManyClinicInputEnvelope
    set?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    disconnect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    delete?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    connect?: ProviderWhereUniqueInput | ProviderWhereUniqueInput[]
    update?: ProviderUpdateWithWhereUniqueWithoutClinicInput | ProviderUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: ProviderUpdateManyWithWhereWithoutClinicInput | ProviderUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: ProviderScalarWhereInput | ProviderScalarWhereInput[]
  }

  export type MetricValueUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput> | MetricValueCreateWithoutClinicInput[] | MetricValueUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutClinicInput | MetricValueCreateOrConnectWithoutClinicInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutClinicInput | MetricValueUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: MetricValueCreateManyClinicInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutClinicInput | MetricValueUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutClinicInput | MetricValueUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput> | GoalCreateWithoutClinicInput[] | GoalUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutClinicInput | GoalCreateOrConnectWithoutClinicInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutClinicInput | GoalUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: GoalCreateManyClinicInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutClinicInput | GoalUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutClinicInput | GoalUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DataSourceUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput> | DataSourceCreateWithoutClinicInput[] | DataSourceUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutClinicInput | DataSourceCreateOrConnectWithoutClinicInput[]
    upsert?: DataSourceUpsertWithWhereUniqueWithoutClinicInput | DataSourceUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: DataSourceCreateManyClinicInputEnvelope
    set?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    disconnect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    delete?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    update?: DataSourceUpdateWithWhereUniqueWithoutClinicInput | DataSourceUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: DataSourceUpdateManyWithWhereWithoutClinicInput | DataSourceUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
  }

  export type HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput> | HygieneProductionCreateWithoutClinicInput[] | HygieneProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutClinicInput | HygieneProductionCreateOrConnectWithoutClinicInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutClinicInput | HygieneProductionUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: HygieneProductionCreateManyClinicInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutClinicInput | HygieneProductionUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutClinicInput | HygieneProductionUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput> | DentistProductionCreateWithoutClinicInput[] | DentistProductionUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutClinicInput | DentistProductionCreateOrConnectWithoutClinicInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutClinicInput | DentistProductionUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: DentistProductionCreateManyClinicInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutClinicInput | DentistProductionUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutClinicInput | DentistProductionUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput> | LocationCreateWithoutClinicInput[] | LocationUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutClinicInput | LocationCreateOrConnectWithoutClinicInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutClinicInput | LocationUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: LocationCreateManyClinicInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutClinicInput | LocationUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutClinicInput | LocationUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput> | LocationFinancialCreateWithoutClinicInput[] | LocationFinancialUncheckedCreateWithoutClinicInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutClinicInput | LocationFinancialCreateOrConnectWithoutClinicInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutClinicInput | LocationFinancialUpsertWithWhereUniqueWithoutClinicInput[]
    createMany?: LocationFinancialCreateManyClinicInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutClinicInput | LocationFinancialUpdateWithWhereUniqueWithoutClinicInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutClinicInput | LocationFinancialUpdateManyWithWhereWithoutClinicInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type ClinicCreateNestedOneWithoutUsersInput = {
    create?: XOR<ClinicCreateWithoutUsersInput, ClinicUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutUsersInput
    connect?: ClinicWhereUniqueInput
  }

  export type DashboardCreateNestedManyWithoutUserInput = {
    create?: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput> | DashboardCreateWithoutUserInput[] | DashboardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutUserInput | DashboardCreateOrConnectWithoutUserInput[]
    createMany?: DashboardCreateManyUserInputEnvelope
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
  }

  export type DashboardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput> | DashboardCreateWithoutUserInput[] | DashboardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutUserInput | DashboardCreateOrConnectWithoutUserInput[]
    createMany?: DashboardCreateManyUserInputEnvelope
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClinicUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ClinicCreateWithoutUsersInput, ClinicUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutUsersInput
    upsert?: ClinicUpsertWithoutUsersInput
    disconnect?: ClinicWhereInput | boolean
    delete?: ClinicWhereInput | boolean
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutUsersInput, ClinicUpdateWithoutUsersInput>, ClinicUncheckedUpdateWithoutUsersInput>
  }

  export type DashboardUpdateManyWithoutUserNestedInput = {
    create?: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput> | DashboardCreateWithoutUserInput[] | DashboardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutUserInput | DashboardCreateOrConnectWithoutUserInput[]
    upsert?: DashboardUpsertWithWhereUniqueWithoutUserInput | DashboardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DashboardCreateManyUserInputEnvelope
    set?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    disconnect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    delete?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    update?: DashboardUpdateWithWhereUniqueWithoutUserInput | DashboardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DashboardUpdateManyWithWhereWithoutUserInput | DashboardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
  }

  export type DashboardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput> | DashboardCreateWithoutUserInput[] | DashboardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DashboardCreateOrConnectWithoutUserInput | DashboardCreateOrConnectWithoutUserInput[]
    upsert?: DashboardUpsertWithWhereUniqueWithoutUserInput | DashboardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DashboardCreateManyUserInputEnvelope
    set?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    disconnect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    delete?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    connect?: DashboardWhereUniqueInput | DashboardWhereUniqueInput[]
    update?: DashboardUpdateWithWhereUniqueWithoutUserInput | DashboardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DashboardUpdateManyWithWhereWithoutUserInput | DashboardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
  }

  export type ClinicCreateNestedOneWithoutProvidersInput = {
    create?: XOR<ClinicCreateWithoutProvidersInput, ClinicUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutProvidersInput
    connect?: ClinicWhereUniqueInput
  }

  export type MetricValueCreateNestedManyWithoutProviderInput = {
    create?: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput> | MetricValueCreateWithoutProviderInput[] | MetricValueUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutProviderInput | MetricValueCreateOrConnectWithoutProviderInput[]
    createMany?: MetricValueCreateManyProviderInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutProviderInput = {
    create?: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput> | GoalCreateWithoutProviderInput[] | GoalUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProviderInput | GoalCreateOrConnectWithoutProviderInput[]
    createMany?: GoalCreateManyProviderInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DataSourceCreateNestedManyWithoutProviderInput = {
    create?: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput> | DataSourceCreateWithoutProviderInput[] | DataSourceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutProviderInput | DataSourceCreateOrConnectWithoutProviderInput[]
    createMany?: DataSourceCreateManyProviderInputEnvelope
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
  }

  export type HygieneProductionCreateNestedManyWithoutProviderInput = {
    create?: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput> | HygieneProductionCreateWithoutProviderInput[] | HygieneProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutProviderInput | HygieneProductionCreateOrConnectWithoutProviderInput[]
    createMany?: HygieneProductionCreateManyProviderInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionCreateNestedManyWithoutProviderInput = {
    create?: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput> | DentistProductionCreateWithoutProviderInput[] | DentistProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutProviderInput | DentistProductionCreateOrConnectWithoutProviderInput[]
    createMany?: DentistProductionCreateManyProviderInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type ProviderLocationCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput> | ProviderLocationCreateWithoutProviderInput[] | ProviderLocationUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutProviderInput | ProviderLocationCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderLocationCreateManyProviderInputEnvelope
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
  }

  export type MetricValueUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput> | MetricValueCreateWithoutProviderInput[] | MetricValueUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutProviderInput | MetricValueCreateOrConnectWithoutProviderInput[]
    createMany?: MetricValueCreateManyProviderInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput> | GoalCreateWithoutProviderInput[] | GoalUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProviderInput | GoalCreateOrConnectWithoutProviderInput[]
    createMany?: GoalCreateManyProviderInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type DataSourceUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput> | DataSourceCreateWithoutProviderInput[] | DataSourceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutProviderInput | DataSourceCreateOrConnectWithoutProviderInput[]
    createMany?: DataSourceCreateManyProviderInputEnvelope
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
  }

  export type HygieneProductionUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput> | HygieneProductionCreateWithoutProviderInput[] | HygieneProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutProviderInput | HygieneProductionCreateOrConnectWithoutProviderInput[]
    createMany?: HygieneProductionCreateManyProviderInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput> | DentistProductionCreateWithoutProviderInput[] | DentistProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutProviderInput | DentistProductionCreateOrConnectWithoutProviderInput[]
    createMany?: DentistProductionCreateManyProviderInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type ProviderLocationUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput> | ProviderLocationCreateWithoutProviderInput[] | ProviderLocationUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutProviderInput | ProviderLocationCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderLocationCreateManyProviderInputEnvelope
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
  }

  export type ClinicUpdateOneRequiredWithoutProvidersNestedInput = {
    create?: XOR<ClinicCreateWithoutProvidersInput, ClinicUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutProvidersInput
    upsert?: ClinicUpsertWithoutProvidersInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutProvidersInput, ClinicUpdateWithoutProvidersInput>, ClinicUncheckedUpdateWithoutProvidersInput>
  }

  export type MetricValueUpdateManyWithoutProviderNestedInput = {
    create?: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput> | MetricValueCreateWithoutProviderInput[] | MetricValueUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutProviderInput | MetricValueCreateOrConnectWithoutProviderInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutProviderInput | MetricValueUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: MetricValueCreateManyProviderInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutProviderInput | MetricValueUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutProviderInput | MetricValueUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutProviderNestedInput = {
    create?: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput> | GoalCreateWithoutProviderInput[] | GoalUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProviderInput | GoalCreateOrConnectWithoutProviderInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutProviderInput | GoalUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: GoalCreateManyProviderInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutProviderInput | GoalUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutProviderInput | GoalUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DataSourceUpdateManyWithoutProviderNestedInput = {
    create?: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput> | DataSourceCreateWithoutProviderInput[] | DataSourceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutProviderInput | DataSourceCreateOrConnectWithoutProviderInput[]
    upsert?: DataSourceUpsertWithWhereUniqueWithoutProviderInput | DataSourceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: DataSourceCreateManyProviderInputEnvelope
    set?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    disconnect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    delete?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    update?: DataSourceUpdateWithWhereUniqueWithoutProviderInput | DataSourceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: DataSourceUpdateManyWithWhereWithoutProviderInput | DataSourceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
  }

  export type HygieneProductionUpdateManyWithoutProviderNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput> | HygieneProductionCreateWithoutProviderInput[] | HygieneProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutProviderInput | HygieneProductionCreateOrConnectWithoutProviderInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutProviderInput | HygieneProductionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: HygieneProductionCreateManyProviderInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutProviderInput | HygieneProductionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutProviderInput | HygieneProductionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUpdateManyWithoutProviderNestedInput = {
    create?: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput> | DentistProductionCreateWithoutProviderInput[] | DentistProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutProviderInput | DentistProductionCreateOrConnectWithoutProviderInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutProviderInput | DentistProductionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: DentistProductionCreateManyProviderInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutProviderInput | DentistProductionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutProviderInput | DentistProductionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type ProviderLocationUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput> | ProviderLocationCreateWithoutProviderInput[] | ProviderLocationUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutProviderInput | ProviderLocationCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderLocationUpsertWithWhereUniqueWithoutProviderInput | ProviderLocationUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderLocationCreateManyProviderInputEnvelope
    set?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    disconnect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    delete?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    update?: ProviderLocationUpdateWithWhereUniqueWithoutProviderInput | ProviderLocationUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderLocationUpdateManyWithWhereWithoutProviderInput | ProviderLocationUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
  }

  export type MetricValueUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput> | MetricValueCreateWithoutProviderInput[] | MetricValueUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutProviderInput | MetricValueCreateOrConnectWithoutProviderInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutProviderInput | MetricValueUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: MetricValueCreateManyProviderInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutProviderInput | MetricValueUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutProviderInput | MetricValueUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput> | GoalCreateWithoutProviderInput[] | GoalUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutProviderInput | GoalCreateOrConnectWithoutProviderInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutProviderInput | GoalUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: GoalCreateManyProviderInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutProviderInput | GoalUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutProviderInput | GoalUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type DataSourceUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput> | DataSourceCreateWithoutProviderInput[] | DataSourceUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DataSourceCreateOrConnectWithoutProviderInput | DataSourceCreateOrConnectWithoutProviderInput[]
    upsert?: DataSourceUpsertWithWhereUniqueWithoutProviderInput | DataSourceUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: DataSourceCreateManyProviderInputEnvelope
    set?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    disconnect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    delete?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    connect?: DataSourceWhereUniqueInput | DataSourceWhereUniqueInput[]
    update?: DataSourceUpdateWithWhereUniqueWithoutProviderInput | DataSourceUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: DataSourceUpdateManyWithWhereWithoutProviderInput | DataSourceUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
  }

  export type HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput> | HygieneProductionCreateWithoutProviderInput[] | HygieneProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutProviderInput | HygieneProductionCreateOrConnectWithoutProviderInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutProviderInput | HygieneProductionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: HygieneProductionCreateManyProviderInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutProviderInput | HygieneProductionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutProviderInput | HygieneProductionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput> | DentistProductionCreateWithoutProviderInput[] | DentistProductionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutProviderInput | DentistProductionCreateOrConnectWithoutProviderInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutProviderInput | DentistProductionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: DentistProductionCreateManyProviderInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutProviderInput | DentistProductionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutProviderInput | DentistProductionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput> | ProviderLocationCreateWithoutProviderInput[] | ProviderLocationUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutProviderInput | ProviderLocationCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderLocationUpsertWithWhereUniqueWithoutProviderInput | ProviderLocationUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderLocationCreateManyProviderInputEnvelope
    set?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    disconnect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    delete?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    update?: ProviderLocationUpdateWithWhereUniqueWithoutProviderInput | ProviderLocationUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderLocationUpdateManyWithWhereWithoutProviderInput | ProviderLocationUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
  }

  export type ClinicCreateNestedOneWithoutLocationsInput = {
    create?: XOR<ClinicCreateWithoutLocationsInput, ClinicUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutLocationsInput
    connect?: ClinicWhereUniqueInput
  }

  export type LocationFinancialCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput> | LocationFinancialCreateWithoutLocationInput[] | LocationFinancialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutLocationInput | LocationFinancialCreateOrConnectWithoutLocationInput[]
    createMany?: LocationFinancialCreateManyLocationInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type ProviderLocationCreateNestedManyWithoutLocationInput = {
    create?: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput> | ProviderLocationCreateWithoutLocationInput[] | ProviderLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutLocationInput | ProviderLocationCreateOrConnectWithoutLocationInput[]
    createMany?: ProviderLocationCreateManyLocationInputEnvelope
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
  }

  export type LocationFinancialUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput> | LocationFinancialCreateWithoutLocationInput[] | LocationFinancialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutLocationInput | LocationFinancialCreateOrConnectWithoutLocationInput[]
    createMany?: LocationFinancialCreateManyLocationInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type ProviderLocationUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput> | ProviderLocationCreateWithoutLocationInput[] | ProviderLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutLocationInput | ProviderLocationCreateOrConnectWithoutLocationInput[]
    createMany?: ProviderLocationCreateManyLocationInputEnvelope
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClinicUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<ClinicCreateWithoutLocationsInput, ClinicUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutLocationsInput
    upsert?: ClinicUpsertWithoutLocationsInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutLocationsInput, ClinicUpdateWithoutLocationsInput>, ClinicUncheckedUpdateWithoutLocationsInput>
  }

  export type LocationFinancialUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput> | LocationFinancialCreateWithoutLocationInput[] | LocationFinancialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutLocationInput | LocationFinancialCreateOrConnectWithoutLocationInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutLocationInput | LocationFinancialUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationFinancialCreateManyLocationInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutLocationInput | LocationFinancialUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutLocationInput | LocationFinancialUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type ProviderLocationUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput> | ProviderLocationCreateWithoutLocationInput[] | ProviderLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutLocationInput | ProviderLocationCreateOrConnectWithoutLocationInput[]
    upsert?: ProviderLocationUpsertWithWhereUniqueWithoutLocationInput | ProviderLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ProviderLocationCreateManyLocationInputEnvelope
    set?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    disconnect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    delete?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    update?: ProviderLocationUpdateWithWhereUniqueWithoutLocationInput | ProviderLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ProviderLocationUpdateManyWithWhereWithoutLocationInput | ProviderLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
  }

  export type LocationFinancialUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput> | LocationFinancialCreateWithoutLocationInput[] | LocationFinancialUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutLocationInput | LocationFinancialCreateOrConnectWithoutLocationInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutLocationInput | LocationFinancialUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationFinancialCreateManyLocationInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutLocationInput | LocationFinancialUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutLocationInput | LocationFinancialUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type ProviderLocationUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput> | ProviderLocationCreateWithoutLocationInput[] | ProviderLocationUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ProviderLocationCreateOrConnectWithoutLocationInput | ProviderLocationCreateOrConnectWithoutLocationInput[]
    upsert?: ProviderLocationUpsertWithWhereUniqueWithoutLocationInput | ProviderLocationUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ProviderLocationCreateManyLocationInputEnvelope
    set?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    disconnect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    delete?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    connect?: ProviderLocationWhereUniqueInput | ProviderLocationWhereUniqueInput[]
    update?: ProviderLocationUpdateWithWhereUniqueWithoutLocationInput | ProviderLocationUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ProviderLocationUpdateManyWithWhereWithoutLocationInput | ProviderLocationUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
  }

  export type ProviderCreateNestedOneWithoutProviderLocationsInput = {
    create?: XOR<ProviderCreateWithoutProviderLocationsInput, ProviderUncheckedCreateWithoutProviderLocationsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutProviderLocationsInput
    connect?: ProviderWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutProvidersInput = {
    create?: XOR<LocationCreateWithoutProvidersInput, LocationUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutProvidersInput
    connect?: LocationWhereUniqueInput
  }

  export type ProviderUpdateOneRequiredWithoutProviderLocationsNestedInput = {
    create?: XOR<ProviderCreateWithoutProviderLocationsInput, ProviderUncheckedCreateWithoutProviderLocationsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutProviderLocationsInput
    upsert?: ProviderUpsertWithoutProviderLocationsInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutProviderLocationsInput, ProviderUpdateWithoutProviderLocationsInput>, ProviderUncheckedUpdateWithoutProviderLocationsInput>
  }

  export type LocationUpdateOneRequiredWithoutProvidersNestedInput = {
    create?: XOR<LocationCreateWithoutProvidersInput, LocationUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: LocationCreateOrConnectWithoutProvidersInput
    upsert?: LocationUpsertWithoutProvidersInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutProvidersInput, LocationUpdateWithoutProvidersInput>, LocationUncheckedUpdateWithoutProvidersInput>
  }

  export type ClinicCreateNestedOneWithoutLocationFinancialsInput = {
    create?: XOR<ClinicCreateWithoutLocationFinancialsInput, ClinicUncheckedCreateWithoutLocationFinancialsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutLocationFinancialsInput
    connect?: ClinicWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutFinancialsInput = {
    create?: XOR<LocationCreateWithoutFinancialsInput, LocationUncheckedCreateWithoutFinancialsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFinancialsInput
    connect?: LocationWhereUniqueInput
  }

  export type DataSourceCreateNestedOneWithoutLocationFinancialsInput = {
    create?: XOR<DataSourceCreateWithoutLocationFinancialsInput, DataSourceUncheckedCreateWithoutLocationFinancialsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutLocationFinancialsInput
    connect?: DataSourceWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ClinicUpdateOneRequiredWithoutLocationFinancialsNestedInput = {
    create?: XOR<ClinicCreateWithoutLocationFinancialsInput, ClinicUncheckedCreateWithoutLocationFinancialsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutLocationFinancialsInput
    upsert?: ClinicUpsertWithoutLocationFinancialsInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutLocationFinancialsInput, ClinicUpdateWithoutLocationFinancialsInput>, ClinicUncheckedUpdateWithoutLocationFinancialsInput>
  }

  export type LocationUpdateOneRequiredWithoutFinancialsNestedInput = {
    create?: XOR<LocationCreateWithoutFinancialsInput, LocationUncheckedCreateWithoutFinancialsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFinancialsInput
    upsert?: LocationUpsertWithoutFinancialsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutFinancialsInput, LocationUpdateWithoutFinancialsInput>, LocationUncheckedUpdateWithoutFinancialsInput>
  }

  export type DataSourceUpdateOneWithoutLocationFinancialsNestedInput = {
    create?: XOR<DataSourceCreateWithoutLocationFinancialsInput, DataSourceUncheckedCreateWithoutLocationFinancialsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutLocationFinancialsInput
    upsert?: DataSourceUpsertWithoutLocationFinancialsInput
    disconnect?: DataSourceWhereInput | boolean
    delete?: DataSourceWhereInput | boolean
    connect?: DataSourceWhereUniqueInput
    update?: XOR<XOR<DataSourceUpdateToOneWithWhereWithoutLocationFinancialsInput, DataSourceUpdateWithoutLocationFinancialsInput>, DataSourceUncheckedUpdateWithoutLocationFinancialsInput>
  }

  export type MetricValueCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput> | MetricValueCreateWithoutMetricDefinitionInput[] | MetricValueUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutMetricDefinitionInput | MetricValueCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: MetricValueCreateManyMetricDefinitionInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type ColumnMappingCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput> | ColumnMappingCreateWithoutMetricDefinitionInput[] | ColumnMappingUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutMetricDefinitionInput | ColumnMappingCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: ColumnMappingCreateManyMetricDefinitionInputEnvelope
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
  }

  export type GoalCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput> | GoalCreateWithoutMetricDefinitionInput[] | GoalUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutMetricDefinitionInput | GoalCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: GoalCreateManyMetricDefinitionInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type WidgetCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput> | WidgetCreateWithoutMetricDefinitionInput[] | WidgetUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutMetricDefinitionInput | WidgetCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: WidgetCreateManyMetricDefinitionInputEnvelope
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
  }

  export type MetricValueUncheckedCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput> | MetricValueCreateWithoutMetricDefinitionInput[] | MetricValueUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutMetricDefinitionInput | MetricValueCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: MetricValueCreateManyMetricDefinitionInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type ColumnMappingUncheckedCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput> | ColumnMappingCreateWithoutMetricDefinitionInput[] | ColumnMappingUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutMetricDefinitionInput | ColumnMappingCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: ColumnMappingCreateManyMetricDefinitionInputEnvelope
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput> | GoalCreateWithoutMetricDefinitionInput[] | GoalUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutMetricDefinitionInput | GoalCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: GoalCreateManyMetricDefinitionInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type WidgetUncheckedCreateNestedManyWithoutMetricDefinitionInput = {
    create?: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput> | WidgetCreateWithoutMetricDefinitionInput[] | WidgetUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutMetricDefinitionInput | WidgetCreateOrConnectWithoutMetricDefinitionInput[]
    createMany?: WidgetCreateManyMetricDefinitionInputEnvelope
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
  }

  export type MetricValueUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput> | MetricValueCreateWithoutMetricDefinitionInput[] | MetricValueUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutMetricDefinitionInput | MetricValueCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutMetricDefinitionInput | MetricValueUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: MetricValueCreateManyMetricDefinitionInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutMetricDefinitionInput | MetricValueUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutMetricDefinitionInput | MetricValueUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type ColumnMappingUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput> | ColumnMappingCreateWithoutMetricDefinitionInput[] | ColumnMappingUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutMetricDefinitionInput | ColumnMappingCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: ColumnMappingUpsertWithWhereUniqueWithoutMetricDefinitionInput | ColumnMappingUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: ColumnMappingCreateManyMetricDefinitionInputEnvelope
    set?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    disconnect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    delete?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    update?: ColumnMappingUpdateWithWhereUniqueWithoutMetricDefinitionInput | ColumnMappingUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: ColumnMappingUpdateManyWithWhereWithoutMetricDefinitionInput | ColumnMappingUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
  }

  export type GoalUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput> | GoalCreateWithoutMetricDefinitionInput[] | GoalUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutMetricDefinitionInput | GoalCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutMetricDefinitionInput | GoalUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: GoalCreateManyMetricDefinitionInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutMetricDefinitionInput | GoalUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutMetricDefinitionInput | GoalUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type WidgetUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput> | WidgetCreateWithoutMetricDefinitionInput[] | WidgetUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutMetricDefinitionInput | WidgetCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: WidgetUpsertWithWhereUniqueWithoutMetricDefinitionInput | WidgetUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: WidgetCreateManyMetricDefinitionInputEnvelope
    set?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    disconnect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    delete?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    update?: WidgetUpdateWithWhereUniqueWithoutMetricDefinitionInput | WidgetUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: WidgetUpdateManyWithWhereWithoutMetricDefinitionInput | WidgetUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
  }

  export type MetricValueUncheckedUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput> | MetricValueCreateWithoutMetricDefinitionInput[] | MetricValueUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutMetricDefinitionInput | MetricValueCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutMetricDefinitionInput | MetricValueUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: MetricValueCreateManyMetricDefinitionInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutMetricDefinitionInput | MetricValueUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutMetricDefinitionInput | MetricValueUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput> | ColumnMappingCreateWithoutMetricDefinitionInput[] | ColumnMappingUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutMetricDefinitionInput | ColumnMappingCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: ColumnMappingUpsertWithWhereUniqueWithoutMetricDefinitionInput | ColumnMappingUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: ColumnMappingCreateManyMetricDefinitionInputEnvelope
    set?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    disconnect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    delete?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    update?: ColumnMappingUpdateWithWhereUniqueWithoutMetricDefinitionInput | ColumnMappingUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: ColumnMappingUpdateManyWithWhereWithoutMetricDefinitionInput | ColumnMappingUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput> | GoalCreateWithoutMetricDefinitionInput[] | GoalUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutMetricDefinitionInput | GoalCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutMetricDefinitionInput | GoalUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: GoalCreateManyMetricDefinitionInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutMetricDefinitionInput | GoalUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutMetricDefinitionInput | GoalUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type WidgetUncheckedUpdateManyWithoutMetricDefinitionNestedInput = {
    create?: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput> | WidgetCreateWithoutMetricDefinitionInput[] | WidgetUncheckedCreateWithoutMetricDefinitionInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutMetricDefinitionInput | WidgetCreateOrConnectWithoutMetricDefinitionInput[]
    upsert?: WidgetUpsertWithWhereUniqueWithoutMetricDefinitionInput | WidgetUpsertWithWhereUniqueWithoutMetricDefinitionInput[]
    createMany?: WidgetCreateManyMetricDefinitionInputEnvelope
    set?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    disconnect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    delete?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    update?: WidgetUpdateWithWhereUniqueWithoutMetricDefinitionInput | WidgetUpdateWithWhereUniqueWithoutMetricDefinitionInput[]
    updateMany?: WidgetUpdateManyWithWhereWithoutMetricDefinitionInput | WidgetUpdateManyWithWhereWithoutMetricDefinitionInput[]
    deleteMany?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
  }

  export type ColumnMappingCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput> | ColumnMappingCreateWithoutDataSourceInput[] | ColumnMappingUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutDataSourceInput | ColumnMappingCreateOrConnectWithoutDataSourceInput[]
    createMany?: ColumnMappingCreateManyDataSourceInputEnvelope
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
  }

  export type MetricValueCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput> | MetricValueCreateWithoutDataSourceInput[] | MetricValueUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutDataSourceInput | MetricValueCreateOrConnectWithoutDataSourceInput[]
    createMany?: MetricValueCreateManyDataSourceInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type HygieneProductionCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput> | HygieneProductionCreateWithoutDataSourceInput[] | HygieneProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutDataSourceInput | HygieneProductionCreateOrConnectWithoutDataSourceInput[]
    createMany?: HygieneProductionCreateManyDataSourceInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput> | DentistProductionCreateWithoutDataSourceInput[] | DentistProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutDataSourceInput | DentistProductionCreateOrConnectWithoutDataSourceInput[]
    createMany?: DentistProductionCreateManyDataSourceInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type LocationFinancialCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput> | LocationFinancialCreateWithoutDataSourceInput[] | LocationFinancialUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutDataSourceInput | LocationFinancialCreateOrConnectWithoutDataSourceInput[]
    createMany?: LocationFinancialCreateManyDataSourceInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type ClinicCreateNestedOneWithoutDataSourcesInput = {
    create?: XOR<ClinicCreateWithoutDataSourcesInput, ClinicUncheckedCreateWithoutDataSourcesInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutDataSourcesInput
    connect?: ClinicWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutDataSourcesInput = {
    create?: XOR<ProviderCreateWithoutDataSourcesInput, ProviderUncheckedCreateWithoutDataSourcesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutDataSourcesInput
    connect?: ProviderWhereUniqueInput
  }

  export type ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput> | ColumnMappingCreateWithoutDataSourceInput[] | ColumnMappingUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutDataSourceInput | ColumnMappingCreateOrConnectWithoutDataSourceInput[]
    createMany?: ColumnMappingCreateManyDataSourceInputEnvelope
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
  }

  export type MetricValueUncheckedCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput> | MetricValueCreateWithoutDataSourceInput[] | MetricValueUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutDataSourceInput | MetricValueCreateOrConnectWithoutDataSourceInput[]
    createMany?: MetricValueCreateManyDataSourceInputEnvelope
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
  }

  export type HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput> | HygieneProductionCreateWithoutDataSourceInput[] | HygieneProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutDataSourceInput | HygieneProductionCreateOrConnectWithoutDataSourceInput[]
    createMany?: HygieneProductionCreateManyDataSourceInputEnvelope
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
  }

  export type DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput> | DentistProductionCreateWithoutDataSourceInput[] | DentistProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutDataSourceInput | DentistProductionCreateOrConnectWithoutDataSourceInput[]
    createMany?: DentistProductionCreateManyDataSourceInputEnvelope
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
  }

  export type LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput = {
    create?: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput> | LocationFinancialCreateWithoutDataSourceInput[] | LocationFinancialUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutDataSourceInput | LocationFinancialCreateOrConnectWithoutDataSourceInput[]
    createMany?: LocationFinancialCreateManyDataSourceInputEnvelope
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
  }

  export type ColumnMappingUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput> | ColumnMappingCreateWithoutDataSourceInput[] | ColumnMappingUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutDataSourceInput | ColumnMappingCreateOrConnectWithoutDataSourceInput[]
    upsert?: ColumnMappingUpsertWithWhereUniqueWithoutDataSourceInput | ColumnMappingUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: ColumnMappingCreateManyDataSourceInputEnvelope
    set?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    disconnect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    delete?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    update?: ColumnMappingUpdateWithWhereUniqueWithoutDataSourceInput | ColumnMappingUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: ColumnMappingUpdateManyWithWhereWithoutDataSourceInput | ColumnMappingUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
  }

  export type MetricValueUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput> | MetricValueCreateWithoutDataSourceInput[] | MetricValueUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutDataSourceInput | MetricValueCreateOrConnectWithoutDataSourceInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutDataSourceInput | MetricValueUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: MetricValueCreateManyDataSourceInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutDataSourceInput | MetricValueUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutDataSourceInput | MetricValueUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type HygieneProductionUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput> | HygieneProductionCreateWithoutDataSourceInput[] | HygieneProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutDataSourceInput | HygieneProductionCreateOrConnectWithoutDataSourceInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutDataSourceInput | HygieneProductionUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: HygieneProductionCreateManyDataSourceInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutDataSourceInput | HygieneProductionUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutDataSourceInput | HygieneProductionUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput> | DentistProductionCreateWithoutDataSourceInput[] | DentistProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutDataSourceInput | DentistProductionCreateOrConnectWithoutDataSourceInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutDataSourceInput | DentistProductionUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: DentistProductionCreateManyDataSourceInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutDataSourceInput | DentistProductionUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutDataSourceInput | DentistProductionUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type LocationFinancialUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput> | LocationFinancialCreateWithoutDataSourceInput[] | LocationFinancialUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutDataSourceInput | LocationFinancialCreateOrConnectWithoutDataSourceInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutDataSourceInput | LocationFinancialUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: LocationFinancialCreateManyDataSourceInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutDataSourceInput | LocationFinancialUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutDataSourceInput | LocationFinancialUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type ClinicUpdateOneRequiredWithoutDataSourcesNestedInput = {
    create?: XOR<ClinicCreateWithoutDataSourcesInput, ClinicUncheckedCreateWithoutDataSourcesInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutDataSourcesInput
    upsert?: ClinicUpsertWithoutDataSourcesInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutDataSourcesInput, ClinicUpdateWithoutDataSourcesInput>, ClinicUncheckedUpdateWithoutDataSourcesInput>
  }

  export type ProviderUpdateOneWithoutDataSourcesNestedInput = {
    create?: XOR<ProviderCreateWithoutDataSourcesInput, ProviderUncheckedCreateWithoutDataSourcesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutDataSourcesInput
    upsert?: ProviderUpsertWithoutDataSourcesInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutDataSourcesInput, ProviderUpdateWithoutDataSourcesInput>, ProviderUncheckedUpdateWithoutDataSourcesInput>
  }

  export type ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput> | ColumnMappingCreateWithoutDataSourceInput[] | ColumnMappingUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: ColumnMappingCreateOrConnectWithoutDataSourceInput | ColumnMappingCreateOrConnectWithoutDataSourceInput[]
    upsert?: ColumnMappingUpsertWithWhereUniqueWithoutDataSourceInput | ColumnMappingUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: ColumnMappingCreateManyDataSourceInputEnvelope
    set?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    disconnect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    delete?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    connect?: ColumnMappingWhereUniqueInput | ColumnMappingWhereUniqueInput[]
    update?: ColumnMappingUpdateWithWhereUniqueWithoutDataSourceInput | ColumnMappingUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: ColumnMappingUpdateManyWithWhereWithoutDataSourceInput | ColumnMappingUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
  }

  export type MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput> | MetricValueCreateWithoutDataSourceInput[] | MetricValueUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: MetricValueCreateOrConnectWithoutDataSourceInput | MetricValueCreateOrConnectWithoutDataSourceInput[]
    upsert?: MetricValueUpsertWithWhereUniqueWithoutDataSourceInput | MetricValueUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: MetricValueCreateManyDataSourceInputEnvelope
    set?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    disconnect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    delete?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    connect?: MetricValueWhereUniqueInput | MetricValueWhereUniqueInput[]
    update?: MetricValueUpdateWithWhereUniqueWithoutDataSourceInput | MetricValueUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: MetricValueUpdateManyWithWhereWithoutDataSourceInput | MetricValueUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
  }

  export type HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput> | HygieneProductionCreateWithoutDataSourceInput[] | HygieneProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: HygieneProductionCreateOrConnectWithoutDataSourceInput | HygieneProductionCreateOrConnectWithoutDataSourceInput[]
    upsert?: HygieneProductionUpsertWithWhereUniqueWithoutDataSourceInput | HygieneProductionUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: HygieneProductionCreateManyDataSourceInputEnvelope
    set?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    disconnect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    delete?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    connect?: HygieneProductionWhereUniqueInput | HygieneProductionWhereUniqueInput[]
    update?: HygieneProductionUpdateWithWhereUniqueWithoutDataSourceInput | HygieneProductionUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: HygieneProductionUpdateManyWithWhereWithoutDataSourceInput | HygieneProductionUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
  }

  export type DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput> | DentistProductionCreateWithoutDataSourceInput[] | DentistProductionUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: DentistProductionCreateOrConnectWithoutDataSourceInput | DentistProductionCreateOrConnectWithoutDataSourceInput[]
    upsert?: DentistProductionUpsertWithWhereUniqueWithoutDataSourceInput | DentistProductionUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: DentistProductionCreateManyDataSourceInputEnvelope
    set?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    disconnect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    delete?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    connect?: DentistProductionWhereUniqueInput | DentistProductionWhereUniqueInput[]
    update?: DentistProductionUpdateWithWhereUniqueWithoutDataSourceInput | DentistProductionUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: DentistProductionUpdateManyWithWhereWithoutDataSourceInput | DentistProductionUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
  }

  export type LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput = {
    create?: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput> | LocationFinancialCreateWithoutDataSourceInput[] | LocationFinancialUncheckedCreateWithoutDataSourceInput[]
    connectOrCreate?: LocationFinancialCreateOrConnectWithoutDataSourceInput | LocationFinancialCreateOrConnectWithoutDataSourceInput[]
    upsert?: LocationFinancialUpsertWithWhereUniqueWithoutDataSourceInput | LocationFinancialUpsertWithWhereUniqueWithoutDataSourceInput[]
    createMany?: LocationFinancialCreateManyDataSourceInputEnvelope
    set?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    disconnect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    delete?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    connect?: LocationFinancialWhereUniqueInput | LocationFinancialWhereUniqueInput[]
    update?: LocationFinancialUpdateWithWhereUniqueWithoutDataSourceInput | LocationFinancialUpdateWithWhereUniqueWithoutDataSourceInput[]
    updateMany?: LocationFinancialUpdateManyWithWhereWithoutDataSourceInput | LocationFinancialUpdateManyWithWhereWithoutDataSourceInput[]
    deleteMany?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
  }

  export type DataSourceCreateNestedOneWithoutColumnMappingsInput = {
    create?: XOR<DataSourceCreateWithoutColumnMappingsInput, DataSourceUncheckedCreateWithoutColumnMappingsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutColumnMappingsInput
    connect?: DataSourceWhereUniqueInput
  }

  export type MetricDefinitionCreateNestedOneWithoutColumnMappingsInput = {
    create?: XOR<MetricDefinitionCreateWithoutColumnMappingsInput, MetricDefinitionUncheckedCreateWithoutColumnMappingsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutColumnMappingsInput
    connect?: MetricDefinitionWhereUniqueInput
  }

  export type DataSourceUpdateOneRequiredWithoutColumnMappingsNestedInput = {
    create?: XOR<DataSourceCreateWithoutColumnMappingsInput, DataSourceUncheckedCreateWithoutColumnMappingsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutColumnMappingsInput
    upsert?: DataSourceUpsertWithoutColumnMappingsInput
    connect?: DataSourceWhereUniqueInput
    update?: XOR<XOR<DataSourceUpdateToOneWithWhereWithoutColumnMappingsInput, DataSourceUpdateWithoutColumnMappingsInput>, DataSourceUncheckedUpdateWithoutColumnMappingsInput>
  }

  export type MetricDefinitionUpdateOneRequiredWithoutColumnMappingsNestedInput = {
    create?: XOR<MetricDefinitionCreateWithoutColumnMappingsInput, MetricDefinitionUncheckedCreateWithoutColumnMappingsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutColumnMappingsInput
    upsert?: MetricDefinitionUpsertWithoutColumnMappingsInput
    connect?: MetricDefinitionWhereUniqueInput
    update?: XOR<XOR<MetricDefinitionUpdateToOneWithWhereWithoutColumnMappingsInput, MetricDefinitionUpdateWithoutColumnMappingsInput>, MetricDefinitionUncheckedUpdateWithoutColumnMappingsInput>
  }

  export type MetricDefinitionCreateNestedOneWithoutMetricsInput = {
    create?: XOR<MetricDefinitionCreateWithoutMetricsInput, MetricDefinitionUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutMetricsInput
    connect?: MetricDefinitionWhereUniqueInput
  }

  export type ClinicCreateNestedOneWithoutMetricsInput = {
    create?: XOR<ClinicCreateWithoutMetricsInput, ClinicUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutMetricsInput
    connect?: ClinicWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutMetricsInput = {
    create?: XOR<ProviderCreateWithoutMetricsInput, ProviderUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutMetricsInput
    connect?: ProviderWhereUniqueInput
  }

  export type DataSourceCreateNestedOneWithoutMetricsInput = {
    create?: XOR<DataSourceCreateWithoutMetricsInput, DataSourceUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutMetricsInput
    connect?: DataSourceWhereUniqueInput
  }

  export type MetricDefinitionUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<MetricDefinitionCreateWithoutMetricsInput, MetricDefinitionUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutMetricsInput
    upsert?: MetricDefinitionUpsertWithoutMetricsInput
    connect?: MetricDefinitionWhereUniqueInput
    update?: XOR<XOR<MetricDefinitionUpdateToOneWithWhereWithoutMetricsInput, MetricDefinitionUpdateWithoutMetricsInput>, MetricDefinitionUncheckedUpdateWithoutMetricsInput>
  }

  export type ClinicUpdateOneWithoutMetricsNestedInput = {
    create?: XOR<ClinicCreateWithoutMetricsInput, ClinicUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutMetricsInput
    upsert?: ClinicUpsertWithoutMetricsInput
    disconnect?: ClinicWhereInput | boolean
    delete?: ClinicWhereInput | boolean
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutMetricsInput, ClinicUpdateWithoutMetricsInput>, ClinicUncheckedUpdateWithoutMetricsInput>
  }

  export type ProviderUpdateOneWithoutMetricsNestedInput = {
    create?: XOR<ProviderCreateWithoutMetricsInput, ProviderUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutMetricsInput
    upsert?: ProviderUpsertWithoutMetricsInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutMetricsInput, ProviderUpdateWithoutMetricsInput>, ProviderUncheckedUpdateWithoutMetricsInput>
  }

  export type DataSourceUpdateOneWithoutMetricsNestedInput = {
    create?: XOR<DataSourceCreateWithoutMetricsInput, DataSourceUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutMetricsInput
    upsert?: DataSourceUpsertWithoutMetricsInput
    disconnect?: DataSourceWhereInput | boolean
    delete?: DataSourceWhereInput | boolean
    connect?: DataSourceWhereUniqueInput
    update?: XOR<XOR<DataSourceUpdateToOneWithWhereWithoutMetricsInput, DataSourceUpdateWithoutMetricsInput>, DataSourceUncheckedUpdateWithoutMetricsInput>
  }

  export type MetricDefinitionCreateNestedOneWithoutGoalsInput = {
    create?: XOR<MetricDefinitionCreateWithoutGoalsInput, MetricDefinitionUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutGoalsInput
    connect?: MetricDefinitionWhereUniqueInput
  }

  export type ClinicCreateNestedOneWithoutGoalsInput = {
    create?: XOR<ClinicCreateWithoutGoalsInput, ClinicUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutGoalsInput
    connect?: ClinicWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutGoalsInput = {
    create?: XOR<ProviderCreateWithoutGoalsInput, ProviderUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutGoalsInput
    connect?: ProviderWhereUniqueInput
  }

  export type MetricDefinitionUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<MetricDefinitionCreateWithoutGoalsInput, MetricDefinitionUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutGoalsInput
    upsert?: MetricDefinitionUpsertWithoutGoalsInput
    connect?: MetricDefinitionWhereUniqueInput
    update?: XOR<XOR<MetricDefinitionUpdateToOneWithWhereWithoutGoalsInput, MetricDefinitionUpdateWithoutGoalsInput>, MetricDefinitionUncheckedUpdateWithoutGoalsInput>
  }

  export type ClinicUpdateOneWithoutGoalsNestedInput = {
    create?: XOR<ClinicCreateWithoutGoalsInput, ClinicUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutGoalsInput
    upsert?: ClinicUpsertWithoutGoalsInput
    disconnect?: ClinicWhereInput | boolean
    delete?: ClinicWhereInput | boolean
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutGoalsInput, ClinicUpdateWithoutGoalsInput>, ClinicUncheckedUpdateWithoutGoalsInput>
  }

  export type ProviderUpdateOneWithoutGoalsNestedInput = {
    create?: XOR<ProviderCreateWithoutGoalsInput, ProviderUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutGoalsInput
    upsert?: ProviderUpsertWithoutGoalsInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutGoalsInput, ProviderUpdateWithoutGoalsInput>, ProviderUncheckedUpdateWithoutGoalsInput>
  }

  export type UserCreateNestedOneWithoutDashboardsInput = {
    create?: XOR<UserCreateWithoutDashboardsInput, UserUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDashboardsInput
    connect?: UserWhereUniqueInput
  }

  export type WidgetCreateNestedManyWithoutDashboardInput = {
    create?: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput> | WidgetCreateWithoutDashboardInput[] | WidgetUncheckedCreateWithoutDashboardInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutDashboardInput | WidgetCreateOrConnectWithoutDashboardInput[]
    createMany?: WidgetCreateManyDashboardInputEnvelope
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
  }

  export type WidgetUncheckedCreateNestedManyWithoutDashboardInput = {
    create?: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput> | WidgetCreateWithoutDashboardInput[] | WidgetUncheckedCreateWithoutDashboardInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutDashboardInput | WidgetCreateOrConnectWithoutDashboardInput[]
    createMany?: WidgetCreateManyDashboardInputEnvelope
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDashboardsNestedInput = {
    create?: XOR<UserCreateWithoutDashboardsInput, UserUncheckedCreateWithoutDashboardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDashboardsInput
    upsert?: UserUpsertWithoutDashboardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDashboardsInput, UserUpdateWithoutDashboardsInput>, UserUncheckedUpdateWithoutDashboardsInput>
  }

  export type WidgetUpdateManyWithoutDashboardNestedInput = {
    create?: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput> | WidgetCreateWithoutDashboardInput[] | WidgetUncheckedCreateWithoutDashboardInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutDashboardInput | WidgetCreateOrConnectWithoutDashboardInput[]
    upsert?: WidgetUpsertWithWhereUniqueWithoutDashboardInput | WidgetUpsertWithWhereUniqueWithoutDashboardInput[]
    createMany?: WidgetCreateManyDashboardInputEnvelope
    set?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    disconnect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    delete?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    update?: WidgetUpdateWithWhereUniqueWithoutDashboardInput | WidgetUpdateWithWhereUniqueWithoutDashboardInput[]
    updateMany?: WidgetUpdateManyWithWhereWithoutDashboardInput | WidgetUpdateManyWithWhereWithoutDashboardInput[]
    deleteMany?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
  }

  export type WidgetUncheckedUpdateManyWithoutDashboardNestedInput = {
    create?: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput> | WidgetCreateWithoutDashboardInput[] | WidgetUncheckedCreateWithoutDashboardInput[]
    connectOrCreate?: WidgetCreateOrConnectWithoutDashboardInput | WidgetCreateOrConnectWithoutDashboardInput[]
    upsert?: WidgetUpsertWithWhereUniqueWithoutDashboardInput | WidgetUpsertWithWhereUniqueWithoutDashboardInput[]
    createMany?: WidgetCreateManyDashboardInputEnvelope
    set?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    disconnect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    delete?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    connect?: WidgetWhereUniqueInput | WidgetWhereUniqueInput[]
    update?: WidgetUpdateWithWhereUniqueWithoutDashboardInput | WidgetUpdateWithWhereUniqueWithoutDashboardInput[]
    updateMany?: WidgetUpdateManyWithWhereWithoutDashboardInput | WidgetUpdateManyWithWhereWithoutDashboardInput[]
    deleteMany?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
  }

  export type DashboardCreateNestedOneWithoutWidgetsInput = {
    create?: XOR<DashboardCreateWithoutWidgetsInput, DashboardUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: DashboardCreateOrConnectWithoutWidgetsInput
    connect?: DashboardWhereUniqueInput
  }

  export type MetricDefinitionCreateNestedOneWithoutWidgetsInput = {
    create?: XOR<MetricDefinitionCreateWithoutWidgetsInput, MetricDefinitionUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutWidgetsInput
    connect?: MetricDefinitionWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DashboardUpdateOneRequiredWithoutWidgetsNestedInput = {
    create?: XOR<DashboardCreateWithoutWidgetsInput, DashboardUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: DashboardCreateOrConnectWithoutWidgetsInput
    upsert?: DashboardUpsertWithoutWidgetsInput
    connect?: DashboardWhereUniqueInput
    update?: XOR<XOR<DashboardUpdateToOneWithWhereWithoutWidgetsInput, DashboardUpdateWithoutWidgetsInput>, DashboardUncheckedUpdateWithoutWidgetsInput>
  }

  export type MetricDefinitionUpdateOneWithoutWidgetsNestedInput = {
    create?: XOR<MetricDefinitionCreateWithoutWidgetsInput, MetricDefinitionUncheckedCreateWithoutWidgetsInput>
    connectOrCreate?: MetricDefinitionCreateOrConnectWithoutWidgetsInput
    upsert?: MetricDefinitionUpsertWithoutWidgetsInput
    disconnect?: MetricDefinitionWhereInput | boolean
    delete?: MetricDefinitionWhereInput | boolean
    connect?: MetricDefinitionWhereUniqueInput
    update?: XOR<XOR<MetricDefinitionUpdateToOneWithWhereWithoutWidgetsInput, MetricDefinitionUpdateWithoutWidgetsInput>, MetricDefinitionUncheckedUpdateWithoutWidgetsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GoogleCredentialCreatescopeInput = {
    set: string[]
  }

  export type GoogleCredentialUpdatescopeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SpreadsheetConnectionCreatesheetNamesInput = {
    set: string[]
  }

  export type SpreadsheetConnectionUpdatesheetNamesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ClinicCreateNestedOneWithoutHygieneProductionInput = {
    create?: XOR<ClinicCreateWithoutHygieneProductionInput, ClinicUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutHygieneProductionInput
    connect?: ClinicWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutHygieneProductionInput = {
    create?: XOR<ProviderCreateWithoutHygieneProductionInput, ProviderUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutHygieneProductionInput
    connect?: ProviderWhereUniqueInput
  }

  export type DataSourceCreateNestedOneWithoutHygieneProductionInput = {
    create?: XOR<DataSourceCreateWithoutHygieneProductionInput, DataSourceUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutHygieneProductionInput
    connect?: DataSourceWhereUniqueInput
  }

  export type ClinicUpdateOneRequiredWithoutHygieneProductionNestedInput = {
    create?: XOR<ClinicCreateWithoutHygieneProductionInput, ClinicUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutHygieneProductionInput
    upsert?: ClinicUpsertWithoutHygieneProductionInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutHygieneProductionInput, ClinicUpdateWithoutHygieneProductionInput>, ClinicUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type ProviderUpdateOneWithoutHygieneProductionNestedInput = {
    create?: XOR<ProviderCreateWithoutHygieneProductionInput, ProviderUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutHygieneProductionInput
    upsert?: ProviderUpsertWithoutHygieneProductionInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutHygieneProductionInput, ProviderUpdateWithoutHygieneProductionInput>, ProviderUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type DataSourceUpdateOneWithoutHygieneProductionNestedInput = {
    create?: XOR<DataSourceCreateWithoutHygieneProductionInput, DataSourceUncheckedCreateWithoutHygieneProductionInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutHygieneProductionInput
    upsert?: DataSourceUpsertWithoutHygieneProductionInput
    disconnect?: DataSourceWhereInput | boolean
    delete?: DataSourceWhereInput | boolean
    connect?: DataSourceWhereUniqueInput
    update?: XOR<XOR<DataSourceUpdateToOneWithWhereWithoutHygieneProductionInput, DataSourceUpdateWithoutHygieneProductionInput>, DataSourceUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type ClinicCreateNestedOneWithoutDentistProductionInput = {
    create?: XOR<ClinicCreateWithoutDentistProductionInput, ClinicUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutDentistProductionInput
    connect?: ClinicWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutDentistProductionInput = {
    create?: XOR<ProviderCreateWithoutDentistProductionInput, ProviderUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutDentistProductionInput
    connect?: ProviderWhereUniqueInput
  }

  export type DataSourceCreateNestedOneWithoutDentistProductionInput = {
    create?: XOR<DataSourceCreateWithoutDentistProductionInput, DataSourceUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutDentistProductionInput
    connect?: DataSourceWhereUniqueInput
  }

  export type ClinicUpdateOneRequiredWithoutDentistProductionNestedInput = {
    create?: XOR<ClinicCreateWithoutDentistProductionInput, ClinicUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: ClinicCreateOrConnectWithoutDentistProductionInput
    upsert?: ClinicUpsertWithoutDentistProductionInput
    connect?: ClinicWhereUniqueInput
    update?: XOR<XOR<ClinicUpdateToOneWithWhereWithoutDentistProductionInput, ClinicUpdateWithoutDentistProductionInput>, ClinicUncheckedUpdateWithoutDentistProductionInput>
  }

  export type ProviderUpdateOneWithoutDentistProductionNestedInput = {
    create?: XOR<ProviderCreateWithoutDentistProductionInput, ProviderUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutDentistProductionInput
    upsert?: ProviderUpsertWithoutDentistProductionInput
    disconnect?: ProviderWhereInput | boolean
    delete?: ProviderWhereInput | boolean
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutDentistProductionInput, ProviderUpdateWithoutDentistProductionInput>, ProviderUncheckedUpdateWithoutDentistProductionInput>
  }

  export type DataSourceUpdateOneWithoutDentistProductionNestedInput = {
    create?: XOR<DataSourceCreateWithoutDentistProductionInput, DataSourceUncheckedCreateWithoutDentistProductionInput>
    connectOrCreate?: DataSourceCreateOrConnectWithoutDentistProductionInput
    upsert?: DataSourceUpsertWithoutDentistProductionInput
    disconnect?: DataSourceWhereInput | boolean
    delete?: DataSourceWhereInput | boolean
    connect?: DataSourceWhereUniqueInput
    update?: XOR<XOR<DataSourceUpdateToOneWithWhereWithoutDentistProductionInput, DataSourceUpdateWithoutDentistProductionInput>, DataSourceUncheckedUpdateWithoutDentistProductionInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutClinicInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    dashboards?: DashboardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClinicInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    dashboards?: DashboardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClinicInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput>
  }

  export type UserCreateManyClinicInputEnvelope = {
    data: UserCreateManyClinicInput | UserCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type ProviderCreateWithoutClinicInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutClinicInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutClinicInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput>
  }

  export type ProviderCreateManyClinicInputEnvelope = {
    data: ProviderCreateManyClinicInput | ProviderCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type MetricValueCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutMetricsInput
    provider?: ProviderCreateNestedOneWithoutMetricsInput
    dataSource?: DataSourceCreateNestedOneWithoutMetricsInput
  }

  export type MetricValueUncheckedCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type MetricValueCreateOrConnectWithoutClinicInput = {
    where: MetricValueWhereUniqueInput
    create: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput>
  }

  export type MetricValueCreateManyClinicInputEnvelope = {
    data: MetricValueCreateManyClinicInput | MetricValueCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutClinicInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutGoalsInput
    provider?: ProviderCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutClinicInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    providerId?: string | null
  }

  export type GoalCreateOrConnectWithoutClinicInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput>
  }

  export type GoalCreateManyClinicInputEnvelope = {
    data: GoalCreateManyClinicInput | GoalCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type DataSourceCreateWithoutClinicInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutClinicInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutClinicInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput>
  }

  export type DataSourceCreateManyClinicInputEnvelope = {
    data: DataSourceCreateManyClinicInput | DataSourceCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type HygieneProductionCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutHygieneProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutHygieneProductionInput
  }

  export type HygieneProductionUncheckedCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type HygieneProductionCreateOrConnectWithoutClinicInput = {
    where: HygieneProductionWhereUniqueInput
    create: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput>
  }

  export type HygieneProductionCreateManyClinicInputEnvelope = {
    data: HygieneProductionCreateManyClinicInput | HygieneProductionCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type DentistProductionCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    provider?: ProviderCreateNestedOneWithoutDentistProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutDentistProductionInput
  }

  export type DentistProductionUncheckedCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type DentistProductionCreateOrConnectWithoutClinicInput = {
    where: DentistProductionWhereUniqueInput
    create: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput>
  }

  export type DentistProductionCreateManyClinicInputEnvelope = {
    data: DentistProductionCreateManyClinicInput | DentistProductionCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutClinicInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    financials?: LocationFinancialCreateNestedManyWithoutLocationInput
    providers?: ProviderLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutClinicInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    financials?: LocationFinancialUncheckedCreateNestedManyWithoutLocationInput
    providers?: ProviderLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutClinicInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput>
  }

  export type LocationCreateManyClinicInputEnvelope = {
    data: LocationCreateManyClinicInput | LocationCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type LocationFinancialCreateWithoutClinicInput = {
    id?: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutFinancialsInput
    dataSource?: DataSourceCreateNestedOneWithoutLocationFinancialsInput
  }

  export type LocationFinancialUncheckedCreateWithoutClinicInput = {
    id?: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialCreateOrConnectWithoutClinicInput = {
    where: LocationFinancialWhereUniqueInput
    create: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput>
  }

  export type LocationFinancialCreateManyClinicInputEnvelope = {
    data: LocationFinancialCreateManyClinicInput | LocationFinancialCreateManyClinicInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutClinicInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutClinicInput, UserUncheckedUpdateWithoutClinicInput>
    create: XOR<UserCreateWithoutClinicInput, UserUncheckedCreateWithoutClinicInput>
  }

  export type UserUpdateWithWhereUniqueWithoutClinicInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutClinicInput, UserUncheckedUpdateWithoutClinicInput>
  }

  export type UserUpdateManyWithWhereWithoutClinicInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutClinicInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    authId?: StringNullableFilter<"User"> | string | null
    uuidId?: UuidNullableFilter<"User"> | string | null
    clinicId?: StringNullableFilter<"User"> | string | null
  }

  export type ProviderUpsertWithWhereUniqueWithoutClinicInput = {
    where: ProviderWhereUniqueInput
    update: XOR<ProviderUpdateWithoutClinicInput, ProviderUncheckedUpdateWithoutClinicInput>
    create: XOR<ProviderCreateWithoutClinicInput, ProviderUncheckedCreateWithoutClinicInput>
  }

  export type ProviderUpdateWithWhereUniqueWithoutClinicInput = {
    where: ProviderWhereUniqueInput
    data: XOR<ProviderUpdateWithoutClinicInput, ProviderUncheckedUpdateWithoutClinicInput>
  }

  export type ProviderUpdateManyWithWhereWithoutClinicInput = {
    where: ProviderScalarWhereInput
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyWithoutClinicInput>
  }

  export type ProviderScalarWhereInput = {
    AND?: ProviderScalarWhereInput | ProviderScalarWhereInput[]
    OR?: ProviderScalarWhereInput[]
    NOT?: ProviderScalarWhereInput | ProviderScalarWhereInput[]
    id?: StringFilter<"Provider"> | string
    name?: StringFilter<"Provider"> | string
    firstName?: StringNullableFilter<"Provider"> | string | null
    lastName?: StringNullableFilter<"Provider"> | string | null
    email?: StringNullableFilter<"Provider"> | string | null
    providerType?: StringFilter<"Provider"> | string
    position?: StringNullableFilter<"Provider"> | string | null
    status?: StringFilter<"Provider"> | string
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    clinicId?: StringFilter<"Provider"> | string
  }

  export type MetricValueUpsertWithWhereUniqueWithoutClinicInput = {
    where: MetricValueWhereUniqueInput
    update: XOR<MetricValueUpdateWithoutClinicInput, MetricValueUncheckedUpdateWithoutClinicInput>
    create: XOR<MetricValueCreateWithoutClinicInput, MetricValueUncheckedCreateWithoutClinicInput>
  }

  export type MetricValueUpdateWithWhereUniqueWithoutClinicInput = {
    where: MetricValueWhereUniqueInput
    data: XOR<MetricValueUpdateWithoutClinicInput, MetricValueUncheckedUpdateWithoutClinicInput>
  }

  export type MetricValueUpdateManyWithWhereWithoutClinicInput = {
    where: MetricValueScalarWhereInput
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyWithoutClinicInput>
  }

  export type MetricValueScalarWhereInput = {
    AND?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
    OR?: MetricValueScalarWhereInput[]
    NOT?: MetricValueScalarWhereInput | MetricValueScalarWhereInput[]
    id?: StringFilter<"MetricValue"> | string
    date?: DateTimeFilter<"MetricValue"> | Date | string
    value?: StringFilter<"MetricValue"> | string
    sourceType?: StringFilter<"MetricValue"> | string
    sourceSheet?: StringNullableFilter<"MetricValue"> | string | null
    externalId?: StringNullableFilter<"MetricValue"> | string | null
    createdAt?: DateTimeFilter<"MetricValue"> | Date | string
    updatedAt?: DateTimeFilter<"MetricValue"> | Date | string
    metricDefinitionId?: StringFilter<"MetricValue"> | string
    clinicId?: StringNullableFilter<"MetricValue"> | string | null
    providerId?: StringNullableFilter<"MetricValue"> | string | null
    dataSourceId?: StringNullableFilter<"MetricValue"> | string | null
  }

  export type GoalUpsertWithWhereUniqueWithoutClinicInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutClinicInput, GoalUncheckedUpdateWithoutClinicInput>
    create: XOR<GoalCreateWithoutClinicInput, GoalUncheckedCreateWithoutClinicInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutClinicInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutClinicInput, GoalUncheckedUpdateWithoutClinicInput>
  }

  export type GoalUpdateManyWithWhereWithoutClinicInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutClinicInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    timePeriod?: StringFilter<"Goal"> | string
    startDate?: DateTimeFilter<"Goal"> | Date | string
    endDate?: DateTimeFilter<"Goal"> | Date | string
    targetValue?: StringFilter<"Goal"> | string
    createdAt?: DateTimeFilter<"Goal"> | Date | string
    updatedAt?: DateTimeFilter<"Goal"> | Date | string
    metricDefinitionId?: StringFilter<"Goal"> | string
    clinicId?: StringNullableFilter<"Goal"> | string | null
    providerId?: StringNullableFilter<"Goal"> | string | null
  }

  export type DataSourceUpsertWithWhereUniqueWithoutClinicInput = {
    where: DataSourceWhereUniqueInput
    update: XOR<DataSourceUpdateWithoutClinicInput, DataSourceUncheckedUpdateWithoutClinicInput>
    create: XOR<DataSourceCreateWithoutClinicInput, DataSourceUncheckedCreateWithoutClinicInput>
  }

  export type DataSourceUpdateWithWhereUniqueWithoutClinicInput = {
    where: DataSourceWhereUniqueInput
    data: XOR<DataSourceUpdateWithoutClinicInput, DataSourceUncheckedUpdateWithoutClinicInput>
  }

  export type DataSourceUpdateManyWithWhereWithoutClinicInput = {
    where: DataSourceScalarWhereInput
    data: XOR<DataSourceUpdateManyMutationInput, DataSourceUncheckedUpdateManyWithoutClinicInput>
  }

  export type DataSourceScalarWhereInput = {
    AND?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
    OR?: DataSourceScalarWhereInput[]
    NOT?: DataSourceScalarWhereInput | DataSourceScalarWhereInput[]
    id?: StringFilter<"DataSource"> | string
    name?: StringFilter<"DataSource"> | string
    spreadsheetId?: StringFilter<"DataSource"> | string
    sheetName?: StringFilter<"DataSource"> | string
    lastSyncedAt?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    syncFrequency?: StringFilter<"DataSource"> | string
    connectionStatus?: StringFilter<"DataSource"> | string
    appScriptId?: StringNullableFilter<"DataSource"> | string | null
    accessToken?: StringFilter<"DataSource"> | string
    refreshToken?: StringNullableFilter<"DataSource"> | string | null
    expiryDate?: DateTimeNullableFilter<"DataSource"> | Date | string | null
    createdAt?: DateTimeFilter<"DataSource"> | Date | string
    updatedAt?: DateTimeFilter<"DataSource"> | Date | string
    clinicId?: StringFilter<"DataSource"> | string
    providerId?: StringNullableFilter<"DataSource"> | string | null
  }

  export type HygieneProductionUpsertWithWhereUniqueWithoutClinicInput = {
    where: HygieneProductionWhereUniqueInput
    update: XOR<HygieneProductionUpdateWithoutClinicInput, HygieneProductionUncheckedUpdateWithoutClinicInput>
    create: XOR<HygieneProductionCreateWithoutClinicInput, HygieneProductionUncheckedCreateWithoutClinicInput>
  }

  export type HygieneProductionUpdateWithWhereUniqueWithoutClinicInput = {
    where: HygieneProductionWhereUniqueInput
    data: XOR<HygieneProductionUpdateWithoutClinicInput, HygieneProductionUncheckedUpdateWithoutClinicInput>
  }

  export type HygieneProductionUpdateManyWithWhereWithoutClinicInput = {
    where: HygieneProductionScalarWhereInput
    data: XOR<HygieneProductionUpdateManyMutationInput, HygieneProductionUncheckedUpdateManyWithoutClinicInput>
  }

  export type HygieneProductionScalarWhereInput = {
    AND?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
    OR?: HygieneProductionScalarWhereInput[]
    NOT?: HygieneProductionScalarWhereInput | HygieneProductionScalarWhereInput[]
    id?: StringFilter<"HygieneProduction"> | string
    date?: DateTimeFilter<"HygieneProduction"> | Date | string
    monthTab?: StringFilter<"HygieneProduction"> | string
    hoursWorked?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    productionGoal?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: DecimalNullableFilter<"HygieneProduction"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    updatedAt?: DateTimeFilter<"HygieneProduction"> | Date | string
    clinicId?: StringFilter<"HygieneProduction"> | string
    providerId?: StringNullableFilter<"HygieneProduction"> | string | null
    dataSourceId?: StringNullableFilter<"HygieneProduction"> | string | null
  }

  export type DentistProductionUpsertWithWhereUniqueWithoutClinicInput = {
    where: DentistProductionWhereUniqueInput
    update: XOR<DentistProductionUpdateWithoutClinicInput, DentistProductionUncheckedUpdateWithoutClinicInput>
    create: XOR<DentistProductionCreateWithoutClinicInput, DentistProductionUncheckedCreateWithoutClinicInput>
  }

  export type DentistProductionUpdateWithWhereUniqueWithoutClinicInput = {
    where: DentistProductionWhereUniqueInput
    data: XOR<DentistProductionUpdateWithoutClinicInput, DentistProductionUncheckedUpdateWithoutClinicInput>
  }

  export type DentistProductionUpdateManyWithWhereWithoutClinicInput = {
    where: DentistProductionScalarWhereInput
    data: XOR<DentistProductionUpdateManyMutationInput, DentistProductionUncheckedUpdateManyWithoutClinicInput>
  }

  export type DentistProductionScalarWhereInput = {
    AND?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
    OR?: DentistProductionScalarWhereInput[]
    NOT?: DentistProductionScalarWhereInput | DentistProductionScalarWhereInput[]
    id?: StringFilter<"DentistProduction"> | string
    date?: DateTimeFilter<"DentistProduction"> | Date | string
    monthTab?: StringFilter<"DentistProduction"> | string
    verifiedProductionHumble?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    totalProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: DecimalNullableFilter<"DentistProduction"> | Decimal | DecimalJsLike | number | string | null
    providerName?: StringNullableFilter<"DentistProduction"> | string | null
    createdAt?: DateTimeFilter<"DentistProduction"> | Date | string
    updatedAt?: DateTimeFilter<"DentistProduction"> | Date | string
    clinicId?: StringFilter<"DentistProduction"> | string
    providerId?: StringNullableFilter<"DentistProduction"> | string | null
    dataSourceId?: StringNullableFilter<"DentistProduction"> | string | null
  }

  export type LocationUpsertWithWhereUniqueWithoutClinicInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutClinicInput, LocationUncheckedUpdateWithoutClinicInput>
    create: XOR<LocationCreateWithoutClinicInput, LocationUncheckedCreateWithoutClinicInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutClinicInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutClinicInput, LocationUncheckedUpdateWithoutClinicInput>
  }

  export type LocationUpdateManyWithWhereWithoutClinicInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutClinicInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    clinicId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    isActive?: BoolFilter<"Location"> | boolean
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
  }

  export type LocationFinancialUpsertWithWhereUniqueWithoutClinicInput = {
    where: LocationFinancialWhereUniqueInput
    update: XOR<LocationFinancialUpdateWithoutClinicInput, LocationFinancialUncheckedUpdateWithoutClinicInput>
    create: XOR<LocationFinancialCreateWithoutClinicInput, LocationFinancialUncheckedCreateWithoutClinicInput>
  }

  export type LocationFinancialUpdateWithWhereUniqueWithoutClinicInput = {
    where: LocationFinancialWhereUniqueInput
    data: XOR<LocationFinancialUpdateWithoutClinicInput, LocationFinancialUncheckedUpdateWithoutClinicInput>
  }

  export type LocationFinancialUpdateManyWithWhereWithoutClinicInput = {
    where: LocationFinancialScalarWhereInput
    data: XOR<LocationFinancialUpdateManyMutationInput, LocationFinancialUncheckedUpdateManyWithoutClinicInput>
  }

  export type LocationFinancialScalarWhereInput = {
    AND?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
    OR?: LocationFinancialScalarWhereInput[]
    NOT?: LocationFinancialScalarWhereInput | LocationFinancialScalarWhereInput[]
    id?: StringFilter<"LocationFinancial"> | string
    clinicId?: StringFilter<"LocationFinancial"> | string
    locationId?: StringFilter<"LocationFinancial"> | string
    date?: DateTimeFilter<"LocationFinancial"> | Date | string
    production?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string
    unearned?: DecimalNullableFilter<"LocationFinancial"> | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: StringNullableFilter<"LocationFinancial"> | string | null
    createdBy?: StringNullableFilter<"LocationFinancial"> | string | null
    createdAt?: DateTimeFilter<"LocationFinancial"> | Date | string
    updatedAt?: DateTimeFilter<"LocationFinancial"> | Date | string
  }

  export type ClinicCreateWithoutUsersInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutUsersInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutUsersInput, ClinicUncheckedCreateWithoutUsersInput>
  }

  export type DashboardCreateWithoutUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    widgets?: WidgetCreateNestedManyWithoutDashboardInput
  }

  export type DashboardUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    widgets?: WidgetUncheckedCreateNestedManyWithoutDashboardInput
  }

  export type DashboardCreateOrConnectWithoutUserInput = {
    where: DashboardWhereUniqueInput
    create: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput>
  }

  export type DashboardCreateManyUserInputEnvelope = {
    data: DashboardCreateManyUserInput | DashboardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClinicUpsertWithoutUsersInput = {
    update: XOR<ClinicUpdateWithoutUsersInput, ClinicUncheckedUpdateWithoutUsersInput>
    create: XOR<ClinicCreateWithoutUsersInput, ClinicUncheckedCreateWithoutUsersInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutUsersInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutUsersInput, ClinicUncheckedUpdateWithoutUsersInput>
  }

  export type ClinicUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type DashboardUpsertWithWhereUniqueWithoutUserInput = {
    where: DashboardWhereUniqueInput
    update: XOR<DashboardUpdateWithoutUserInput, DashboardUncheckedUpdateWithoutUserInput>
    create: XOR<DashboardCreateWithoutUserInput, DashboardUncheckedCreateWithoutUserInput>
  }

  export type DashboardUpdateWithWhereUniqueWithoutUserInput = {
    where: DashboardWhereUniqueInput
    data: XOR<DashboardUpdateWithoutUserInput, DashboardUncheckedUpdateWithoutUserInput>
  }

  export type DashboardUpdateManyWithWhereWithoutUserInput = {
    where: DashboardScalarWhereInput
    data: XOR<DashboardUpdateManyMutationInput, DashboardUncheckedUpdateManyWithoutUserInput>
  }

  export type DashboardScalarWhereInput = {
    AND?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
    OR?: DashboardScalarWhereInput[]
    NOT?: DashboardScalarWhereInput | DashboardScalarWhereInput[]
    id?: StringFilter<"Dashboard"> | string
    name?: StringFilter<"Dashboard"> | string
    isDefault?: BoolFilter<"Dashboard"> | boolean
    layoutConfig?: JsonNullableFilter<"Dashboard">
    createdAt?: DateTimeFilter<"Dashboard"> | Date | string
    updatedAt?: DateTimeFilter<"Dashboard"> | Date | string
    uuidId?: UuidNullableFilter<"Dashboard"> | string | null
    userUuidId?: StringNullableFilter<"Dashboard"> | string | null
    userId?: StringFilter<"Dashboard"> | string
  }

  export type ClinicCreateWithoutProvidersInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutProvidersInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutProvidersInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutProvidersInput, ClinicUncheckedCreateWithoutProvidersInput>
  }

  export type MetricValueCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutMetricsInput
    clinic?: ClinicCreateNestedOneWithoutMetricsInput
    dataSource?: DataSourceCreateNestedOneWithoutMetricsInput
  }

  export type MetricValueUncheckedCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    dataSourceId?: string | null
  }

  export type MetricValueCreateOrConnectWithoutProviderInput = {
    where: MetricValueWhereUniqueInput
    create: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput>
  }

  export type MetricValueCreateManyProviderInputEnvelope = {
    data: MetricValueCreateManyProviderInput | MetricValueCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutProviderInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutGoalsInput
    clinic?: ClinicCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutProviderInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
  }

  export type GoalCreateOrConnectWithoutProviderInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput>
  }

  export type GoalCreateManyProviderInputEnvelope = {
    data: GoalCreateManyProviderInput | GoalCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type DataSourceCreateWithoutProviderInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutProviderInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutProviderInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput>
  }

  export type DataSourceCreateManyProviderInputEnvelope = {
    data: DataSourceCreateManyProviderInput | DataSourceCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type HygieneProductionCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutHygieneProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutHygieneProductionInput
  }

  export type HygieneProductionUncheckedCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    dataSourceId?: string | null
  }

  export type HygieneProductionCreateOrConnectWithoutProviderInput = {
    where: HygieneProductionWhereUniqueInput
    create: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput>
  }

  export type HygieneProductionCreateManyProviderInputEnvelope = {
    data: HygieneProductionCreateManyProviderInput | HygieneProductionCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type DentistProductionCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutDentistProductionInput
    dataSource?: DataSourceCreateNestedOneWithoutDentistProductionInput
  }

  export type DentistProductionUncheckedCreateWithoutProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    dataSourceId?: string | null
  }

  export type DentistProductionCreateOrConnectWithoutProviderInput = {
    where: DentistProductionWhereUniqueInput
    create: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput>
  }

  export type DentistProductionCreateManyProviderInputEnvelope = {
    data: DentistProductionCreateManyProviderInput | DentistProductionCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ProviderLocationCreateWithoutProviderInput = {
    id?: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
    location: LocationCreateNestedOneWithoutProvidersInput
  }

  export type ProviderLocationUncheckedCreateWithoutProviderInput = {
    id?: string
    locationId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type ProviderLocationCreateOrConnectWithoutProviderInput = {
    where: ProviderLocationWhereUniqueInput
    create: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput>
  }

  export type ProviderLocationCreateManyProviderInputEnvelope = {
    data: ProviderLocationCreateManyProviderInput | ProviderLocationCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ClinicUpsertWithoutProvidersInput = {
    update: XOR<ClinicUpdateWithoutProvidersInput, ClinicUncheckedUpdateWithoutProvidersInput>
    create: XOR<ClinicCreateWithoutProvidersInput, ClinicUncheckedCreateWithoutProvidersInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutProvidersInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutProvidersInput, ClinicUncheckedUpdateWithoutProvidersInput>
  }

  export type ClinicUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type MetricValueUpsertWithWhereUniqueWithoutProviderInput = {
    where: MetricValueWhereUniqueInput
    update: XOR<MetricValueUpdateWithoutProviderInput, MetricValueUncheckedUpdateWithoutProviderInput>
    create: XOR<MetricValueCreateWithoutProviderInput, MetricValueUncheckedCreateWithoutProviderInput>
  }

  export type MetricValueUpdateWithWhereUniqueWithoutProviderInput = {
    where: MetricValueWhereUniqueInput
    data: XOR<MetricValueUpdateWithoutProviderInput, MetricValueUncheckedUpdateWithoutProviderInput>
  }

  export type MetricValueUpdateManyWithWhereWithoutProviderInput = {
    where: MetricValueScalarWhereInput
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyWithoutProviderInput>
  }

  export type GoalUpsertWithWhereUniqueWithoutProviderInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutProviderInput, GoalUncheckedUpdateWithoutProviderInput>
    create: XOR<GoalCreateWithoutProviderInput, GoalUncheckedCreateWithoutProviderInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutProviderInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutProviderInput, GoalUncheckedUpdateWithoutProviderInput>
  }

  export type GoalUpdateManyWithWhereWithoutProviderInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutProviderInput>
  }

  export type DataSourceUpsertWithWhereUniqueWithoutProviderInput = {
    where: DataSourceWhereUniqueInput
    update: XOR<DataSourceUpdateWithoutProviderInput, DataSourceUncheckedUpdateWithoutProviderInput>
    create: XOR<DataSourceCreateWithoutProviderInput, DataSourceUncheckedCreateWithoutProviderInput>
  }

  export type DataSourceUpdateWithWhereUniqueWithoutProviderInput = {
    where: DataSourceWhereUniqueInput
    data: XOR<DataSourceUpdateWithoutProviderInput, DataSourceUncheckedUpdateWithoutProviderInput>
  }

  export type DataSourceUpdateManyWithWhereWithoutProviderInput = {
    where: DataSourceScalarWhereInput
    data: XOR<DataSourceUpdateManyMutationInput, DataSourceUncheckedUpdateManyWithoutProviderInput>
  }

  export type HygieneProductionUpsertWithWhereUniqueWithoutProviderInput = {
    where: HygieneProductionWhereUniqueInput
    update: XOR<HygieneProductionUpdateWithoutProviderInput, HygieneProductionUncheckedUpdateWithoutProviderInput>
    create: XOR<HygieneProductionCreateWithoutProviderInput, HygieneProductionUncheckedCreateWithoutProviderInput>
  }

  export type HygieneProductionUpdateWithWhereUniqueWithoutProviderInput = {
    where: HygieneProductionWhereUniqueInput
    data: XOR<HygieneProductionUpdateWithoutProviderInput, HygieneProductionUncheckedUpdateWithoutProviderInput>
  }

  export type HygieneProductionUpdateManyWithWhereWithoutProviderInput = {
    where: HygieneProductionScalarWhereInput
    data: XOR<HygieneProductionUpdateManyMutationInput, HygieneProductionUncheckedUpdateManyWithoutProviderInput>
  }

  export type DentistProductionUpsertWithWhereUniqueWithoutProviderInput = {
    where: DentistProductionWhereUniqueInput
    update: XOR<DentistProductionUpdateWithoutProviderInput, DentistProductionUncheckedUpdateWithoutProviderInput>
    create: XOR<DentistProductionCreateWithoutProviderInput, DentistProductionUncheckedCreateWithoutProviderInput>
  }

  export type DentistProductionUpdateWithWhereUniqueWithoutProviderInput = {
    where: DentistProductionWhereUniqueInput
    data: XOR<DentistProductionUpdateWithoutProviderInput, DentistProductionUncheckedUpdateWithoutProviderInput>
  }

  export type DentistProductionUpdateManyWithWhereWithoutProviderInput = {
    where: DentistProductionScalarWhereInput
    data: XOR<DentistProductionUpdateManyMutationInput, DentistProductionUncheckedUpdateManyWithoutProviderInput>
  }

  export type ProviderLocationUpsertWithWhereUniqueWithoutProviderInput = {
    where: ProviderLocationWhereUniqueInput
    update: XOR<ProviderLocationUpdateWithoutProviderInput, ProviderLocationUncheckedUpdateWithoutProviderInput>
    create: XOR<ProviderLocationCreateWithoutProviderInput, ProviderLocationUncheckedCreateWithoutProviderInput>
  }

  export type ProviderLocationUpdateWithWhereUniqueWithoutProviderInput = {
    where: ProviderLocationWhereUniqueInput
    data: XOR<ProviderLocationUpdateWithoutProviderInput, ProviderLocationUncheckedUpdateWithoutProviderInput>
  }

  export type ProviderLocationUpdateManyWithWhereWithoutProviderInput = {
    where: ProviderLocationScalarWhereInput
    data: XOR<ProviderLocationUpdateManyMutationInput, ProviderLocationUncheckedUpdateManyWithoutProviderInput>
  }

  export type ProviderLocationScalarWhereInput = {
    AND?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
    OR?: ProviderLocationScalarWhereInput[]
    NOT?: ProviderLocationScalarWhereInput | ProviderLocationScalarWhereInput[]
    id?: StringFilter<"ProviderLocation"> | string
    providerId?: StringFilter<"ProviderLocation"> | string
    locationId?: StringFilter<"ProviderLocation"> | string
    isActive?: BoolFilter<"ProviderLocation"> | boolean
    startDate?: DateTimeFilter<"ProviderLocation"> | Date | string
    endDate?: DateTimeNullableFilter<"ProviderLocation"> | Date | string | null
    isPrimary?: BoolFilter<"ProviderLocation"> | boolean
  }

  export type ClinicCreateWithoutLocationsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutLocationsInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutLocationsInput, ClinicUncheckedCreateWithoutLocationsInput>
  }

  export type LocationFinancialCreateWithoutLocationInput = {
    id?: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationFinancialsInput
    dataSource?: DataSourceCreateNestedOneWithoutLocationFinancialsInput
  }

  export type LocationFinancialUncheckedCreateWithoutLocationInput = {
    id?: string
    clinicId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialCreateOrConnectWithoutLocationInput = {
    where: LocationFinancialWhereUniqueInput
    create: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput>
  }

  export type LocationFinancialCreateManyLocationInputEnvelope = {
    data: LocationFinancialCreateManyLocationInput | LocationFinancialCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type ProviderLocationCreateWithoutLocationInput = {
    id?: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
    provider: ProviderCreateNestedOneWithoutProviderLocationsInput
  }

  export type ProviderLocationUncheckedCreateWithoutLocationInput = {
    id?: string
    providerId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type ProviderLocationCreateOrConnectWithoutLocationInput = {
    where: ProviderLocationWhereUniqueInput
    create: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput>
  }

  export type ProviderLocationCreateManyLocationInputEnvelope = {
    data: ProviderLocationCreateManyLocationInput | ProviderLocationCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type ClinicUpsertWithoutLocationsInput = {
    update: XOR<ClinicUpdateWithoutLocationsInput, ClinicUncheckedUpdateWithoutLocationsInput>
    create: XOR<ClinicCreateWithoutLocationsInput, ClinicUncheckedCreateWithoutLocationsInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutLocationsInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutLocationsInput, ClinicUncheckedUpdateWithoutLocationsInput>
  }

  export type ClinicUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type LocationFinancialUpsertWithWhereUniqueWithoutLocationInput = {
    where: LocationFinancialWhereUniqueInput
    update: XOR<LocationFinancialUpdateWithoutLocationInput, LocationFinancialUncheckedUpdateWithoutLocationInput>
    create: XOR<LocationFinancialCreateWithoutLocationInput, LocationFinancialUncheckedCreateWithoutLocationInput>
  }

  export type LocationFinancialUpdateWithWhereUniqueWithoutLocationInput = {
    where: LocationFinancialWhereUniqueInput
    data: XOR<LocationFinancialUpdateWithoutLocationInput, LocationFinancialUncheckedUpdateWithoutLocationInput>
  }

  export type LocationFinancialUpdateManyWithWhereWithoutLocationInput = {
    where: LocationFinancialScalarWhereInput
    data: XOR<LocationFinancialUpdateManyMutationInput, LocationFinancialUncheckedUpdateManyWithoutLocationInput>
  }

  export type ProviderLocationUpsertWithWhereUniqueWithoutLocationInput = {
    where: ProviderLocationWhereUniqueInput
    update: XOR<ProviderLocationUpdateWithoutLocationInput, ProviderLocationUncheckedUpdateWithoutLocationInput>
    create: XOR<ProviderLocationCreateWithoutLocationInput, ProviderLocationUncheckedCreateWithoutLocationInput>
  }

  export type ProviderLocationUpdateWithWhereUniqueWithoutLocationInput = {
    where: ProviderLocationWhereUniqueInput
    data: XOR<ProviderLocationUpdateWithoutLocationInput, ProviderLocationUncheckedUpdateWithoutLocationInput>
  }

  export type ProviderLocationUpdateManyWithWhereWithoutLocationInput = {
    where: ProviderLocationScalarWhereInput
    data: XOR<ProviderLocationUpdateManyMutationInput, ProviderLocationUncheckedUpdateManyWithoutLocationInput>
  }

  export type ProviderCreateWithoutProviderLocationsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutProviderLocationsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutProviderLocationsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutProviderLocationsInput, ProviderUncheckedCreateWithoutProviderLocationsInput>
  }

  export type LocationCreateWithoutProvidersInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationsInput
    financials?: LocationFinancialCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutProvidersInput = {
    id?: string
    clinicId: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    financials?: LocationFinancialUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutProvidersInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutProvidersInput, LocationUncheckedCreateWithoutProvidersInput>
  }

  export type ProviderUpsertWithoutProviderLocationsInput = {
    update: XOR<ProviderUpdateWithoutProviderLocationsInput, ProviderUncheckedUpdateWithoutProviderLocationsInput>
    create: XOR<ProviderCreateWithoutProviderLocationsInput, ProviderUncheckedCreateWithoutProviderLocationsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutProviderLocationsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutProviderLocationsInput, ProviderUncheckedUpdateWithoutProviderLocationsInput>
  }

  export type ProviderUpdateWithoutProviderLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutProviderLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type LocationUpsertWithoutProvidersInput = {
    update: XOR<LocationUpdateWithoutProvidersInput, LocationUncheckedUpdateWithoutProvidersInput>
    create: XOR<LocationCreateWithoutProvidersInput, LocationUncheckedCreateWithoutProvidersInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutProvidersInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutProvidersInput, LocationUncheckedUpdateWithoutProvidersInput>
  }

  export type LocationUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationsNestedInput
    financials?: LocationFinancialUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financials?: LocationFinancialUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type ClinicCreateWithoutLocationFinancialsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutLocationFinancialsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutLocationFinancialsInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutLocationFinancialsInput, ClinicUncheckedCreateWithoutLocationFinancialsInput>
  }

  export type LocationCreateWithoutFinancialsInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationsInput
    providers?: ProviderLocationCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutFinancialsInput = {
    id?: string
    clinicId: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    providers?: ProviderLocationUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutFinancialsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutFinancialsInput, LocationUncheckedCreateWithoutFinancialsInput>
  }

  export type DataSourceCreateWithoutLocationFinancialsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutLocationFinancialsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutLocationFinancialsInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutLocationFinancialsInput, DataSourceUncheckedCreateWithoutLocationFinancialsInput>
  }

  export type ClinicUpsertWithoutLocationFinancialsInput = {
    update: XOR<ClinicUpdateWithoutLocationFinancialsInput, ClinicUncheckedUpdateWithoutLocationFinancialsInput>
    create: XOR<ClinicCreateWithoutLocationFinancialsInput, ClinicUncheckedCreateWithoutLocationFinancialsInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutLocationFinancialsInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutLocationFinancialsInput, ClinicUncheckedUpdateWithoutLocationFinancialsInput>
  }

  export type ClinicUpdateWithoutLocationFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutLocationFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type LocationUpsertWithoutFinancialsInput = {
    update: XOR<LocationUpdateWithoutFinancialsInput, LocationUncheckedUpdateWithoutFinancialsInput>
    create: XOR<LocationCreateWithoutFinancialsInput, LocationUncheckedCreateWithoutFinancialsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutFinancialsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutFinancialsInput, LocationUncheckedUpdateWithoutFinancialsInput>
  }

  export type LocationUpdateWithoutFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationsNestedInput
    providers?: ProviderLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providers?: ProviderLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type DataSourceUpsertWithoutLocationFinancialsInput = {
    update: XOR<DataSourceUpdateWithoutLocationFinancialsInput, DataSourceUncheckedUpdateWithoutLocationFinancialsInput>
    create: XOR<DataSourceCreateWithoutLocationFinancialsInput, DataSourceUncheckedCreateWithoutLocationFinancialsInput>
    where?: DataSourceWhereInput
  }

  export type DataSourceUpdateToOneWithWhereWithoutLocationFinancialsInput = {
    where?: DataSourceWhereInput
    data: XOR<DataSourceUpdateWithoutLocationFinancialsInput, DataSourceUncheckedUpdateWithoutLocationFinancialsInput>
  }

  export type DataSourceUpdateWithoutLocationFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutLocationFinancialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type MetricValueCreateWithoutMetricDefinitionInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic?: ClinicCreateNestedOneWithoutMetricsInput
    provider?: ProviderCreateNestedOneWithoutMetricsInput
    dataSource?: DataSourceCreateNestedOneWithoutMetricsInput
  }

  export type MetricValueUncheckedCreateWithoutMetricDefinitionInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId?: string | null
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type MetricValueCreateOrConnectWithoutMetricDefinitionInput = {
    where: MetricValueWhereUniqueInput
    create: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type MetricValueCreateManyMetricDefinitionInputEnvelope = {
    data: MetricValueCreateManyMetricDefinitionInput | MetricValueCreateManyMetricDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type ColumnMappingCreateWithoutMetricDefinitionInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSource: DataSourceCreateNestedOneWithoutColumnMappingsInput
  }

  export type ColumnMappingUncheckedCreateWithoutMetricDefinitionInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSourceId: string
  }

  export type ColumnMappingCreateOrConnectWithoutMetricDefinitionInput = {
    where: ColumnMappingWhereUniqueInput
    create: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type ColumnMappingCreateManyMetricDefinitionInputEnvelope = {
    data: ColumnMappingCreateManyMetricDefinitionInput | ColumnMappingCreateManyMetricDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutMetricDefinitionInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic?: ClinicCreateNestedOneWithoutGoalsInput
    provider?: ProviderCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateWithoutMetricDefinitionInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId?: string | null
    providerId?: string | null
  }

  export type GoalCreateOrConnectWithoutMetricDefinitionInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type GoalCreateManyMetricDefinitionInputEnvelope = {
    data: GoalCreateManyMetricDefinitionInput | GoalCreateManyMetricDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type WidgetCreateWithoutMetricDefinitionInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboard: DashboardCreateNestedOneWithoutWidgetsInput
  }

  export type WidgetUncheckedCreateWithoutMetricDefinitionInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboardId: string
  }

  export type WidgetCreateOrConnectWithoutMetricDefinitionInput = {
    where: WidgetWhereUniqueInput
    create: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type WidgetCreateManyMetricDefinitionInputEnvelope = {
    data: WidgetCreateManyMetricDefinitionInput | WidgetCreateManyMetricDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type MetricValueUpsertWithWhereUniqueWithoutMetricDefinitionInput = {
    where: MetricValueWhereUniqueInput
    update: XOR<MetricValueUpdateWithoutMetricDefinitionInput, MetricValueUncheckedUpdateWithoutMetricDefinitionInput>
    create: XOR<MetricValueCreateWithoutMetricDefinitionInput, MetricValueUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type MetricValueUpdateWithWhereUniqueWithoutMetricDefinitionInput = {
    where: MetricValueWhereUniqueInput
    data: XOR<MetricValueUpdateWithoutMetricDefinitionInput, MetricValueUncheckedUpdateWithoutMetricDefinitionInput>
  }

  export type MetricValueUpdateManyWithWhereWithoutMetricDefinitionInput = {
    where: MetricValueScalarWhereInput
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyWithoutMetricDefinitionInput>
  }

  export type ColumnMappingUpsertWithWhereUniqueWithoutMetricDefinitionInput = {
    where: ColumnMappingWhereUniqueInput
    update: XOR<ColumnMappingUpdateWithoutMetricDefinitionInput, ColumnMappingUncheckedUpdateWithoutMetricDefinitionInput>
    create: XOR<ColumnMappingCreateWithoutMetricDefinitionInput, ColumnMappingUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type ColumnMappingUpdateWithWhereUniqueWithoutMetricDefinitionInput = {
    where: ColumnMappingWhereUniqueInput
    data: XOR<ColumnMappingUpdateWithoutMetricDefinitionInput, ColumnMappingUncheckedUpdateWithoutMetricDefinitionInput>
  }

  export type ColumnMappingUpdateManyWithWhereWithoutMetricDefinitionInput = {
    where: ColumnMappingScalarWhereInput
    data: XOR<ColumnMappingUpdateManyMutationInput, ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionInput>
  }

  export type ColumnMappingScalarWhereInput = {
    AND?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
    OR?: ColumnMappingScalarWhereInput[]
    NOT?: ColumnMappingScalarWhereInput | ColumnMappingScalarWhereInput[]
    id?: StringFilter<"ColumnMapping"> | string
    columnName?: StringFilter<"ColumnMapping"> | string
    transformationRule?: StringNullableFilter<"ColumnMapping"> | string | null
    createdAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    updatedAt?: DateTimeFilter<"ColumnMapping"> | Date | string
    dataSourceId?: StringFilter<"ColumnMapping"> | string
    metricDefinitionId?: StringFilter<"ColumnMapping"> | string
  }

  export type GoalUpsertWithWhereUniqueWithoutMetricDefinitionInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutMetricDefinitionInput, GoalUncheckedUpdateWithoutMetricDefinitionInput>
    create: XOR<GoalCreateWithoutMetricDefinitionInput, GoalUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutMetricDefinitionInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutMetricDefinitionInput, GoalUncheckedUpdateWithoutMetricDefinitionInput>
  }

  export type GoalUpdateManyWithWhereWithoutMetricDefinitionInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutMetricDefinitionInput>
  }

  export type WidgetUpsertWithWhereUniqueWithoutMetricDefinitionInput = {
    where: WidgetWhereUniqueInput
    update: XOR<WidgetUpdateWithoutMetricDefinitionInput, WidgetUncheckedUpdateWithoutMetricDefinitionInput>
    create: XOR<WidgetCreateWithoutMetricDefinitionInput, WidgetUncheckedCreateWithoutMetricDefinitionInput>
  }

  export type WidgetUpdateWithWhereUniqueWithoutMetricDefinitionInput = {
    where: WidgetWhereUniqueInput
    data: XOR<WidgetUpdateWithoutMetricDefinitionInput, WidgetUncheckedUpdateWithoutMetricDefinitionInput>
  }

  export type WidgetUpdateManyWithWhereWithoutMetricDefinitionInput = {
    where: WidgetScalarWhereInput
    data: XOR<WidgetUpdateManyMutationInput, WidgetUncheckedUpdateManyWithoutMetricDefinitionInput>
  }

  export type WidgetScalarWhereInput = {
    AND?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
    OR?: WidgetScalarWhereInput[]
    NOT?: WidgetScalarWhereInput | WidgetScalarWhereInput[]
    id?: StringFilter<"Widget"> | string
    widgetType?: StringFilter<"Widget"> | string
    chartType?: StringNullableFilter<"Widget"> | string | null
    positionX?: IntFilter<"Widget"> | number
    positionY?: IntFilter<"Widget"> | number
    width?: IntFilter<"Widget"> | number
    height?: IntFilter<"Widget"> | number
    config?: JsonNullableFilter<"Widget">
    createdAt?: DateTimeFilter<"Widget"> | Date | string
    updatedAt?: DateTimeFilter<"Widget"> | Date | string
    dashboardId?: StringFilter<"Widget"> | string
    metricDefinitionId?: StringNullableFilter<"Widget"> | string | null
  }

  export type ColumnMappingCreateWithoutDataSourceInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutColumnMappingsInput
  }

  export type ColumnMappingUncheckedCreateWithoutDataSourceInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
  }

  export type ColumnMappingCreateOrConnectWithoutDataSourceInput = {
    where: ColumnMappingWhereUniqueInput
    create: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput>
  }

  export type ColumnMappingCreateManyDataSourceInputEnvelope = {
    data: ColumnMappingCreateManyDataSourceInput | ColumnMappingCreateManyDataSourceInput[]
    skipDuplicates?: boolean
  }

  export type MetricValueCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition: MetricDefinitionCreateNestedOneWithoutMetricsInput
    clinic?: ClinicCreateNestedOneWithoutMetricsInput
    provider?: ProviderCreateNestedOneWithoutMetricsInput
  }

  export type MetricValueUncheckedCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
  }

  export type MetricValueCreateOrConnectWithoutDataSourceInput = {
    where: MetricValueWhereUniqueInput
    create: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput>
  }

  export type MetricValueCreateManyDataSourceInputEnvelope = {
    data: MetricValueCreateManyDataSourceInput | MetricValueCreateManyDataSourceInput[]
    skipDuplicates?: boolean
  }

  export type HygieneProductionCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutHygieneProductionInput
    provider?: ProviderCreateNestedOneWithoutHygieneProductionInput
  }

  export type HygieneProductionUncheckedCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
  }

  export type HygieneProductionCreateOrConnectWithoutDataSourceInput = {
    where: HygieneProductionWhereUniqueInput
    create: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput>
  }

  export type HygieneProductionCreateManyDataSourceInputEnvelope = {
    data: HygieneProductionCreateManyDataSourceInput | HygieneProductionCreateManyDataSourceInput[]
    skipDuplicates?: boolean
  }

  export type DentistProductionCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutDentistProductionInput
    provider?: ProviderCreateNestedOneWithoutDentistProductionInput
  }

  export type DentistProductionUncheckedCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
  }

  export type DentistProductionCreateOrConnectWithoutDataSourceInput = {
    where: DentistProductionWhereUniqueInput
    create: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput>
  }

  export type DentistProductionCreateManyDataSourceInputEnvelope = {
    data: DentistProductionCreateManyDataSourceInput | DentistProductionCreateManyDataSourceInput[]
    skipDuplicates?: boolean
  }

  export type LocationFinancialCreateWithoutDataSourceInput = {
    id?: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutLocationFinancialsInput
    location: LocationCreateNestedOneWithoutFinancialsInput
  }

  export type LocationFinancialUncheckedCreateWithoutDataSourceInput = {
    id?: string
    clinicId: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialCreateOrConnectWithoutDataSourceInput = {
    where: LocationFinancialWhereUniqueInput
    create: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput>
  }

  export type LocationFinancialCreateManyDataSourceInputEnvelope = {
    data: LocationFinancialCreateManyDataSourceInput | LocationFinancialCreateManyDataSourceInput[]
    skipDuplicates?: boolean
  }

  export type ClinicCreateWithoutDataSourcesInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutDataSourcesInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutDataSourcesInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutDataSourcesInput, ClinicUncheckedCreateWithoutDataSourcesInput>
  }

  export type ProviderCreateWithoutDataSourcesInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutDataSourcesInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutDataSourcesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutDataSourcesInput, ProviderUncheckedCreateWithoutDataSourcesInput>
  }

  export type ColumnMappingUpsertWithWhereUniqueWithoutDataSourceInput = {
    where: ColumnMappingWhereUniqueInput
    update: XOR<ColumnMappingUpdateWithoutDataSourceInput, ColumnMappingUncheckedUpdateWithoutDataSourceInput>
    create: XOR<ColumnMappingCreateWithoutDataSourceInput, ColumnMappingUncheckedCreateWithoutDataSourceInput>
  }

  export type ColumnMappingUpdateWithWhereUniqueWithoutDataSourceInput = {
    where: ColumnMappingWhereUniqueInput
    data: XOR<ColumnMappingUpdateWithoutDataSourceInput, ColumnMappingUncheckedUpdateWithoutDataSourceInput>
  }

  export type ColumnMappingUpdateManyWithWhereWithoutDataSourceInput = {
    where: ColumnMappingScalarWhereInput
    data: XOR<ColumnMappingUpdateManyMutationInput, ColumnMappingUncheckedUpdateManyWithoutDataSourceInput>
  }

  export type MetricValueUpsertWithWhereUniqueWithoutDataSourceInput = {
    where: MetricValueWhereUniqueInput
    update: XOR<MetricValueUpdateWithoutDataSourceInput, MetricValueUncheckedUpdateWithoutDataSourceInput>
    create: XOR<MetricValueCreateWithoutDataSourceInput, MetricValueUncheckedCreateWithoutDataSourceInput>
  }

  export type MetricValueUpdateWithWhereUniqueWithoutDataSourceInput = {
    where: MetricValueWhereUniqueInput
    data: XOR<MetricValueUpdateWithoutDataSourceInput, MetricValueUncheckedUpdateWithoutDataSourceInput>
  }

  export type MetricValueUpdateManyWithWhereWithoutDataSourceInput = {
    where: MetricValueScalarWhereInput
    data: XOR<MetricValueUpdateManyMutationInput, MetricValueUncheckedUpdateManyWithoutDataSourceInput>
  }

  export type HygieneProductionUpsertWithWhereUniqueWithoutDataSourceInput = {
    where: HygieneProductionWhereUniqueInput
    update: XOR<HygieneProductionUpdateWithoutDataSourceInput, HygieneProductionUncheckedUpdateWithoutDataSourceInput>
    create: XOR<HygieneProductionCreateWithoutDataSourceInput, HygieneProductionUncheckedCreateWithoutDataSourceInput>
  }

  export type HygieneProductionUpdateWithWhereUniqueWithoutDataSourceInput = {
    where: HygieneProductionWhereUniqueInput
    data: XOR<HygieneProductionUpdateWithoutDataSourceInput, HygieneProductionUncheckedUpdateWithoutDataSourceInput>
  }

  export type HygieneProductionUpdateManyWithWhereWithoutDataSourceInput = {
    where: HygieneProductionScalarWhereInput
    data: XOR<HygieneProductionUpdateManyMutationInput, HygieneProductionUncheckedUpdateManyWithoutDataSourceInput>
  }

  export type DentistProductionUpsertWithWhereUniqueWithoutDataSourceInput = {
    where: DentistProductionWhereUniqueInput
    update: XOR<DentistProductionUpdateWithoutDataSourceInput, DentistProductionUncheckedUpdateWithoutDataSourceInput>
    create: XOR<DentistProductionCreateWithoutDataSourceInput, DentistProductionUncheckedCreateWithoutDataSourceInput>
  }

  export type DentistProductionUpdateWithWhereUniqueWithoutDataSourceInput = {
    where: DentistProductionWhereUniqueInput
    data: XOR<DentistProductionUpdateWithoutDataSourceInput, DentistProductionUncheckedUpdateWithoutDataSourceInput>
  }

  export type DentistProductionUpdateManyWithWhereWithoutDataSourceInput = {
    where: DentistProductionScalarWhereInput
    data: XOR<DentistProductionUpdateManyMutationInput, DentistProductionUncheckedUpdateManyWithoutDataSourceInput>
  }

  export type LocationFinancialUpsertWithWhereUniqueWithoutDataSourceInput = {
    where: LocationFinancialWhereUniqueInput
    update: XOR<LocationFinancialUpdateWithoutDataSourceInput, LocationFinancialUncheckedUpdateWithoutDataSourceInput>
    create: XOR<LocationFinancialCreateWithoutDataSourceInput, LocationFinancialUncheckedCreateWithoutDataSourceInput>
  }

  export type LocationFinancialUpdateWithWhereUniqueWithoutDataSourceInput = {
    where: LocationFinancialWhereUniqueInput
    data: XOR<LocationFinancialUpdateWithoutDataSourceInput, LocationFinancialUncheckedUpdateWithoutDataSourceInput>
  }

  export type LocationFinancialUpdateManyWithWhereWithoutDataSourceInput = {
    where: LocationFinancialScalarWhereInput
    data: XOR<LocationFinancialUpdateManyMutationInput, LocationFinancialUncheckedUpdateManyWithoutDataSourceInput>
  }

  export type ClinicUpsertWithoutDataSourcesInput = {
    update: XOR<ClinicUpdateWithoutDataSourcesInput, ClinicUncheckedUpdateWithoutDataSourcesInput>
    create: XOR<ClinicCreateWithoutDataSourcesInput, ClinicUncheckedCreateWithoutDataSourcesInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutDataSourcesInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutDataSourcesInput, ClinicUncheckedUpdateWithoutDataSourcesInput>
  }

  export type ClinicUpdateWithoutDataSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutDataSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ProviderUpsertWithoutDataSourcesInput = {
    update: XOR<ProviderUpdateWithoutDataSourcesInput, ProviderUncheckedUpdateWithoutDataSourcesInput>
    create: XOR<ProviderCreateWithoutDataSourcesInput, ProviderUncheckedCreateWithoutDataSourcesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutDataSourcesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutDataSourcesInput, ProviderUncheckedUpdateWithoutDataSourcesInput>
  }

  export type ProviderUpdateWithoutDataSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutDataSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type DataSourceCreateWithoutColumnMappingsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutColumnMappingsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutColumnMappingsInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutColumnMappingsInput, DataSourceUncheckedCreateWithoutColumnMappingsInput>
  }

  export type MetricDefinitionCreateWithoutColumnMappingsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUncheckedCreateWithoutColumnMappingsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalUncheckedCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetUncheckedCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionCreateOrConnectWithoutColumnMappingsInput = {
    where: MetricDefinitionWhereUniqueInput
    create: XOR<MetricDefinitionCreateWithoutColumnMappingsInput, MetricDefinitionUncheckedCreateWithoutColumnMappingsInput>
  }

  export type DataSourceUpsertWithoutColumnMappingsInput = {
    update: XOR<DataSourceUpdateWithoutColumnMappingsInput, DataSourceUncheckedUpdateWithoutColumnMappingsInput>
    create: XOR<DataSourceCreateWithoutColumnMappingsInput, DataSourceUncheckedCreateWithoutColumnMappingsInput>
    where?: DataSourceWhereInput
  }

  export type DataSourceUpdateToOneWithWhereWithoutColumnMappingsInput = {
    where?: DataSourceWhereInput
    data: XOR<DataSourceUpdateWithoutColumnMappingsInput, DataSourceUncheckedUpdateWithoutColumnMappingsInput>
  }

  export type DataSourceUpdateWithoutColumnMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutColumnMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type MetricDefinitionUpsertWithoutColumnMappingsInput = {
    update: XOR<MetricDefinitionUpdateWithoutColumnMappingsInput, MetricDefinitionUncheckedUpdateWithoutColumnMappingsInput>
    create: XOR<MetricDefinitionCreateWithoutColumnMappingsInput, MetricDefinitionUncheckedCreateWithoutColumnMappingsInput>
    where?: MetricDefinitionWhereInput
  }

  export type MetricDefinitionUpdateToOneWithWhereWithoutColumnMappingsInput = {
    where?: MetricDefinitionWhereInput
    data: XOR<MetricDefinitionUpdateWithoutColumnMappingsInput, MetricDefinitionUncheckedUpdateWithoutColumnMappingsInput>
  }

  export type MetricDefinitionUpdateWithoutColumnMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionUncheckedUpdateWithoutColumnMappingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUncheckedUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionCreateWithoutMetricsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalUncheckedCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetUncheckedCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionCreateOrConnectWithoutMetricsInput = {
    where: MetricDefinitionWhereUniqueInput
    create: XOR<MetricDefinitionCreateWithoutMetricsInput, MetricDefinitionUncheckedCreateWithoutMetricsInput>
  }

  export type ClinicCreateWithoutMetricsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutMetricsInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutMetricsInput, ClinicUncheckedCreateWithoutMetricsInput>
  }

  export type ProviderCreateWithoutMetricsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutMetricsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutMetricsInput, ProviderUncheckedCreateWithoutMetricsInput>
  }

  export type DataSourceCreateWithoutMetricsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutMetricsInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutMetricsInput, DataSourceUncheckedCreateWithoutMetricsInput>
  }

  export type MetricDefinitionUpsertWithoutMetricsInput = {
    update: XOR<MetricDefinitionUpdateWithoutMetricsInput, MetricDefinitionUncheckedUpdateWithoutMetricsInput>
    create: XOR<MetricDefinitionCreateWithoutMetricsInput, MetricDefinitionUncheckedCreateWithoutMetricsInput>
    where?: MetricDefinitionWhereInput
  }

  export type MetricDefinitionUpdateToOneWithWhereWithoutMetricsInput = {
    where?: MetricDefinitionWhereInput
    data: XOR<MetricDefinitionUpdateWithoutMetricsInput, MetricDefinitionUncheckedUpdateWithoutMetricsInput>
  }

  export type MetricDefinitionUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUncheckedUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type ClinicUpsertWithoutMetricsInput = {
    update: XOR<ClinicUpdateWithoutMetricsInput, ClinicUncheckedUpdateWithoutMetricsInput>
    create: XOR<ClinicCreateWithoutMetricsInput, ClinicUncheckedCreateWithoutMetricsInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutMetricsInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutMetricsInput, ClinicUncheckedUpdateWithoutMetricsInput>
  }

  export type ClinicUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ProviderUpsertWithoutMetricsInput = {
    update: XOR<ProviderUpdateWithoutMetricsInput, ProviderUncheckedUpdateWithoutMetricsInput>
    create: XOR<ProviderCreateWithoutMetricsInput, ProviderUncheckedCreateWithoutMetricsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutMetricsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutMetricsInput, ProviderUncheckedUpdateWithoutMetricsInput>
  }

  export type ProviderUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type DataSourceUpsertWithoutMetricsInput = {
    update: XOR<DataSourceUpdateWithoutMetricsInput, DataSourceUncheckedUpdateWithoutMetricsInput>
    create: XOR<DataSourceCreateWithoutMetricsInput, DataSourceUncheckedCreateWithoutMetricsInput>
    where?: DataSourceWhereInput
  }

  export type DataSourceUpdateToOneWithWhereWithoutMetricsInput = {
    where?: DataSourceWhereInput
    data: XOR<DataSourceUpdateWithoutMetricsInput, DataSourceUncheckedUpdateWithoutMetricsInput>
  }

  export type DataSourceUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type MetricDefinitionCreateWithoutGoalsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutMetricDefinitionInput
    widgets?: WidgetUncheckedCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionCreateOrConnectWithoutGoalsInput = {
    where: MetricDefinitionWhereUniqueInput
    create: XOR<MetricDefinitionCreateWithoutGoalsInput, MetricDefinitionUncheckedCreateWithoutGoalsInput>
  }

  export type ClinicCreateWithoutGoalsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutGoalsInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutGoalsInput, ClinicUncheckedCreateWithoutGoalsInput>
  }

  export type ProviderCreateWithoutGoalsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutGoalsInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutGoalsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutGoalsInput, ProviderUncheckedCreateWithoutGoalsInput>
  }

  export type MetricDefinitionUpsertWithoutGoalsInput = {
    update: XOR<MetricDefinitionUpdateWithoutGoalsInput, MetricDefinitionUncheckedUpdateWithoutGoalsInput>
    create: XOR<MetricDefinitionCreateWithoutGoalsInput, MetricDefinitionUncheckedCreateWithoutGoalsInput>
    where?: MetricDefinitionWhereInput
  }

  export type MetricDefinitionUpdateToOneWithWhereWithoutGoalsInput = {
    where?: MetricDefinitionWhereInput
    data: XOR<MetricDefinitionUpdateWithoutGoalsInput, MetricDefinitionUncheckedUpdateWithoutGoalsInput>
  }

  export type MetricDefinitionUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    widgets?: WidgetUncheckedUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type ClinicUpsertWithoutGoalsInput = {
    update: XOR<ClinicUpdateWithoutGoalsInput, ClinicUncheckedUpdateWithoutGoalsInput>
    create: XOR<ClinicCreateWithoutGoalsInput, ClinicUncheckedCreateWithoutGoalsInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutGoalsInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutGoalsInput, ClinicUncheckedUpdateWithoutGoalsInput>
  }

  export type ClinicUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ProviderUpsertWithoutGoalsInput = {
    update: XOR<ProviderUpdateWithoutGoalsInput, ProviderUncheckedUpdateWithoutGoalsInput>
    create: XOR<ProviderCreateWithoutGoalsInput, ProviderUncheckedCreateWithoutGoalsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutGoalsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutGoalsInput, ProviderUncheckedUpdateWithoutGoalsInput>
  }

  export type ProviderUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type UserCreateWithoutDashboardsInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    clinic?: ClinicCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutDashboardsInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
    clinicId?: string | null
  }

  export type UserCreateOrConnectWithoutDashboardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDashboardsInput, UserUncheckedCreateWithoutDashboardsInput>
  }

  export type WidgetCreateWithoutDashboardInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinition?: MetricDefinitionCreateNestedOneWithoutWidgetsInput
  }

  export type WidgetUncheckedCreateWithoutDashboardInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId?: string | null
  }

  export type WidgetCreateOrConnectWithoutDashboardInput = {
    where: WidgetWhereUniqueInput
    create: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput>
  }

  export type WidgetCreateManyDashboardInputEnvelope = {
    data: WidgetCreateManyDashboardInput | WidgetCreateManyDashboardInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDashboardsInput = {
    update: XOR<UserUpdateWithoutDashboardsInput, UserUncheckedUpdateWithoutDashboardsInput>
    create: XOR<UserCreateWithoutDashboardsInput, UserUncheckedCreateWithoutDashboardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDashboardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDashboardsInput, UserUncheckedUpdateWithoutDashboardsInput>
  }

  export type UserUpdateWithoutDashboardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    clinic?: ClinicUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutDashboardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WidgetUpsertWithWhereUniqueWithoutDashboardInput = {
    where: WidgetWhereUniqueInput
    update: XOR<WidgetUpdateWithoutDashboardInput, WidgetUncheckedUpdateWithoutDashboardInput>
    create: XOR<WidgetCreateWithoutDashboardInput, WidgetUncheckedCreateWithoutDashboardInput>
  }

  export type WidgetUpdateWithWhereUniqueWithoutDashboardInput = {
    where: WidgetWhereUniqueInput
    data: XOR<WidgetUpdateWithoutDashboardInput, WidgetUncheckedUpdateWithoutDashboardInput>
  }

  export type WidgetUpdateManyWithWhereWithoutDashboardInput = {
    where: WidgetScalarWhereInput
    data: XOR<WidgetUpdateManyMutationInput, WidgetUncheckedUpdateManyWithoutDashboardInput>
  }

  export type DashboardCreateWithoutWidgetsInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    user: UserCreateNestedOneWithoutDashboardsInput
  }

  export type DashboardUncheckedCreateWithoutWidgetsInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
    userId: string
  }

  export type DashboardCreateOrConnectWithoutWidgetsInput = {
    where: DashboardWhereUniqueInput
    create: XOR<DashboardCreateWithoutWidgetsInput, DashboardUncheckedCreateWithoutWidgetsInput>
  }

  export type MetricDefinitionCreateWithoutWidgetsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionUncheckedCreateWithoutWidgetsInput = {
    id?: string
    name: string
    description: string
    dataType: string
    calculationFormula?: string | null
    category: string
    isComposite: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutMetricDefinitionInput
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutMetricDefinitionInput
    goals?: GoalUncheckedCreateNestedManyWithoutMetricDefinitionInput
  }

  export type MetricDefinitionCreateOrConnectWithoutWidgetsInput = {
    where: MetricDefinitionWhereUniqueInput
    create: XOR<MetricDefinitionCreateWithoutWidgetsInput, MetricDefinitionUncheckedCreateWithoutWidgetsInput>
  }

  export type DashboardUpsertWithoutWidgetsInput = {
    update: XOR<DashboardUpdateWithoutWidgetsInput, DashboardUncheckedUpdateWithoutWidgetsInput>
    create: XOR<DashboardCreateWithoutWidgetsInput, DashboardUncheckedCreateWithoutWidgetsInput>
    where?: DashboardWhereInput
  }

  export type DashboardUpdateToOneWithWhereWithoutWidgetsInput = {
    where?: DashboardWhereInput
    data: XOR<DashboardUpdateWithoutWidgetsInput, DashboardUncheckedUpdateWithoutWidgetsInput>
  }

  export type DashboardUpdateWithoutWidgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutDashboardsNestedInput
  }

  export type DashboardUncheckedUpdateWithoutWidgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MetricDefinitionUpsertWithoutWidgetsInput = {
    update: XOR<MetricDefinitionUpdateWithoutWidgetsInput, MetricDefinitionUncheckedUpdateWithoutWidgetsInput>
    create: XOR<MetricDefinitionCreateWithoutWidgetsInput, MetricDefinitionUncheckedCreateWithoutWidgetsInput>
    where?: MetricDefinitionWhereInput
  }

  export type MetricDefinitionUpdateToOneWithWhereWithoutWidgetsInput = {
    where?: MetricDefinitionWhereInput
    data: XOR<MetricDefinitionUpdateWithoutWidgetsInput, MetricDefinitionUncheckedUpdateWithoutWidgetsInput>
  }

  export type MetricDefinitionUpdateWithoutWidgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type MetricDefinitionUncheckedUpdateWithoutWidgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    calculationFormula?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    isComposite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionNestedInput
    goals?: GoalUncheckedUpdateManyWithoutMetricDefinitionNestedInput
  }

  export type ClinicCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutHygieneProductionInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutHygieneProductionInput, ClinicUncheckedCreateWithoutHygieneProductionInput>
  }

  export type ProviderCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutHygieneProductionInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutHygieneProductionInput, ProviderUncheckedCreateWithoutHygieneProductionInput>
  }

  export type DataSourceCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutHygieneProductionInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    dentistProduction?: DentistProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutHygieneProductionInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutHygieneProductionInput, DataSourceUncheckedCreateWithoutHygieneProductionInput>
  }

  export type ClinicUpsertWithoutHygieneProductionInput = {
    update: XOR<ClinicUpdateWithoutHygieneProductionInput, ClinicUncheckedUpdateWithoutHygieneProductionInput>
    create: XOR<ClinicCreateWithoutHygieneProductionInput, ClinicUncheckedCreateWithoutHygieneProductionInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutHygieneProductionInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutHygieneProductionInput, ClinicUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type ClinicUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ProviderUpsertWithoutHygieneProductionInput = {
    update: XOR<ProviderUpdateWithoutHygieneProductionInput, ProviderUncheckedUpdateWithoutHygieneProductionInput>
    create: XOR<ProviderCreateWithoutHygieneProductionInput, ProviderUncheckedCreateWithoutHygieneProductionInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutHygieneProductionInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutHygieneProductionInput, ProviderUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type ProviderUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type DataSourceUpsertWithoutHygieneProductionInput = {
    update: XOR<DataSourceUpdateWithoutHygieneProductionInput, DataSourceUncheckedUpdateWithoutHygieneProductionInput>
    create: XOR<DataSourceCreateWithoutHygieneProductionInput, DataSourceUncheckedCreateWithoutHygieneProductionInput>
    where?: DataSourceWhereInput
  }

  export type DataSourceUpdateToOneWithWhereWithoutHygieneProductionInput = {
    where?: DataSourceWhereInput
    data: XOR<DataSourceUpdateWithoutHygieneProductionInput, DataSourceUncheckedUpdateWithoutHygieneProductionInput>
  }

  export type DataSourceUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutHygieneProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type ClinicCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserCreateNestedManyWithoutClinicInput
    providers?: ProviderCreateNestedManyWithoutClinicInput
    metrics?: MetricValueCreateNestedManyWithoutClinicInput
    goals?: GoalCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutClinicInput
    locations?: LocationCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutClinicInput
  }

  export type ClinicUncheckedCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    location: string
    status: string
    registrationCode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutClinicInput
    providers?: ProviderUncheckedCreateNestedManyWithoutClinicInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutClinicInput
    goals?: GoalUncheckedCreateNestedManyWithoutClinicInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutClinicInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutClinicInput
    locations?: LocationUncheckedCreateNestedManyWithoutClinicInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutClinicInput
  }

  export type ClinicCreateOrConnectWithoutDentistProductionInput = {
    where: ClinicWhereUniqueInput
    create: XOR<ClinicCreateWithoutDentistProductionInput, ClinicUncheckedCreateWithoutDentistProductionInput>
  }

  export type ProviderCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinic: ClinicCreateNestedOneWithoutProvidersInput
    metrics?: MetricValueCreateNestedManyWithoutProviderInput
    goals?: GoalCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    metrics?: MetricValueUncheckedCreateNestedManyWithoutProviderInput
    goals?: GoalUncheckedCreateNestedManyWithoutProviderInput
    dataSources?: DataSourceUncheckedCreateNestedManyWithoutProviderInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutProviderInput
    providerLocations?: ProviderLocationUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutDentistProductionInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutDentistProductionInput, ProviderUncheckedCreateWithoutDentistProductionInput>
  }

  export type DataSourceCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columnMappings?: ColumnMappingCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialCreateNestedManyWithoutDataSourceInput
    clinic: ClinicCreateNestedOneWithoutDataSourcesInput
    provider?: ProviderCreateNestedOneWithoutDataSourcesInput
  }

  export type DataSourceUncheckedCreateWithoutDentistProductionInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
    columnMappings?: ColumnMappingUncheckedCreateNestedManyWithoutDataSourceInput
    metrics?: MetricValueUncheckedCreateNestedManyWithoutDataSourceInput
    hygieneProduction?: HygieneProductionUncheckedCreateNestedManyWithoutDataSourceInput
    locationFinancials?: LocationFinancialUncheckedCreateNestedManyWithoutDataSourceInput
  }

  export type DataSourceCreateOrConnectWithoutDentistProductionInput = {
    where: DataSourceWhereUniqueInput
    create: XOR<DataSourceCreateWithoutDentistProductionInput, DataSourceUncheckedCreateWithoutDentistProductionInput>
  }

  export type ClinicUpsertWithoutDentistProductionInput = {
    update: XOR<ClinicUpdateWithoutDentistProductionInput, ClinicUncheckedUpdateWithoutDentistProductionInput>
    create: XOR<ClinicCreateWithoutDentistProductionInput, ClinicUncheckedCreateWithoutDentistProductionInput>
    where?: ClinicWhereInput
  }

  export type ClinicUpdateToOneWithWhereWithoutDentistProductionInput = {
    where?: ClinicWhereInput
    data: XOR<ClinicUpdateWithoutDentistProductionInput, ClinicUncheckedUpdateWithoutDentistProductionInput>
  }

  export type ClinicUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutClinicNestedInput
    providers?: ProviderUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUpdateManyWithoutClinicNestedInput
    goals?: GoalUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutClinicNestedInput
    locations?: LocationUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutClinicNestedInput
  }

  export type ClinicUncheckedUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registrationCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutClinicNestedInput
    providers?: ProviderUncheckedUpdateManyWithoutClinicNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutClinicNestedInput
    goals?: GoalUncheckedUpdateManyWithoutClinicNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutClinicNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutClinicNestedInput
    locations?: LocationUncheckedUpdateManyWithoutClinicNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutClinicNestedInput
  }

  export type ProviderUpsertWithoutDentistProductionInput = {
    update: XOR<ProviderUpdateWithoutDentistProductionInput, ProviderUncheckedUpdateWithoutDentistProductionInput>
    create: XOR<ProviderCreateWithoutDentistProductionInput, ProviderUncheckedCreateWithoutDentistProductionInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutDentistProductionInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutDentistProductionInput, ProviderUncheckedUpdateWithoutDentistProductionInput>
  }

  export type ProviderUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutProvidersNestedInput
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type DataSourceUpsertWithoutDentistProductionInput = {
    update: XOR<DataSourceUpdateWithoutDentistProductionInput, DataSourceUncheckedUpdateWithoutDentistProductionInput>
    create: XOR<DataSourceCreateWithoutDentistProductionInput, DataSourceUncheckedCreateWithoutDentistProductionInput>
    where?: DataSourceWhereInput
  }

  export type DataSourceUpdateToOneWithWhereWithoutDentistProductionInput = {
    where?: DataSourceWhereInput
    data: XOR<DataSourceUpdateWithoutDentistProductionInput, DataSourceUncheckedUpdateWithoutDentistProductionInput>
  }

  export type DataSourceUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutDentistProductionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type UserCreateManyClinicInput = {
    id?: string
    email: string
    name: string
    role: string
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    authId?: string | null
    uuidId?: string | null
  }

  export type ProviderCreateManyClinicInput = {
    id?: string
    name: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    providerType: string
    position?: string | null
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricValueCreateManyClinicInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type GoalCreateManyClinicInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    providerId?: string | null
  }

  export type DataSourceCreateManyClinicInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
  }

  export type HygieneProductionCreateManyClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type DentistProductionCreateManyClinicInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type LocationCreateManyClinicInput = {
    id?: string
    name: string
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationFinancialCreateManyClinicInput = {
    id?: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: DashboardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    dashboards?: DashboardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authId?: NullableStringFieldUpdateOperationsInput | string | null
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUpdateManyWithoutProviderNestedInput
    goals?: GoalUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: MetricValueUncheckedUpdateManyWithoutProviderNestedInput
    goals?: GoalUncheckedUpdateManyWithoutProviderNestedInput
    dataSources?: DataSourceUncheckedUpdateManyWithoutProviderNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutProviderNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutProviderNestedInput
    providerLocations?: ProviderLocationUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    providerType?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricValueUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutMetricsNestedInput
    provider?: ProviderUpdateOneWithoutMetricsNestedInput
    dataSource?: DataSourceUpdateOneWithoutMetricsNestedInput
  }

  export type MetricValueUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutGoalsNestedInput
    provider?: ProviderUpdateOneWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DataSourceUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    provider?: ProviderUpdateOneWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type DataSourceUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutHygieneProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutHygieneProductionNestedInput
  }

  export type HygieneProductionUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneWithoutDentistProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutDentistProductionNestedInput
  }

  export type DentistProductionUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financials?: LocationFinancialUpdateManyWithoutLocationNestedInput
    providers?: ProviderLocationUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financials?: LocationFinancialUncheckedUpdateManyWithoutLocationNestedInput
    providers?: ProviderLocationUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutFinancialsNestedInput
    dataSource?: DataSourceUpdateOneWithoutLocationFinancialsNestedInput
  }

  export type LocationFinancialUncheckedUpdateWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialUncheckedUpdateManyWithoutClinicInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DashboardCreateManyUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    uuidId?: string | null
    userUuidId?: string | null
  }

  export type DashboardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    widgets?: WidgetUpdateManyWithoutDashboardNestedInput
  }

  export type DashboardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
    widgets?: WidgetUncheckedUpdateManyWithoutDashboardNestedInput
  }

  export type DashboardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    layoutConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuidId?: NullableStringFieldUpdateOperationsInput | string | null
    userUuidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueCreateManyProviderInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    dataSourceId?: string | null
  }

  export type GoalCreateManyProviderInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
  }

  export type DataSourceCreateManyProviderInput = {
    id?: string
    name: string
    spreadsheetId: string
    sheetName: string
    lastSyncedAt?: Date | string | null
    syncFrequency: string
    connectionStatus: string
    appScriptId?: string | null
    accessToken: string
    refreshToken?: string | null
    expiryDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
  }

  export type HygieneProductionCreateManyProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    dataSourceId?: string | null
  }

  export type DentistProductionCreateManyProviderInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    dataSourceId?: string | null
  }

  export type ProviderLocationCreateManyProviderInput = {
    id?: string
    locationId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type MetricValueUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutMetricsNestedInput
    clinic?: ClinicUpdateOneWithoutMetricsNestedInput
    dataSource?: DataSourceUpdateOneWithoutMetricsNestedInput
  }

  export type MetricValueUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutGoalsNestedInput
    clinic?: ClinicUpdateOneWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DataSourceUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columnMappings?: ColumnMappingUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUpdateManyWithoutDataSourceNestedInput
    clinic?: ClinicUpdateOneRequiredWithoutDataSourcesNestedInput
  }

  export type DataSourceUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    columnMappings?: ColumnMappingUncheckedUpdateManyWithoutDataSourceNestedInput
    metrics?: MetricValueUncheckedUpdateManyWithoutDataSourceNestedInput
    hygieneProduction?: HygieneProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    dentistProduction?: DentistProductionUncheckedUpdateManyWithoutDataSourceNestedInput
    locationFinancials?: LocationFinancialUncheckedUpdateManyWithoutDataSourceNestedInput
  }

  export type DataSourceUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    spreadsheetId?: StringFieldUpdateOperationsInput | string
    sheetName?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncFrequency?: StringFieldUpdateOperationsInput | string
    connectionStatus?: StringFieldUpdateOperationsInput | string
    appScriptId?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
  }

  export type HygieneProductionUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutHygieneProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutHygieneProductionNestedInput
  }

  export type HygieneProductionUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutDentistProductionNestedInput
    dataSource?: DataSourceUpdateOneWithoutDentistProductionNestedInput
  }

  export type DentistProductionUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderLocationUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutProvidersNestedInput
  }

  export type ProviderLocationUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProviderLocationUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LocationFinancialCreateManyLocationInput = {
    id?: string
    clinicId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    dataSourceId?: string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProviderLocationCreateManyLocationInput = {
    id?: string
    providerId: string
    isActive?: boolean
    startDate: Date | string
    endDate?: Date | string | null
    isPrimary?: boolean
  }

  export type LocationFinancialUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationFinancialsNestedInput
    dataSource?: DataSourceUpdateOneWithoutLocationFinancialsNestedInput
  }

  export type LocationFinancialUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderLocationUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    provider?: ProviderUpdateOneRequiredWithoutProviderLocationsNestedInput
  }

  export type ProviderLocationUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProviderLocationUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricValueCreateManyMetricDefinitionInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId?: string | null
    providerId?: string | null
    dataSourceId?: string | null
  }

  export type ColumnMappingCreateManyMetricDefinitionInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    dataSourceId: string
  }

  export type GoalCreateManyMetricDefinitionInput = {
    id?: string
    timePeriod: string
    startDate: Date | string
    endDate: Date | string
    targetValue: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId?: string | null
    providerId?: string | null
  }

  export type WidgetCreateManyMetricDefinitionInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dashboardId: string
  }

  export type MetricValueUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneWithoutMetricsNestedInput
    provider?: ProviderUpdateOneWithoutMetricsNestedInput
    dataSource?: DataSourceUpdateOneWithoutMetricsNestedInput
  }

  export type MetricValueUncheckedUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueUncheckedUpdateManyWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    dataSourceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColumnMappingUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSource?: DataSourceUpdateOneRequiredWithoutColumnMappingsNestedInput
  }

  export type ColumnMappingUncheckedUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSourceId?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnMappingUncheckedUpdateManyWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dataSourceId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneWithoutGoalsNestedInput
    provider?: ProviderUpdateOneWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    timePeriod?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetValue?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WidgetUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboard?: DashboardUpdateOneRequiredWithoutWidgetsNestedInput
  }

  export type WidgetUncheckedUpdateWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboardId?: StringFieldUpdateOperationsInput | string
  }

  export type WidgetUncheckedUpdateManyWithoutMetricDefinitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dashboardId?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnMappingCreateManyDataSourceInput = {
    id?: string
    columnName: string
    transformationRule?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
  }

  export type MetricValueCreateManyDataSourceInput = {
    id?: string
    date: Date | string
    value: string
    sourceType: string
    sourceSheet?: string | null
    externalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId: string
    clinicId?: string | null
    providerId?: string | null
  }

  export type HygieneProductionCreateManyDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    hoursWorked?: Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: Decimal | DecimalJsLike | number | string | null
    productionGoal?: Decimal | DecimalJsLike | number | string | null
    variancePercentage?: Decimal | DecimalJsLike | number | string | null
    bonusAmount?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
  }

  export type DentistProductionCreateManyDataSourceInput = {
    id?: string
    date: Date | string
    monthTab: string
    verifiedProductionHumble?: Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: Decimal | DecimalJsLike | number | string | null
    totalProduction?: Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: Decimal | DecimalJsLike | number | string | null
    productionPerHour?: Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: Decimal | DecimalJsLike | number | string | null
    providerName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicId: string
    providerId?: string | null
  }

  export type LocationFinancialCreateManyDataSourceInput = {
    id?: string
    clinicId: string
    locationId: string
    date: Date | string
    production: Decimal | DecimalJsLike | number | string
    adjustments: Decimal | DecimalJsLike | number | string
    writeOffs: Decimal | DecimalJsLike | number | string
    netProduction: Decimal | DecimalJsLike | number | string
    patientIncome: Decimal | DecimalJsLike | number | string
    insuranceIncome: Decimal | DecimalJsLike | number | string
    totalCollections: Decimal | DecimalJsLike | number | string
    unearned?: Decimal | DecimalJsLike | number | string | null
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ColumnMappingUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutColumnMappingsNestedInput
  }

  export type ColumnMappingUncheckedUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnMappingUncheckedUpdateManyWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    columnName?: StringFieldUpdateOperationsInput | string
    transformationRule?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
  }

  export type MetricValueUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneRequiredWithoutMetricsNestedInput
    clinic?: ClinicUpdateOneWithoutMetricsNestedInput
    provider?: ProviderUpdateOneWithoutMetricsNestedInput
  }

  export type MetricValueUncheckedUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricValueUncheckedUpdateManyWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: StringFieldUpdateOperationsInput | string
    sourceType?: StringFieldUpdateOperationsInput | string
    sourceSheet?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: StringFieldUpdateOperationsInput | string
    clinicId?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutHygieneProductionNestedInput
    provider?: ProviderUpdateOneWithoutHygieneProductionNestedInput
  }

  export type HygieneProductionUncheckedUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HygieneProductionUncheckedUpdateManyWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    hoursWorked?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    variancePercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bonusAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutDentistProductionNestedInput
    provider?: ProviderUpdateOneWithoutDentistProductionNestedInput
  }

  export type DentistProductionUncheckedUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DentistProductionUncheckedUpdateManyWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthTab?: StringFieldUpdateOperationsInput | string
    verifiedProductionHumble?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    verifiedProductionBaytown?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyGoal?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productionPerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgDailyProduction?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    providerName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationFinancialUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinic?: ClinicUpdateOneRequiredWithoutLocationFinancialsNestedInput
    location?: LocationUpdateOneRequiredWithoutFinancialsNestedInput
  }

  export type LocationFinancialUncheckedUpdateWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationFinancialUncheckedUpdateManyWithoutDataSourceInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    production?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    adjustments?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    writeOffs?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netProduction?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    patientIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    insuranceIncome?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalCollections?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    unearned?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WidgetCreateManyDashboardInput = {
    id?: string
    widgetType: string
    chartType?: string | null
    positionX: number
    positionY: number
    width: number
    height: number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    metricDefinitionId?: string | null
  }

  export type WidgetUpdateWithoutDashboardInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinition?: MetricDefinitionUpdateOneWithoutWidgetsNestedInput
  }

  export type WidgetUncheckedUpdateWithoutDashboardInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WidgetUncheckedUpdateManyWithoutDashboardInput = {
    id?: StringFieldUpdateOperationsInput | string
    widgetType?: StringFieldUpdateOperationsInput | string
    chartType?: NullableStringFieldUpdateOperationsInput | string | null
    positionX?: IntFieldUpdateOperationsInput | number
    positionY?: IntFieldUpdateOperationsInput | number
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    config?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metricDefinitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}