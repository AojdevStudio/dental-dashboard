
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  status: 'status',
  registrationCode: 'registrationCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uuidId: 'uuidId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authId: 'authId',
  uuidId: 'uuidId',
  clinicId: 'clinicId'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  providerType: 'providerType',
  position: 'position',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clinicId: 'clinicId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  name: 'name',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderLocationScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  locationId: 'locationId',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  isPrimary: 'isPrimary'
};

exports.Prisma.LocationFinancialScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  locationId: 'locationId',
  date: 'date',
  production: 'production',
  adjustments: 'adjustments',
  writeOffs: 'writeOffs',
  netProduction: 'netProduction',
  patientIncome: 'patientIncome',
  insuranceIncome: 'insuranceIncome',
  totalCollections: 'totalCollections',
  unearned: 'unearned',
  dataSourceId: 'dataSourceId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricDefinitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  dataType: 'dataType',
  calculationFormula: 'calculationFormula',
  category: 'category',
  isComposite: 'isComposite',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  spreadsheetId: 'spreadsheetId',
  sheetName: 'sheetName',
  lastSyncedAt: 'lastSyncedAt',
  syncFrequency: 'syncFrequency',
  connectionStatus: 'connectionStatus',
  appScriptId: 'appScriptId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clinicId: 'clinicId',
  providerId: 'providerId'
};

exports.Prisma.ColumnMappingScalarFieldEnum = {
  id: 'id',
  columnName: 'columnName',
  transformationRule: 'transformationRule',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dataSourceId: 'dataSourceId',
  metricDefinitionId: 'metricDefinitionId'
};

exports.Prisma.MetricValueScalarFieldEnum = {
  id: 'id',
  date: 'date',
  value: 'value',
  sourceType: 'sourceType',
  sourceSheet: 'sourceSheet',
  externalId: 'externalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metricDefinitionId: 'metricDefinitionId',
  clinicId: 'clinicId',
  providerId: 'providerId',
  dataSourceId: 'dataSourceId'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  timePeriod: 'timePeriod',
  startDate: 'startDate',
  endDate: 'endDate',
  targetValue: 'targetValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metricDefinitionId: 'metricDefinitionId',
  clinicId: 'clinicId',
  providerId: 'providerId'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDefault: 'isDefault',
  layoutConfig: 'layoutConfig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uuidId: 'uuidId',
  userUuidId: 'userUuidId',
  userId: 'userId'
};

exports.Prisma.WidgetScalarFieldEnum = {
  id: 'id',
  widgetType: 'widgetType',
  chartType: 'chartType',
  positionX: 'positionX',
  positionY: 'positionY',
  width: 'width',
  height: 'height',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dashboardId: 'dashboardId',
  metricDefinitionId: 'metricDefinitionId'
};

exports.Prisma.UserClinicRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clinicId: 'clinicId',
  role: 'role',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GoalTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  metricDefinitionId: 'metricDefinitionId',
  targetFormula: 'targetFormula',
  timePeriod: 'timePeriod',
  isSystemTemplate: 'isSystemTemplate',
  clinicId: 'clinicId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancialMetricScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  date: 'date',
  metricType: 'metricType',
  category: 'category',
  amount: 'amount',
  providerId: 'providerId',
  insuranceCarrier: 'insuranceCarrier',
  paymentMethod: 'paymentMethod',
  procedureCode: 'procedureCode',
  notes: 'notes',
  sourceReference: 'sourceReference',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentMetricScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  date: 'date',
  providerId: 'providerId',
  appointmentType: 'appointmentType',
  scheduledCount: 'scheduledCount',
  completedCount: 'completedCount',
  cancelledCount: 'cancelledCount',
  noShowCount: 'noShowCount',
  averageDuration: 'averageDuration',
  productionAmount: 'productionAmount',
  utilizationRate: 'utilizationRate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CallMetricScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  date: 'date',
  callType: 'callType',
  totalCalls: 'totalCalls',
  connectedCalls: 'connectedCalls',
  voicemails: 'voicemails',
  appointmentsScheduled: 'appointmentsScheduled',
  conversionRate: 'conversionRate',
  averageCallDuration: 'averageCallDuration',
  staffMemberId: 'staffMemberId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientMetricScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  date: 'date',
  activePatients: 'activePatients',
  newPatients: 'newPatients',
  reactivatedPatients: 'reactivatedPatients',
  lostPatients: 'lostPatients',
  patientRetentionRate: 'patientRetentionRate',
  averagePatientValue: 'averagePatientValue',
  recareComplianceRate: 'recareComplianceRate',
  treatmentAcceptanceRate: 'treatmentAcceptanceRate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricAggregationScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  metricDefinitionId: 'metricDefinitionId',
  aggregationType: 'aggregationType',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  value: 'value',
  count: 'count',
  minimum: 'minimum',
  maximum: 'maximum',
  average: 'average',
  standardDeviation: 'standardDeviation',
  providerId: 'providerId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GoogleCredentialScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  scope: 'scope',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpreadsheetConnectionScalarFieldEnum = {
  id: 'id',
  clinicId: 'clinicId',
  credentialId: 'credentialId',
  spreadsheetId: 'spreadsheetId',
  spreadsheetName: 'spreadsheetName',
  sheetNames: 'sheetNames',
  lastSyncAt: 'lastSyncAt',
  syncStatus: 'syncStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ColumnMappingV2ScalarFieldEnum = {
  id: 'id',
  connectionId: 'connectionId',
  sheetName: 'sheetName',
  mappingConfig: 'mappingConfig',
  templateName: 'templateName',
  version: 'version',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HygieneProductionScalarFieldEnum = {
  id: 'id',
  date: 'date',
  monthTab: 'monthTab',
  hoursWorked: 'hoursWorked',
  estimatedProduction: 'estimatedProduction',
  verifiedProduction: 'verifiedProduction',
  productionGoal: 'productionGoal',
  variancePercentage: 'variancePercentage',
  bonusAmount: 'bonusAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clinicId: 'clinicId',
  providerId: 'providerId',
  dataSourceId: 'dataSourceId'
};

exports.Prisma.DentistProductionScalarFieldEnum = {
  id: 'id',
  date: 'date',
  monthTab: 'monthTab',
  verifiedProductionHumble: 'verifiedProductionHumble',
  verifiedProductionBaytown: 'verifiedProductionBaytown',
  totalProduction: 'totalProduction',
  monthlyGoal: 'monthlyGoal',
  productionPerHour: 'productionPerHour',
  avgDailyProduction: 'avgDailyProduction',
  providerName: 'providerName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clinicId: 'clinicId',
  providerId: 'providerId',
  dataSourceId: 'dataSourceId'
};

exports.Prisma.IdMappingScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  oldId: 'oldId',
  newId: 'newId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Clinic: 'Clinic',
  User: 'User',
  Provider: 'Provider',
  Location: 'Location',
  ProviderLocation: 'ProviderLocation',
  LocationFinancial: 'LocationFinancial',
  MetricDefinition: 'MetricDefinition',
  DataSource: 'DataSource',
  ColumnMapping: 'ColumnMapping',
  MetricValue: 'MetricValue',
  Goal: 'Goal',
  Dashboard: 'Dashboard',
  Widget: 'Widget',
  UserClinicRole: 'UserClinicRole',
  GoalTemplate: 'GoalTemplate',
  FinancialMetric: 'FinancialMetric',
  AppointmentMetric: 'AppointmentMetric',
  CallMetric: 'CallMetric',
  PatientMetric: 'PatientMetric',
  MetricAggregation: 'MetricAggregation',
  GoogleCredential: 'GoogleCredential',
  SpreadsheetConnection: 'SpreadsheetConnection',
  ColumnMappingV2: 'ColumnMappingV2',
  HygieneProduction: 'HygieneProduction',
  DentistProduction: 'DentistProduction',
  IdMapping: 'IdMapping'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
