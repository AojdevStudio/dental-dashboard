name: Code Quality & Null Safety Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      # Cloud test database configuration
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.TEST_DIRECT_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      # Application configuration
      NEXT_PUBLIC_SITE_URL: http://localhost:3000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify cloud database connection
        run: |
          echo "🔌 Verifying connection to cloud test database..."
          echo "Database URL: ${DATABASE_URL%%@*}@***"
          echo "Supabase URL: $NEXT_PUBLIC_SUPABASE_URL"
          
          # Test database connectivity
          if ! pnpm exec prisma db ping --timeout 10; then
            echo "❌ Failed to connect to cloud test database"
            exit 1
          fi
          echo "✅ Cloud test database connection verified"

      - name: Run Biome linting (with null safety checks)
        run: |
          echo "🔍 Running Biome linting with null safety validation..."
          pnpm biome:check
          
          # Check specifically for non-null assertions
          echo "🚫 Checking for non-null assertions..."
          BIOME_JSON=$(pnpm biome check --reporter=json 2>/dev/null || echo '{"diagnostics":[]}')
          NON_NULL_VIOLATIONS=$(echo "$BIOME_JSON" | jq -r '.diagnostics[]? | select(.rule.name == "noNonNullAssertion") | "\(.location.path):\(.location.span.start.line) - \(.message)"' 2>/dev/null || echo "")
          
          if [ -n "$NON_NULL_VIOLATIONS" ]; then
            echo "❌ Non-null assertions detected! This violates our null safety policy."
            echo "Please fix these violations before merging:"
            echo "$NON_NULL_VIOLATIONS"
            exit 1
          else
            echo "✅ No non-null assertions found - null safety compliance verified!"
          fi

      - name: Run TypeScript type checking
        run: |
          echo "🔧 Running TypeScript type checking..."
          # Use typecheck command for comprehensive type validation
          pnpm typecheck

      - name: Run full test suite
        run: |
          echo "🧪 Running full test suite..."
          pnpm test --run

      - name: Check YAML formatting
        run: |
          echo "📝 Checking YAML formatting..."
          pnpm prettier:yaml --check

      - name: Build application
        run: |
          echo "🏗️ Building application..."
          pnpm build

      - name: Generate null safety report
        if: always()
        run: |
          echo "📊 Generating null safety compliance report..."
          
          # Create report directory
          mkdir -p reports
          
          # Generate comprehensive report
          REPORT_DATE=$(date)
          BIOME_SUMMARY=$(pnpm biome check --reporter=summary 2>&1 || echo "Linting completed")
          BIOME_JSON=$(pnpm biome check --reporter=json 2>/dev/null || echo '{"diagnostics":[]}')
          NON_NULL_CHECK=$(echo "$BIOME_JSON" | jq -r '.diagnostics[]? | select(.rule.name == "noNonNullAssertion") | "\(.location.path):\(.location.span.start.line) - \(.message)"' 2>/dev/null || echo "✅ No non-null assertions found")
          
          cat > reports/null-safety-report.md << EOF
          # Null Safety Compliance Report
          
          **Generated:** $REPORT_DATE
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Summary
          
          This report validates that the codebase maintains null safety compliance by:
          1. Ensuring zero non-null assertions (\`!\` operator)
          2. Validating proper type safety patterns
          3. Confirming error handling best practices
          
          ## Biome Linting Results
          
          \`\`\`bash
          $BIOME_SUMMARY
          \`\`\`
          
          ## Non-Null Assertion Check
          
          \`\`\`bash
          $NON_NULL_CHECK
          \`\`\`
          
          ## Recommendations
          
          - Continue using type guards from \`src/lib/utils/type-guards.ts\`
          - Use environment validation from \`src/lib/config/environment.ts\`
          - Follow null safety patterns documented in \`docs/null-safety-patterns.md\`
          
          EOF

      - name: Upload null safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: null-safety-report
          path: reports/null-safety-report.md
          retention-days: 30


  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      # Cloud test database configuration
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.TEST_DIRECT_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      # Application configuration
      NEXT_PUBLIC_SITE_URL: http://localhost:3000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Run security audit
        run: |
          echo "🔍 Running dependency security audit..."
          pnpm audit --audit-level moderate || echo "⚠️ Security audit completed with warnings"
