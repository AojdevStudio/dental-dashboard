name: Code Quality & Null Safety Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Cancel in-progress runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: test
      # Cloud test database configuration
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.TEST_DIRECT_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      # Application configuration
      NEXT_PUBLIC_SITE_URL: http://localhost:3000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Required for auto-fix commits in PRs
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify cloud database connection
        run: |
          echo "üîå Verifying connection to cloud test database..."
          echo "Database URL: ${DATABASE_URL%%@*}@***"
          echo "Supabase URL: $NEXT_PUBLIC_SUPABASE_URL"
          
          # Test database connectivity with retries
          CONNECTION_SUCCESS=false
          for i in {1..3}; do
            echo "üîÑ Connection attempt $i of 3..."
            if pnpm exec prisma db ping --timeout 20; then
              echo "‚úÖ Cloud test database connection verified"
              CONNECTION_SUCCESS=true
              break
            else
              echo "‚ö†Ô∏è Connection attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "‚è≥ Waiting 5 seconds before retry..."
                sleep 5
              fi
            fi
          done
          
          if [ "$CONNECTION_SUCCESS" = false ]; then
            echo "‚ùå Failed to connect to cloud test database after 3 attempts"
            echo "Please check:"
            echo "1. GitHub secrets are properly configured"
            echo "2. Database URL is correct and accessible"
            echo "3. Network connectivity from GitHub Actions"
            exit 1
          fi

      # Auto-fix formatting issues in PRs
      - name: Auto-fix formatting issues (PR only)
        if: github.event_name == 'pull_request'
        id: autofix
        run: |
          echo "üîß Attempting to auto-fix formatting issues..."
          
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Run auto-fix
          pnpm biome check --write . || true
          pnpm prettier:yaml || true
          
          # Check if there are changes
          if [[ -n $(git status -s) ]]; then
            echo "üìù Found auto-fixable issues, committing fixes..."
            git add .
            git commit -m "ü§ñ Auto-fix: Format code with Biome and Prettier
            
            Co-authored-by: $GITHUB_ACTOR <$GITHUB_ACTOR@users.noreply.github.com>"
            echo "has_fixes=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No auto-fixable issues found"
            echo "has_fixes=false" >> $GITHUB_OUTPUT
          fi

      - name: Push auto-fixes
        if: steps.autofix.outputs.has_fixes == 'true' && github.event_name == 'pull_request'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Run Biome linting (with null safety checks)
        id: biome
        run: |
          echo "üîç Running Biome linting with null safety validation..."
          
          # Run Biome and capture exit code
          set +e
          pnpm biome:check
          BIOME_EXIT=$?
          set -e
          
          # Check specifically for non-null assertions
          echo "üö´ Checking for non-null assertions..."
          BIOME_JSON=$(pnpm biome check --reporter=json 2>/dev/null || echo '{"diagnostics":[]}')
          NON_NULL_VIOLATIONS=$(echo "$BIOME_JSON" | jq -r '.diagnostics[]? | select(.rule.name == "noNonNullAssertion") | "\(.location.path):\(.location.span.start.line) - \(.message)"' 2>/dev/null || echo "")
          
          if [ -n "$NON_NULL_VIOLATIONS" ]; then
            echo "‚ùå Non-null assertions detected! This violates our null safety policy."
            echo "Please fix these violations before merging:"
            echo "$NON_NULL_VIOLATIONS"
            
            # Create annotation for PR
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "::error::Non-null assertions detected. See job logs for details."
            fi
            exit 1
          else
            echo "‚úÖ No non-null assertions found - null safety compliance verified!"
          fi
          
          # Exit with Biome's exit code
          exit $BIOME_EXIT

      - name: Run TypeScript type checking
        run: |
          echo "üîß Running TypeScript type checking..."
          pnpm typecheck || {
            echo "::error::TypeScript type checking failed. See logs for details."
            exit 1
          }

      - name: Run full test suite
        run: |
          echo "üß™ Running full test suite..."
          pnpm test --run || {
            echo "::error::Test suite failed. See logs for details."
            exit 1
          }

      - name: Check YAML formatting
        run: |
          echo "üìù Checking YAML formatting..."
          pnpm prettier:yaml --check || {
            echo "::error::YAML formatting issues found. Run 'pnpm prettier:yaml' locally."
            exit 1
          }

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application..."
          pnpm build || {
            echo "::error::Build failed. See logs for details."
            exit 1
          }

      - name: Generate null safety report
        if: always()
        run: |
          echo "üìä Generating null safety compliance report..."
          
          # Create report directory
          mkdir -p reports
          
          # Generate comprehensive report
          REPORT_DATE=$(date)
          BIOME_SUMMARY=$(pnpm biome check --reporter=summary 2>&1 || echo "Linting completed")
          BIOME_JSON=$(pnpm biome check --reporter=json 2>/dev/null || echo '{"diagnostics":[]}')
          NON_NULL_CHECK=$(echo "$BIOME_JSON" | jq -r '.diagnostics[]? | select(.rule.name == "noNonNullAssertion") | "\(.location.path):\(.location.span.start.line) - \(.message)"' 2>/dev/null || echo "‚úÖ No non-null assertions found")
          
          cat > reports/null-safety-report.md << EOF
          # Null Safety Compliance Report
          
          **Generated:** $REPORT_DATE
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Summary
          
          This report validates that the codebase maintains null safety compliance by:
          1. Ensuring zero non-null assertions (\`!\` operator)
          2. Validating proper type safety patterns
          3. Confirming error handling best practices
          
          ## Biome Linting Results
          
          \`\`\`bash
          $BIOME_SUMMARY
          \`\`\`
          
          ## Non-Null Assertion Check
          
          \`\`\`bash
          $NON_NULL_CHECK
          \`\`\`
          
          ## Recommendations
          
          - Continue using type guards from \`src/lib/utils/type-guards.ts\`
          - Use environment validation from \`src/lib/config/environment.ts\`
          - Follow null safety patterns documented in \`docs/null-safety-patterns.md\`
          
          EOF

      - name: Upload null safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: null-safety-report
          path: reports/null-safety-report.md
          retention-days: 30

      # Add PR comment with helpful info on failure
      - name: Comment on PR with failure details
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚ùå CI Check Failed
            
            The code quality checks have failed. Here's how to fix them:
            
            ### üîß Quick Fixes:
            1. **Run locally:** \`pnpm ci:test\` to see all issues
            2. **Auto-fix:** \`pnpm biome:fix\` for formatting/linting
            3. **Type errors:** \`pnpm typecheck\` to see details
            4. **Test failures:** \`pnpm test\` to debug
            
            ### üí° Pro Tips:
            - Use the pre-push hook to catch issues early
            - Run \`pnpm code-quality\` before pushing
            - Check the [CI logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
            
            _This comment was auto-generated to help you fix CI issues faster._`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });


  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    # Continue even if code quality fails
    if: always()
    
    env:
      NODE_ENV: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies (prod only for audit)
        run: pnpm install --prod --frozen-lockfile --ignore-scripts

      - name: Run security audit
        id: audit
        run: |
          echo "üîç Running dependency security audit..."
          
          # Run audit and capture output
          set +e
          AUDIT_OUTPUT=$(pnpm audit --audit-level high 2>&1)
          AUDIT_EXIT=$?
          set -e
          
          echo "$AUDIT_OUTPUT"
          
          # Check for high/critical vulnerabilities
          if [ $AUDIT_EXIT -ne 0 ]; then
            if echo "$AUDIT_OUTPUT" | grep -q "critical\|high"; then
              echo "‚ùå High or critical vulnerabilities found!"
              echo "high_vulns=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "‚ö†Ô∏è Moderate/low vulnerabilities found (non-blocking)"
              echo "high_vulns=false" >> $GITHUB_OUTPUT
              # Don't fail for moderate/low
              exit 0
            fi
          else
            echo "‚úÖ No security vulnerabilities found"
            echo "high_vulns=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security issue for moderate vulnerabilities
        if: failure() == false && contains(steps.audit.outputs.*, 'moderate')
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üîí Moderate security vulnerabilities in dependencies';
            const body = `Moderate security vulnerabilities were found during the automated audit.
            
            **Action Required:**
            - Run \`pnpm audit\` locally to see details
            - Update affected packages when possible
            - Document any false positives
            
            This issue was automatically created by the CI pipeline.`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'dependencies']
              });
            }